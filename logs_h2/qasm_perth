

   ==> Run Calibration circuits <== 
n_shots       =     100000
Backend       =      qasm_simulator
Noise model   =      ibm_perth
NoiseModel:
  Basis gates: ['cx', 'id', 'reset', 'rz', 'sx', 'x']
  Instructions with noise: ['reset', 'sx', 'x', 'cx', 'measure', 'id']
  Qubits with noise: [0, 1, 2, 3, 4, 5, 6]
  Specific qubit errors: [('id', (0,)), ('id', (1,)), ('id', (2,)), ('id', (3,)), ('id', (4,)), ('id', (5,)), ('id', (6,)), ('sx', (0,)), ('sx', (1,)), ('sx', (2,)), ('sx', (3,)), ('sx', (4,)), ('sx', (5,)), ('sx', (6,)), ('x', (0,)), ('x', (1,)), ('x', (2,)), ('x', (3,)), ('x', (4,)), ('x', (5,)), ('x', (6,)), ('cx', (6, 5)), ('cx', (5, 6)), ('cx', (4, 5)), ('cx', (5, 4)), ('cx', (3, 5)), ('cx', (5, 3)), ('cx', (3, 1)), ('cx', (1, 3)), ('cx', (2, 1)), ('cx', (1, 2)), ('cx', (0, 1)), ('cx', (1, 0)), ('reset', (0,)), ('reset', (1,)), ('reset', (2,)), ('reset', (3,)), ('reset', (4,)), ('reset', (5,)), ('reset', (6,)), ('measure', (0,)), ('measure', (1,)), ('measure', (2,)), ('measure', (3,)), ('measure', (4,)), ('measure', (5,)), ('measure', (6,))]
Calibration matrix =
[[0.97772 0.0227 ]
 [0.02228 0.9773 ]]

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/0.6
c_z = -0.975331596
c_x = 0.172588132
c_0 = -0.140879461

  t_A = -0.175140281
    <Z>_A = cos(t_A) = 0.984702105
    <X>_A = sin(t_A) = -0.174246274

   ==> Run 3-point Fourier quadrature <==
  t = -0.175140, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.175140, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = 0.872057, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = 0.872057, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -1.222338, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.222338, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 1.1102230246251565e-16, b = -0.9753315962732314, c = 0.17258813211389312

  t_opt = -0.175140281
    <Z>_opt = cos(t_opt) = 0.984702105
    <X>_opt = sin(t_opt) = -0.174246274
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -0.175140, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.175140, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.9417
  <X> = -0.16412000000000004
  Energy = -1.0876743898709806

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9856128667472233
  <X> = -0.17228958555559493
  Energy = -1.1319139698036684
  measure Z: {'0': 99280.64333736115, '1': 719.3566626388437})
  measure X: {'0': 41385.52072222025, '1': 58614.47927777975})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_0/0.6

   ==> (oq_map.json) Exact results for r = 0.6 <== 
evals = [-1.13136338  0.84960445]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.131363376499586
e_analytic - evals[0] = -0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/0.65
c_z = -0.893017040
c_x = 0.171773983
c_0 = -0.234423207

  t_A = -0.190031414
    <Z>_A = cos(t_A) = 0.981998302
    <X>_A = sin(t_A) = -0.188889744

   ==> Run 3-point Fourier quadrature <==
  t = -0.190031, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.190031, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = 0.857166, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = 0.857166, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -1.237229, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.237229, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 1.1102230246251565e-16, b = -0.8930170404711619, c = 0.17177398346406272

  t_opt = -0.190031414
    <Z>_opt = cos(t_opt) = 0.981998302
    <X>_opt = sin(t_opt) = -0.188889744
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -0.190031, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.190031, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.93678
  <X> = -0.17886000000000002
  Energy = -1.1017072050327537

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9804611421748417
  <X> = -0.18772382140177507
  Energy = -1.142237783253028
  measure Z: {'0': 99023.05710874208, '1': 976.9428912579177})
  measure X: {'0': 40613.80892991125, '1': 59386.19107008875})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_0/0.65

   ==> (oq_map.json) Exact results for r = 0.65 <== 
evals = [-1.14381077  0.67496435]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.1438107681038217
e_analytic - evals[0] = -0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/0.7
c_z = -0.818749229
c_x = 0.171060688
c_0 = -0.313783336

  t_A = -0.205966480
    <Z>_A = cos(t_A) = 0.978863784
    <X>_A = sin(t_A) = -0.204513307

   ==> Run 3-point Fourier quadrature <==
  t = -0.205966, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.205966, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = 0.841231, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = 0.841231, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -1.253164, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.253164, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 1.1102230246251565e-16, b = -0.8187492286324077, c = 0.1710606880831236

  t_opt = -0.205966480
    <Z>_opt = cos(t_opt) = 0.978863784
    <X>_opt = sin(t_opt) = -0.204513307
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -0.205966, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.205966, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.9353400000000001
  <X> = -0.1981
  Energy = -1.1134793621191132

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9789533203492004
  <X> = -0.20786998332835155
  Energy = -1.1508589945838272
  measure Z: {'0': 98947.66601746003, '1': 1052.3339825399862})
  measure X: {'0': 39606.50083358242, '1': 60393.499166417576})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_0/0.7

   ==> (oq_map.json) Exact results for r = 0.7 <== 
evals = [-1.15021149  0.52264482]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.1502114912511527
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/0.75
c_z = -0.751762455
c_x = 0.170457573
c_0 = -0.381398162

  t_A = -0.222973719
    <Z>_A = cos(t_A) = 0.975244182
    <X>_A = sin(t_A) = -0.221130698

   ==> Run 3-point Fourier quadrature <==
  t = -0.222974, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.222974, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = 0.824224, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = 0.824224, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -1.270171, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.270171, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = -2.220446049250313e-16, b = -0.7517624545623147, c = 0.17045757337561956

  t_opt = -0.222973719
    <Z>_opt = cos(t_opt) = 0.975244182
    <X>_opt = sin(t_opt) = -0.221130698
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -0.222974, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.222974, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.9322999999999999
  <X> = -0.21619999999999995
  Energy = -1.1191192256441425

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9757701409405981
  <X> = -0.22682247492588253
  Energy = -1.1536091267969257
  measure Z: {'0': 98788.5070470299, '1': 1211.4929529700973})
  measure X: {'0': 38658.87625370587, '1': 61341.12374629413})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_0/0.75

   ==> (oq_map.json) Exact results for r = 0.75 <== 
evals = [-1.15224352  0.3894472 ]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.1522435240824251
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/0.8
c_z = -0.691218028
c_x = 0.169960572
c_0 = -0.439308382

  t_A = -0.241102571
    <Z>_A = cos(t_A) = 0.971075301
    <X>_A = sin(t_A) = -0.238773451

   ==> Run 3-point Fourier quadrature <==
  t = -0.241103, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.241103, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = 0.806095, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = 0.806095, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -1.288300, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.288300, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 1.1102230246251565e-16, b = -0.6912180276548995, c = 0.16996057197909592

  t_opt = -0.241102571
    <Z>_opt = cos(t_opt) = 0.971075301
    <X>_opt = sin(t_opt) = -0.238773451
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -0.241103, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.241103, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.92902
  <X> = -0.23160000000000003
  Energy = -1.1208266225601597

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9723356577878238
  <X> = -0.2429477916692847
  Energy = -1.1526958632656452
  measure Z: {'0': 98616.78288939118, '1': 1383.2171106088097})
  measure X: {'0': 37852.61041653576, '1': 62147.38958346423})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_0/0.8

   ==> (oq_map.json) Exact results for r = 0.8 <== 
evals = [-1.15111521  0.27249844]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.1511152082081149
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/0.85
c_z = -0.636488864
c_x = 0.169579229
c_0 = -0.489018448

  t_A = -0.260380693
    <Z>_A = cos(t_A) = 0.966292039
    <X>_A = sin(t_A) = -0.257448431

   ==> Run 3-point Fourier quadrature <==
  t = -0.260381, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.260381, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = 0.786817, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = 0.786817, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -1.307578, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.307578, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 1.1102230246251565e-16, b = -0.6364888642400292, c = 0.1695792294651544

  t_opt = -0.260380693
    <Z>_opt = cos(t_opt) = 0.966292039
    <X>_opt = sin(t_opt) = -0.257448431
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -0.260381, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.260381, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.9241600000000001
  <X> = -0.24172
  Energy = -1.1182266881880603

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9672467594632193
  <X> = -0.25354442860308596
  Energy = -1.147656108273965
  measure Z: {'0': 98362.33797316096, '1': 1637.662026839036})
  measure X: {'0': 37322.7785698457, '1': 62677.22143015429})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_0/0.85

   ==> (oq_map.json) Exact results for r = 0.85 <== 
evals = [-1.14771048  0.16967358]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.147710477292962
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/1.15
c_z = -0.399295092
c_x = 0.169766330
c_0 = -0.672952709

  t_A = -0.402010464
    <Z>_A = cos(t_A) = 0.920276221
    <X>_A = sin(t_A) = -0.391269314

   ==> Run 3-point Fourier quadrature <==
  t = -0.402010, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.402010, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = 0.645187, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = 0.645187, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -1.449208, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.449208, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 0.0, b = -0.39929509169104116, c = 0.1697663300774525

  t_opt = -0.402010464
    <Z>_opt = cos(t_opt) = 0.920276221
    <X>_opt = sin(t_opt) = -0.391269314
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -0.402010, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.402010, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.87978
  <X> = -0.37748000000000004
  Energy = -1.0883279391229077

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9207765282518363
  <X> = -0.3956985150785152
  Energy = -1.1077905420745793
  measure Z: {'0': 96038.82641259182, '1': 3961.1735874081796})
  measure X: {'0': 30215.074246074237, '1': 69784.92575392577})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_0/1.15

   ==> (oq_map.json) Exact results for r = 1.15 <== 
evals = [-1.10683884 -0.23906658]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.1068388428457654
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/1.2
c_z = -0.371037374
c_x = 0.170213481
c_0 = -0.690922272

  t_A = -0.430106748
    <Z>_A = cos(t_A) = 0.908921244
    <X>_A = sin(t_A) = -0.416967830

   ==> Run 3-point Fourier quadrature <==
  t = -0.430107, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.430107, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = 0.617091, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = 0.617091, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -1.477304, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.477304, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 5.551115123125783e-17, b = -0.37103737361427747, c = 0.1702134805811622

  t_opt = -0.430106748
    <Z>_opt = cos(t_opt) = 0.908921244
    <X>_opt = sin(t_opt) = -0.416967830
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -0.430107, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.430107, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.8692
  <X> = -0.40193999999999996
  Energy = -1.0818435634843027

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9096982262756828
  <X> = -0.4213105484645757
  Energy = -1.1001670474725902
  measure Z: {'0': 95484.91131378415, '1': 4515.088686215858})
  measure X: {'0': 28934.47257677121, '1': 71065.52742322879})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_0/1.2

   ==> (oq_map.json) Exact results for r = 1.2 <== 
evals = [-1.09913957 -0.28270497]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.099139568978659
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/1.3
c_z = -0.321395392
c_x = 0.171457744
c_0 = -0.719962104

  t_A = -0.490070852
    <Z>_A = cos(t_A) = 0.882299511
    <X>_A = sin(t_A) = -0.470688402

   ==> Run 3-point Fourier quadrature <==
  t = -0.490071, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.490071, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = 0.557127, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = 0.557127, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -1.537268, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.537268, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = -5.551115123125783e-17, b = -0.32139539191852406, c = 0.1714577437790655

  t_opt = -0.490070852
    <Z>_opt = cos(t_opt) = 0.882299511
    <X>_opt = sin(t_opt) = -0.470688402
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -0.490071, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.490071, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.84416
  <X> = -0.44998000000000005
  Energy = -1.0684237931053913

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.8834788800550524
  <X> = -0.4716131599212854
  Energy = -1.0847698727613975
  measure Z: {'0': 94173.94400275261, '1': 5826.055997247382})
  measure X: {'0': 26419.342003935733, '1': 73580.65799606427})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_0/1.3

   ==> (oq_map.json) Exact results for r = 1.3 <== 
evals = [-1.08423227 -0.35569193]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.0842322722775133
e_analytic - evals[0] = -0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/1.45
c_z = -0.260906520
c_x = 0.174167246
c_0 = -0.750292491

  t_A = -0.588611503
    <Z>_A = cos(t_A) = 0.831712383
    <X>_A = sin(t_A) = -0.555206729

   ==> Run 3-point Fourier quadrature <==
  t = -0.588612, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.588612, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = 0.458586, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = 0.458586, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -1.635809, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.635809, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 0.0, b = -0.2609065198764, c = 0.17416724617012772

  t_opt = -0.588611503
    <Z>_opt = cos(t_opt) = 0.831712383
    <X>_opt = sin(t_opt) = -0.555206729
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -0.588612, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.588612, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.79898
  <X> = -0.5299
  Energy = -1.051042805614367

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.8361709702430695
  <X> = -0.5552972712515123
  Energy = -1.0651695450254246
  measure Z: {'0': 91808.54851215349, '1': 8191.451487846518})
  measure X: {'0': 22235.13643742438, '1': 77764.86356257561})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_0/1.45

   ==> (oq_map.json) Exact results for r = 1.45 <== 
evals = [-1.0639905  -0.43659448]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.0639905010555568
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/1.6
c_z = -0.213224929
c_x = 0.177807023
c_0 = -0.769382665

  t_A = -0.695069165
    <Z>_A = cos(t_A) = 0.768009407
    <X>_A = sin(t_A) = -0.640438561

   ==> Run 3-point Fourier quadrature <==
  t = -0.695069, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.695069, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = 0.352128, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = 0.352128, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -1.742267, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.742267, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = -2.7755575615628914e-17, b = -0.21322492879091284, c = 0.17780702316230243

  t_opt = -0.695069165
    <Z>_opt = cos(t_opt) = 0.768009407
    <X>_opt = sin(t_opt) = -0.640438561
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -0.695069, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.695069, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.7374
  <X> = -0.61022
  Energy = -1.0351161293709317

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.7716906452327477
  <X> = -0.639400221978581
  Energy = -1.0476161981641057
  measure Z: {'0': 88584.53226163737, '1': 11415.467738362617})
  measure X: {'0': 18029.98890107095, '1': 81970.01109892906})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_0/1.6

   ==> (oq_map.json) Exact results for r = 1.6 <== 
evals = [-1.04701589 -0.49174944]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.0470158904222164
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/1.9
c_z = -0.144203901
c_x = 0.187268886
c_0 = -0.786868492

  t_A = -0.914594616
    <Z>_A = cos(t_A) = 0.610111817
    <X>_A = sin(t_A) = -0.792315323

   ==> Run 3-point Fourier quadrature <==
  t = -0.914595, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.914595, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = 0.132603, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = 0.132603, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -1.961792, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.961792, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 1.3877787807814457e-17, b = -0.14420390107599912, c = 0.18726888604283617

  t_opt = -0.914594616
    <Z>_opt = cos(t_opt) = 0.610111817
    <X>_opt = sin(t_opt) = -0.792315323
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -0.914595, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.914595, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.58192
  <X> = -0.75518
  Energy = -1.0122053431861413

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.6088877719743365
  <X> = -0.7911876191637681
  Energy = -1.0228373078380222
  measure Z: {'0': 80444.38859871682, '1': 19555.61140128317})
  measure X: {'0': 10440.619041811593, '1': 89559.3809581884})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_0/1.9

   ==> (oq_map.json) Exact results for r = 1.9 <== 
evals = [-1.023225   -0.55051198]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.0232250037111297
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/2.5
c_z = -0.066271102
c_x = 0.209148615
c_0 = -0.784992480

  t_A = -1.263943124
    <Z>_A = cos(t_A) = 0.302060331
    <X>_A = sin(t_A) = -0.953288811

   ==> Run 3-point Fourier quadrature <==
  t = -1.263943, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.263943, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -0.216746, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.216746, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -2.311141, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -2.311141, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 3.469446951953614e-18, b = -0.06627110183578012, c = 0.2091486150522356

  t_opt = -1.263943124
    <Z>_opt = cos(t_opt) = 0.302060331
    <X>_opt = sin(t_opt) = -0.953288811
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -1.263943, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.263943, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.28724
  <X> = -0.91028
  Energy = -0.9944119930346088

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.30032878892148
  <X> = -0.9535925983357627
  Energy = -1.0043381714543698
  measure Z: {'0': 65016.43944607401, '1': 34983.560553926})
  measure X: {'0': 2320.3700832118616, '1': 97679.62991678814})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_0/2.5

   ==> (oq_map.json) Exact results for r = 2.5 <== 
evals = [-1.00438939 -0.56559557]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.0043893858738882
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/2.95
c_z = -0.036185839
c_x = 0.223454420
c_0 = -0.774745750

  t_A = -1.410251678
    <Z>_A = cos(t_A) = 0.159855875
    <X>_A = sin(t_A) = -0.987140364

   ==> Run 3-point Fourier quadrature <==
  t = -1.410252, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.410252, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -0.363054, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.363054, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -2.457449, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -2.457449, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 4.336808689942018e-18, b = -0.03618583852259692, c = 0.22345441969595456

  t_opt = -1.410251678
    <Z>_opt = cos(t_opt) = 0.159855875
    <X>_opt = sin(t_opt) = -0.987140364
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -1.410252, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.410252, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.14944000000000002
  <X> = -0.9430000000000001
  Energy = -0.9908708799596215

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.1560386141618807
  <X> = -0.9878536571753239
  Energy = -1.0011324042815095
  measure Z: {'0': 57801.930708094034, '1': 42198.06929190596})
  measure X: {'0': 607.3171412338065, '1': 99392.68285876619})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_0/2.95

   ==> (oq_map.json) Exact results for r = 2.95 <== 
evals = [-1.00111115 -0.54838035]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.0011111466652745
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/6.0
c_z = -0.000371898
c_x = 0.268404889
c_0 = -0.731584011

  t_A = -1.569410743
    <Z>_A = cos(t_A) = 0.001385583
    <X>_A = sin(t_A) = -0.999999040

   ==> Run 3-point Fourier quadrature <==
  t = -1.569411, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.569411, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -0.522213, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.522213, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -2.616608, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -2.616608, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = -2.6673808662866765e-17, b = -0.0003718976809356127, c = 0.2684048893716581

  t_opt = -1.569410743
    <Z>_opt = cos(t_opt) = 0.001385583
    <X>_opt = sin(t_opt) = -0.999999040
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -1.569411, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.569411, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.0010200000000000209
  <X> = -0.95536
  Energy = -0.9880076852658892

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.0006282591003115567
  <X> = -1.0
  Energy = -0.9999891338399078
  measure Z: {'0': 50031.41295501558, '1': 49968.58704498442})
  measure X: {'1': 100000.0, '0': 0})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_0/6.0

   ==> (oq_map.json) Exact results for r = 6.0 <== 
evals = [-0.99998916 -0.46317886]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -0.9999891578395312
e_analytic - evals[0] = 0.000000000000



   ==> Run Calibration circuits <== 
n_shots       =     100000
Backend       =      qasm_simulator
Noise model   =      ibm_perth
NoiseModel:
  Basis gates: ['cx', 'id', 'reset', 'rz', 'sx', 'x']
  Instructions with noise: ['reset', 'sx', 'x', 'cx', 'measure', 'id']
  Qubits with noise: [0, 1, 2, 3, 4, 5, 6]
  Specific qubit errors: [('id', (0,)), ('id', (1,)), ('id', (2,)), ('id', (3,)), ('id', (4,)), ('id', (5,)), ('id', (6,)), ('sx', (0,)), ('sx', (1,)), ('sx', (2,)), ('sx', (3,)), ('sx', (4,)), ('sx', (5,)), ('sx', (6,)), ('x', (0,)), ('x', (1,)), ('x', (2,)), ('x', (3,)), ('x', (4,)), ('x', (5,)), ('x', (6,)), ('cx', (6, 5)), ('cx', (5, 6)), ('cx', (4, 5)), ('cx', (5, 4)), ('cx', (3, 5)), ('cx', (5, 3)), ('cx', (3, 1)), ('cx', (1, 3)), ('cx', (2, 1)), ('cx', (1, 2)), ('cx', (0, 1)), ('cx', (1, 0)), ('reset', (0,)), ('reset', (1,)), ('reset', (2,)), ('reset', (3,)), ('reset', (4,)), ('reset', (5,)), ('reset', (6,)), ('measure', (0,)), ('measure', (1,)), ('measure', (2,)), ('measure', (3,)), ('measure', (4,)), ('measure', (5,)), ('measure', (6,))]
Calibration matrix =
[[0.97791 0.02312]
 [0.02209 0.97688]]

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/0.6
c_z = -0.975331596
c_x = 0.172588132
c_0 = -0.140879461

  t_A = -0.175140281
    <Z>_A = cos(t_A) = 0.984702105
    <X>_A = sin(t_A) = -0.174246274

   ==> Run 3-point Fourier quadrature <==
  t = -0.175140, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.175140, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = 0.872057, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = 0.872057, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -1.222338, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.222338, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 1.1102230246251565e-16, b = -0.9753315962732314, c = 0.17258813211389318

  t_opt = -0.175140281
    <Z>_opt = cos(t_opt) = 0.984702105
    <X>_opt = sin(t_opt) = -0.174246274
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -0.175140, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.175140, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.9407399999999999
  <X> = -0.16379999999999995
  Energy = -1.0866828433362818

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.984205951027134
  <X> = -0.17263482019730275
  Energy = -1.1306013438505254
  measure Z: {'0': 99210.29755135672, '1': 789.7024486432863})
  measure X: {'0': 41368.25899013486, '1': 58631.74100986513})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_1/0.6

   ==> (oq_map.json) Exact results for r = 0.6 <== 
evals = [-1.13136338  0.84960445]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.131363376499586
e_analytic - evals[0] = -0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/0.65
c_z = -0.893017040
c_x = 0.171773983
c_0 = -0.234423207

  t_A = -0.190031414
    <Z>_A = cos(t_A) = 0.981998302
    <X>_A = sin(t_A) = -0.188889744

   ==> Run 3-point Fourier quadrature <==
  t = -0.190031, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.190031, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = 0.857166, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = 0.857166, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -1.237229, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.237229, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 0.0, b = -0.8930170404711618, c = 0.17177398346406272

  t_opt = -0.190031414
    <Z>_opt = cos(t_opt) = 0.981998302
    <X>_opt = sin(t_opt) = -0.188889744
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -0.190031, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.190031, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.94096
  <X> = -0.18226000000000003
  Energy = -1.106024047805701

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9844363692199052
  <X> = -0.19196891021310175
  Energy = -1.1465169245592917
  measure Z: {'0': 99221.81846099526, '1': 778.1815390047382})
  measure X: {'0': 40401.55448934491, '1': 59598.44551065509})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_1/0.65

   ==> (oq_map.json) Exact results for r = 0.65 <== 
evals = [-1.14381077  0.67496435]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.1438107681038217
e_analytic - evals[0] = -0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/0.7
c_z = -0.818749229
c_x = 0.171060688
c_0 = -0.313783336

  t_A = -0.205966480
    <Z>_A = cos(t_A) = 0.978863784
    <X>_A = sin(t_A) = -0.204513307

   ==> Run 3-point Fourier quadrature <==
  t = -0.205966, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.205966, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = 0.841231, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = 0.841231, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -1.253164, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.253164, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 0.0, b = -0.8187492286324076, c = 0.17106068808312358

  t_opt = -0.205966480
    <Z>_opt = cos(t_opt) = 0.978863784
    <X>_opt = sin(t_opt) = -0.204513307
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -0.205966, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.205966, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.93764
  <X> = -0.20073999999999997
  Energy = -1.115814085561507

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9809591650001988
  <X> = -0.21132395601841364
  Energy = -1.153092117289571
  measure Z: {'0': 99047.95825000993, '1': 952.0417499900593})
  measure X: {'0': 39433.80219907932, '1': 60566.19780092069})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_1/0.7

   ==> (oq_map.json) Exact results for r = 0.7 <== 
evals = [-1.15021149  0.52264482]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.1502114912511527
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/0.75
c_z = -0.751762455
c_x = 0.170457573
c_0 = -0.381398162

  t_A = -0.222973719
    <Z>_A = cos(t_A) = 0.975244182
    <X>_A = sin(t_A) = -0.221130698

   ==> Run 3-point Fourier quadrature <==
  t = -0.222974, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.222974, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = 0.824224, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = 0.824224, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -1.270171, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.270171, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = -1.1102230246251565e-16, b = -0.7517624545623148, c = 0.1704575733756195

  t_opt = -0.222973719
    <Z>_opt = cos(t_opt) = 0.975244182
    <X>_opt = sin(t_opt) = -0.221130698
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -0.222974, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.222974, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.9343999999999999
  <X> = -0.21381999999999995
  Energy = -1.1202922377740894

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9775657488919367
  <X> = -0.22502330347231048
  Energy = -1.154652315037793
  measure Z: {'0': 98878.28744459683, '1': 1121.7125554031727})
  measure X: {'0': 38748.834826384475, '1': 61251.16517361553})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_1/0.75

   ==> (oq_map.json) Exact results for r = 0.75 <== 
evals = [-1.15224352  0.3894472 ]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.1522435240824251
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/0.8
c_z = -0.691218028
c_x = 0.169960572
c_0 = -0.439308382

  t_A = -0.241102571
    <Z>_A = cos(t_A) = 0.971075301
    <X>_A = sin(t_A) = -0.238773451

   ==> Run 3-point Fourier quadrature <==
  t = -0.241103, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.241103, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = 0.806095, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = 0.806095, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -1.288300, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.288300, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 1.1102230246251565e-16, b = -0.6912180276548995, c = 0.169960571979096

  t_opt = -0.241102571
    <Z>_opt = cos(t_opt) = 0.971075301
    <X>_opt = sin(t_opt) = -0.238773451
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -0.241103, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.241103, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.92814
  <X> = -0.23102
  Energy = -1.1201197735640755

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9710093300739795
  <X> = -0.24303773612645607
  Energy = -1.1517943686506449
  measure Z: {'0': 98550.46650369898, '1': 1449.5334963010216})
  measure X: {'0': 37848.1131936772, '1': 62151.88680632281})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_1/0.8

   ==> (oq_map.json) Exact results for r = 0.8 <== 
evals = [-1.15111521  0.27249844]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.1511152082081149
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/0.85
c_z = -0.636488864
c_x = 0.169579229
c_0 = -0.489018448

  t_A = -0.260380693
    <Z>_A = cos(t_A) = 0.966292039
    <X>_A = sin(t_A) = -0.257448431

   ==> Run 3-point Fourier quadrature <==
  t = -0.260381, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.260381, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = 0.786817, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = 0.786817, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -1.307578, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.307578, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 0.0, b = -0.636488864240029, c = 0.16957922946515436

  t_opt = -0.260380693
    <Z>_opt = cos(t_opt) = 0.966292039
    <X>_opt = sin(t_opt) = -0.257448431
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -0.260381, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.260381, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.92326
  <X> = -0.25356
  Energy = -1.1196616662871115

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9658982602366004
  <X> = -0.26664502240139604
  Energy = -1.1490193921346392
  measure Z: {'0': 98294.91301183002, '1': 1705.08698816998})
  measure X: {'0': 36667.7488799302, '1': 63332.2511200698})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_1/0.85

   ==> (oq_map.json) Exact results for r = 0.85 <== 
evals = [-1.14771048  0.16967358]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.147710477292962
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/1.15
c_z = -0.399295092
c_x = 0.169766330
c_0 = -0.672952709

  t_A = -0.402010464
    <Z>_A = cos(t_A) = 0.920276221
    <X>_A = sin(t_A) = -0.391269314

   ==> Run 3-point Fourier quadrature <==
  t = -0.402010, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.402010, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = 0.645187, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = 0.645187, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -1.449208, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.449208, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 0.0, b = -0.39929509169104116, c = 0.16976633007745245

  t_opt = -0.402010464
    <Z>_opt = cos(t_opt) = 0.920276221
    <X>_opt = sin(t_opt) = -0.391269314
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -0.402010, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.402010, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.8814200000000001
  <X> = -0.37298000000000003
  Energy = -1.0882188345879324

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9220771059581055
  <X> = -0.39171964514708235
  Energy = -1.1076343782229405
  measure Z: {'0': 96103.85529790528, '1': 3896.1447020947267})
  measure X: {'0': 30414.017742645876, '1': 69585.98225735412})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_1/1.15

   ==> (oq_map.json) Exact results for r = 1.15 <== 
evals = [-1.10683884 -0.23906658]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.1068388428457654
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/1.2
c_z = -0.371037374
c_x = 0.170213481
c_0 = -0.690922272

  t_A = -0.430106748
    <Z>_A = cos(t_A) = 0.908921244
    <X>_A = sin(t_A) = -0.416967830

   ==> Run 3-point Fourier quadrature <==
  t = -0.430107, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.430107, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = 0.617091, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = 0.617091, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -1.477304, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.477304, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 0.0, b = -0.3710373736142774, c = 0.17021348058116215

  t_opt = -0.430106748
    <Z>_opt = cos(t_opt) = 0.908921244
    <X>_opt = sin(t_opt) = -0.416967830
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -0.430107, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.430107, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.87066
  <X> = -0.39606
  Energy = -1.0813844227839624

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9108076185837405
  <X> = -0.41589250007958345
  Energy = -1.0996564486073133
  measure Z: {'0': 95540.38092918703, '1': 4459.6190708129725})
  measure X: {'0': 29205.374996020833, '1': 70794.62500397918})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_1/1.2

   ==> (oq_map.json) Exact results for r = 1.2 <== 
evals = [-1.09913957 -0.28270497]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.099139568978659
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/1.3
c_z = -0.321395392
c_x = 0.171457744
c_0 = -0.719962104

  t_A = -0.490070852
    <Z>_A = cos(t_A) = 0.882299511
    <X>_A = sin(t_A) = -0.470688402

   ==> Run 3-point Fourier quadrature <==
  t = -0.490071, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.490071, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = 0.557127, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = 0.557127, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -1.537268, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.537268, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 5.551115123125783e-17, b = -0.32139539191852423, c = 0.1714577437790656

  t_opt = -0.490070852
    <Z>_opt = cos(t_opt) = 0.882299511
    <X>_opt = sin(t_opt) = -0.470688402
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -0.490071, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.490071, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.84402
  <X> = -0.45267999999999997
  Energy = -1.068841733658726

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.882906189037016
  <X> = -0.4751934980452812
  Energy = -1.0851996892039137
  measure Z: {'0': 94145.3094518508, '1': 5854.690548149199})
  measure X: {'0': 26240.325097735942, '1': 73759.67490226407})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_1/1.3

   ==> (oq_map.json) Exact results for r = 1.3 <== 
evals = [-1.08423227 -0.35569193]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.0842322722775133
e_analytic - evals[0] = -0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/1.45
c_z = -0.260906520
c_x = 0.174167246
c_0 = -0.750292491

  t_A = -0.588611503
    <Z>_A = cos(t_A) = 0.831712383
    <X>_A = sin(t_A) = -0.555206729

   ==> Run 3-point Fourier quadrature <==
  t = -0.588612, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.588612, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = 0.458586, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = 0.458586, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -1.635809, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.635809, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = -2.7755575615628914e-17, b = -0.26090651987639996, c = 0.17416724617012766

  t_opt = -0.588611503
    <Z>_opt = cos(t_opt) = 0.831712383
    <X>_opt = sin(t_opt) = -0.555206729
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -0.588612, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.588612, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.79552
  <X> = -0.5294399999999999
  Energy = -1.0500599521223564

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.8321096785581735
  <X> = -0.5555881399789249
  Energy = -1.0641605873509659
  measure Z: {'0': 91605.48392790867, '1': 8394.516072091326})
  measure X: {'0': 22220.593001053752, '1': 77779.40699894624})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_1/1.45

   ==> (oq_map.json) Exact results for r = 1.45 <== 
evals = [-1.0639905  -0.43659448]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.0639905010555568
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/1.6
c_z = -0.213224929
c_x = 0.177807023
c_0 = -0.769382665

  t_A = -0.695069165
    <Z>_A = cos(t_A) = 0.768009407
    <X>_A = sin(t_A) = -0.640438561

   ==> Run 3-point Fourier quadrature <==
  t = -0.695069, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.695069, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = 0.352128, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = 0.352128, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -1.742267, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.742267, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = -2.7755575615628914e-17, b = -0.21322492879091287, c = 0.17780702316230246

  t_opt = -0.695069165
    <Z>_opt = cos(t_opt) = 0.768009407
    <X>_opt = sin(t_opt) = -0.640438561
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -0.695069, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.695069, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.7377199999999999
  <X> = -0.61192
  Energy = -1.0354866332875208

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.7715728157139592
  <X> = -0.6419736271147767
  Energy = -1.0480486434800098
  measure Z: {'0': 88578.64078569796, '1': 11421.359214302038})
  measure X: {'0': 17901.318644261166, '1': 82098.68135573884})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_1/1.6

   ==> (oq_map.json) Exact results for r = 1.6 <== 
evals = [-1.04701589 -0.49174944]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.0470158904222164
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/1.9
c_z = -0.144203901
c_x = 0.187268886
c_0 = -0.786868492

  t_A = -0.914594616
    <Z>_A = cos(t_A) = 0.610111817
    <X>_A = sin(t_A) = -0.792315323

   ==> Run 3-point Fourier quadrature <==
  t = -0.914595, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.914595, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = 0.132603, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = 0.132603, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -1.961792, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.961792, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = -5.551115123125783e-17, b = -0.1442039010759991, c = 0.18726888604283612

  t_opt = -0.914594616
    <Z>_opt = cos(t_opt) = 0.610111817
    <X>_opt = sin(t_opt) = -0.792315323
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -0.914595, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.914595, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.5865800000000001
  <X> = -0.7582
  Energy = -1.013442885401005

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.6132762177839547
  <X> = -0.7951800919688425
  Energy = -1.0242178047781922
  measure Z: {'0': 80663.81088919775, '1': 19336.189110802265})
  measure X: {'0': 10240.995401557871, '1': 89759.00459844213})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_1/1.9

   ==> (oq_map.json) Exact results for r = 1.9 <== 
evals = [-1.023225   -0.55051198]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.0232250037111297
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/2.5
c_z = -0.066271102
c_x = 0.209148615
c_0 = -0.784992480

  t_A = -1.263943124
    <Z>_A = cos(t_A) = 0.302060331
    <X>_A = sin(t_A) = -0.953288811

   ==> Run 3-point Fourier quadrature <==
  t = -1.263943, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.263943, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -0.216746, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.216746, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -2.311141, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -2.311141, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 3.122502256758253e-17, b = -0.0662711018357801, c = 0.20914861505223561

  t_opt = -1.263943124
    <Z>_opt = cos(t_opt) = 0.302060331
    <X>_opt = sin(t_opt) = -0.953288811
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -1.263943, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.263943, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.29098
  <X> = -0.9096599999999999
  Energy = -0.9945301748141422

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.30367934461052
  <X> = -0.9538118299941817
  Energy = -1.0046060684693785
  measure Z: {'0': 65183.967230525996, '1': 34816.032769474})
  measure X: {'0': 2309.4085002909083, '1': 97690.5914997091})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_1/2.5

   ==> (oq_map.json) Exact results for r = 2.5 <== 
evals = [-1.00438939 -0.56559557]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.0043893858738882
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/2.95
c_z = -0.036185839
c_x = 0.223454420
c_0 = -0.774745750

  t_A = -1.410251678
    <Z>_A = cos(t_A) = 0.159855875
    <X>_A = sin(t_A) = -0.987140364

   ==> Run 3-point Fourier quadrature <==
  t = -1.410252, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.410252, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -0.363054, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.363054, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -2.457449, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -2.457449, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = -2.2551405187698492e-17, b = -0.03618583852259693, c = 0.22345441969595453

  t_opt = -1.410251678
    <Z>_opt = cos(t_opt) = 0.159855875
    <X>_opt = sin(t_opt) = -0.987140364
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -1.410252, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.410252, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.14975999999999995
  <X> = -0.94374
  Energy = -0.9910478156985237

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.1557724726767939
  <X> = -0.9895055464285012
  Energy = -1.0014918956831766
  measure Z: {'0': 57788.62363383969, '1': 42211.37636616031})
  measure X: {'0': 524.7226785749423, '1': 99475.27732142506})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_1/2.95

   ==> (oq_map.json) Exact results for r = 2.95 <== 
evals = [-1.00111115 -0.54838035]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.0011111466652745
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/6.0
c_z = -0.000371898
c_x = 0.268404889
c_0 = -0.731584011

  t_A = -1.569410743
    <Z>_A = cos(t_A) = 0.001385583
    <X>_A = sin(t_A) = -0.999999040

   ==> Run 3-point Fourier quadrature <==
  t = -1.569411, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.569411, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -0.522213, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.522213, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -2.616608, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -2.616608, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 3.3968985800212834e-17, b = -0.00037189768093560434, c = 0.26840488937165813

  t_opt = -1.569410743
    <Z>_opt = cos(t_opt) = 0.001385583
    <X>_opt = sin(t_opt) = -0.999999040
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -1.569411, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.569411, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.0013199999999999878
  <X> = -0.9539599999999999
  Energy = -0.987632029990073

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.00030373174437703376
  <X> = -1.0
  Energy = -0.9999890131489368
  measure Z: {'0': 50015.18658721885, '1': 49984.81341278115})
  measure X: {'0': 2.5329738306822946e-12, '1': 100000.0})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_1/6.0

   ==> (oq_map.json) Exact results for r = 6.0 <== 
evals = [-0.99998916 -0.46317886]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -0.9999891578395312
e_analytic - evals[0] = 0.000000000000



   ==> Run Calibration circuits <== 
n_shots       =     100000
Backend       =      qasm_simulator
Noise model   =      ibm_perth
NoiseModel:
  Basis gates: ['cx', 'id', 'reset', 'rz', 'sx', 'x']
  Instructions with noise: ['reset', 'sx', 'x', 'cx', 'measure', 'id']
  Qubits with noise: [0, 1, 2, 3, 4, 5, 6]
  Specific qubit errors: [('id', (0,)), ('id', (1,)), ('id', (2,)), ('id', (3,)), ('id', (4,)), ('id', (5,)), ('id', (6,)), ('sx', (0,)), ('sx', (1,)), ('sx', (2,)), ('sx', (3,)), ('sx', (4,)), ('sx', (5,)), ('sx', (6,)), ('x', (0,)), ('x', (1,)), ('x', (2,)), ('x', (3,)), ('x', (4,)), ('x', (5,)), ('x', (6,)), ('cx', (6, 5)), ('cx', (5, 6)), ('cx', (4, 5)), ('cx', (5, 4)), ('cx', (3, 5)), ('cx', (5, 3)), ('cx', (3, 1)), ('cx', (1, 3)), ('cx', (2, 1)), ('cx', (1, 2)), ('cx', (0, 1)), ('cx', (1, 0)), ('reset', (0,)), ('reset', (1,)), ('reset', (2,)), ('reset', (3,)), ('reset', (4,)), ('reset', (5,)), ('reset', (6,)), ('measure', (0,)), ('measure', (1,)), ('measure', (2,)), ('measure', (3,)), ('measure', (4,)), ('measure', (5,)), ('measure', (6,))]
Calibration matrix =
[[0.97816 0.02196]
 [0.02184 0.97804]]

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/0.6
c_z = -0.975331596
c_x = 0.172588132
c_0 = -0.140879461

  t_A = -0.175140281
    <Z>_A = cos(t_A) = 0.984702105
    <X>_A = sin(t_A) = -0.174246274

   ==> Run 3-point Fourier quadrature <==
  t = -0.175140, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.175140, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = 0.872057, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = 0.872057, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -1.222338, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.222338, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 1.1102230246251565e-16, b = -0.9753315962732315, c = 0.17258813211389307

  t_opt = -0.175140281
    <Z>_opt = cos(t_opt) = 0.984702105
    <X>_opt = sin(t_opt) = -0.174246274
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -0.175140, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.175140, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.94204
  <X> = -0.16476000000000002
  Energy = -1.0881164590182664

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9850658858636001
  <X> = -0.17243254600709434
  Energy = -1.1314051553426037
  measure Z: {'0': 99253.29429317999, '1': 746.7057068200011})
  measure X: {'0': 41378.372699645275, '1': 58621.62730035472})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_2/0.6

   ==> (oq_map.json) Exact results for r = 0.6 <== 
evals = [-1.13136338  0.84960445]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.131363376499586
e_analytic - evals[0] = -0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/0.65
c_z = -0.893017040
c_x = 0.171773983
c_0 = -0.234423207

  t_A = -0.190031414
    <Z>_A = cos(t_A) = 0.981998302
    <X>_A = sin(t_A) = -0.188889744

   ==> Run 3-point Fourier quadrature <==
  t = -0.190031, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.190031, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = 0.857166, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = 0.857166, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -1.237229, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.237229, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = -1.1102230246251565e-16, b = -0.8930170404711617, c = 0.17177398346406272

  t_opt = -0.190031414
    <Z>_opt = cos(t_opt) = 0.981998302
    <X>_opt = sin(t_opt) = -0.188889744
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -0.190031, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.190031, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.93916
  <X> = -0.18184
  Energy = -1.1043444720597981

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9820539636326695
  <X> = -0.19029491738130117
  Energy = -1.144101847355568
  measure Z: {'0': 99102.69818163349, '1': 897.301818366517})
  measure X: {'0': 40485.25413093495, '1': 59514.74586906506})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_2/0.65

   ==> (oq_map.json) Exact results for r = 0.65 <== 
evals = [-1.14381077  0.67496435]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.1438107681038217
e_analytic - evals[0] = -0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/0.7
c_z = -0.818749229
c_x = 0.171060688
c_0 = -0.313783336

  t_A = -0.205966480
    <Z>_A = cos(t_A) = 0.978863784
    <X>_A = sin(t_A) = -0.204513307

   ==> Run 3-point Fourier quadrature <==
  t = -0.205966, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.205966, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = 0.841231, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = 0.841231, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -1.253164, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.253164, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 0.0, b = -0.8187492286324076, c = 0.17106068808312364

  t_opt = -0.205966480
    <Z>_opt = cos(t_opt) = 0.978863784
    <X>_opt = sin(t_opt) = -0.204513307
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -0.205966, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.205966, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.93344
  <X> = -0.19761999999999996
  Energy = -1.1118416294544318

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9760719514984048
  <X> = -0.20679773640458532
  Energy = -1.1483164567632587
  measure Z: {'0': 98803.59757492023, '1': 1196.4024250797652})
  measure X: {'0': 39660.113179770735, '1': 60339.88682022927})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_2/0.7

   ==> (oq_map.json) Exact results for r = 0.7 <== 
evals = [-1.15021149  0.52264482]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.1502114912511527
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/0.75
c_z = -0.751762455
c_x = 0.170457573
c_0 = -0.381398162

  t_A = -0.222973719
    <Z>_A = cos(t_A) = 0.975244182
    <X>_A = sin(t_A) = -0.221130698

   ==> Run 3-point Fourier quadrature <==
  t = -0.222974, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.222974, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = 0.824224, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = 0.824224, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -1.270171, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.270171, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = -1.1102230246251565e-16, b = -0.7517624545623148, c = 0.17045757337561962

  t_opt = -0.222973719
    <Z>_opt = cos(t_opt) = 0.975244182
    <X>_opt = sin(t_opt) = -0.221130698
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -0.222974, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.222974, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.9315199999999999
  <X> = -0.21158000000000005
  Energy = -1.1177453369405885

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9740640033351275
  <X> = -0.22139719599516378
  Energy = -1.1514017367213998
  measure Z: {'0': 98703.20016675639, '1': 1296.7998332436207})
  measure X: {'0': 38930.14020024181, '1': 61069.85979975819})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_2/0.75

   ==> (oq_map.json) Exact results for r = 0.75 <== 
evals = [-1.15224352  0.3894472 ]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.1522435240824251
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/0.8
c_z = -0.691218028
c_x = 0.169960572
c_0 = -0.439308382

  t_A = -0.241102571
    <Z>_A = cos(t_A) = 0.971075301
    <X>_A = sin(t_A) = -0.238773451

   ==> Run 3-point Fourier quadrature <==
  t = -0.241103, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.241103, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = 0.806095, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = 0.806095, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -1.288300, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.288300, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = -1.1102230246251565e-16, b = -0.6912180276548993, c = 0.16996057197909598

  t_opt = -0.241102571
    <Z>_opt = cos(t_opt) = 0.971075301
    <X>_opt = sin(t_opt) = -0.238773451
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -0.241103, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.241103, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.92828
  <X> = -0.22628000000000004
  Energy = -1.1194109309767664

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9706755927544883
  <X> = -0.2367705500847913
  Energy = -1.1504985088745705
  measure Z: {'0': 98533.77963772442, '1': 1466.2203622755771})
  measure X: {'0': 38161.472495760434, '1': 61838.527504239566})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_2/0.8

   ==> (oq_map.json) Exact results for r = 0.8 <== 
evals = [-1.15111521  0.27249844]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.1511152082081149
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/0.85
c_z = -0.636488864
c_x = 0.169579229
c_0 = -0.489018448

  t_A = -0.260380693
    <Z>_A = cos(t_A) = 0.966292039
    <X>_A = sin(t_A) = -0.257448431

   ==> Run 3-point Fourier quadrature <==
  t = -0.260381, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.260381, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = 0.786817, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = 0.786817, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -1.307578, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.307578, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 0.0, b = -0.636488864240029, c = 0.1695792294651544

  t_opt = -0.260380693
    <Z>_opt = cos(t_opt) = 0.966292039
    <X>_opt = sin(t_opt) = -0.257448431
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -0.260381, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.260381, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.92432
  <X> = -0.24262
  Energy = -1.1184811477128571

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9665341955937498
  <X> = -0.25385902339992633
  Energy = -1.1472559180492299
  measure Z: {'0': 98326.70977968749, '1': 1673.29022031251})
  measure X: {'0': 37307.04883000368, '1': 62692.95116999632})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_2/0.85

   ==> (oq_map.json) Exact results for r = 0.85 <== 
evals = [-1.14771048  0.16967358]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.147710477292962
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/1.15
c_z = -0.399295092
c_x = 0.169766330
c_0 = -0.672952709

  t_A = -0.402010464
    <Z>_A = cos(t_A) = 0.920276221
    <X>_A = sin(t_A) = -0.391269314

   ==> Run 3-point Fourier quadrature <==
  t = -0.402010, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.402010, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = 0.645187, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = 0.645187, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -1.449208, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.449208, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 5.551115123125783e-17, b = -0.39929509169104116, c = 0.1697663300774525

  t_opt = -0.402010464
    <Z>_opt = cos(t_opt) = 0.920276221
    <X>_opt = sin(t_opt) = -0.391269314
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -0.402010, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.402010, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.8804000000000001
  <X> = -0.37484
  Energy = -1.0881273189683518

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9206023837862104
  <X> = -0.3921355365115215
  Energy = -1.1071161332487467
  measure Z: {'0': 96030.11918931051, '1': 3969.8808106894935})
  measure X: {'0': 30393.22317442393, '1': 69606.77682557607})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_2/1.15

   ==> (oq_map.json) Exact results for r = 1.15 <== 
evals = [-1.10683884 -0.23906658]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.1068388428457654
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/1.2
c_z = -0.371037374
c_x = 0.170213481
c_0 = -0.690922272

  t_A = -0.430106748
    <Z>_A = cos(t_A) = 0.908921244
    <X>_A = sin(t_A) = -0.416967830

   ==> Run 3-point Fourier quadrature <==
  t = -0.430107, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.430107, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = 0.617091, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = 0.617091, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -1.477304, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.477304, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = -5.551115123125783e-17, b = -0.37103737361427735, c = 0.17021348058116212

  t_opt = -0.430106748
    <Z>_opt = cos(t_opt) = 0.908921244
    <X>_opt = sin(t_opt) = -0.416967830
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -0.430107, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.430107, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.86896
  <X> = -0.39637999999999995
  Energy = -1.080808127562604

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9086383594817223
  <X> = -0.4146622049945392
  Energy = -1.0986421595988443
  measure Z: {'0': 95431.91797408611, '1': 4568.082025913888})
  measure X: {'0': 29266.889750273036, '1': 70733.11024972696})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_2/1.2

   ==> (oq_map.json) Exact results for r = 1.2 <== 
evals = [-1.09913957 -0.28270497]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.099139568978659
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/1.3
c_z = -0.321395392
c_x = 0.171457744
c_0 = -0.719962104

  t_A = -0.490070852
    <Z>_A = cos(t_A) = 0.882299511
    <X>_A = sin(t_A) = -0.470688402

   ==> Run 3-point Fourier quadrature <==
  t = -0.490071, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.490071, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = 0.557127, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = 0.557127, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -1.537268, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.537268, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 5.551115123125783e-17, b = -0.32139539191852423, c = 0.17145774377906556

  t_opt = -0.490070852
    <Z>_opt = cos(t_opt) = 0.882299511
    <X>_opt = sin(t_opt) = -0.470688402
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -0.490071, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.490071, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.84524
  <X> = -0.45144
  Energy = -1.0690212284345806

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.8838318343446101
  <X> = -0.47224430033581805
  Energy = -1.0849915245551027
  measure Z: {'0': 94191.5917172305, '1': 5808.408282769495})
  measure X: {'0': 26387.784983209098, '1': 73612.21501679091})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_2/1.3

   ==> (oq_map.json) Exact results for r = 1.3 <== 
evals = [-1.08423227 -0.35569193]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.0842322722775133
e_analytic - evals[0] = -0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/1.45
c_z = -0.260906520
c_x = 0.174167246
c_0 = -0.750292491

  t_A = -0.588611503
    <Z>_A = cos(t_A) = 0.831712383
    <X>_A = sin(t_A) = -0.555206729

   ==> Run 3-point Fourier quadrature <==
  t = -0.588612, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.588612, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = 0.458586, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = 0.458586, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -1.635809, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.635809, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = -5.551115123125783e-17, b = -0.26090651987639996, c = 0.17416724617012766

  t_opt = -0.588611503
    <Z>_opt = cos(t_opt) = 0.831712383
    <X>_opt = sin(t_opt) = -0.555206729
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -0.588612, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.588612, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.79342
  <X> = -0.5265200000000001
  Energy = -1.049003480071799

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.8296381510235012
  <X> = -0.5507634436589799
  Energy = -1.0626754456314638
  measure Z: {'0': 91481.90755117507, '1': 8518.092448824933})
  measure X: {'0': 22461.827817051006, '1': 77538.17218294898})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_2/1.45

   ==> (oq_map.json) Exact results for r = 1.45 <== 
evals = [-1.0639905  -0.43659448]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.0639905010555568
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/1.6
c_z = -0.213224929
c_x = 0.177807023
c_0 = -0.769382665

  t_A = -0.695069165
    <Z>_A = cos(t_A) = 0.768009407
    <X>_A = sin(t_A) = -0.640438561

   ==> Run 3-point Fourier quadrature <==
  t = -0.695069, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.695069, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = 0.352128, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = 0.352128, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -1.742267, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.742267, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 2.7755575615628914e-17, b = -0.2132249287909129, c = 0.1778070231623025

  t_opt = -0.695069165
    <Z>_opt = cos(t_opt) = 0.768009407
    <X>_opt = sin(t_opt) = -0.640438561
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -0.695069, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.695069, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.7362599999999999
  <X> = -0.6119000000000001
  Energy = -1.035171768751023

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.7698598639886741
  <X> = -0.6400543838709309
  Energy = -1.0473421445424511
  measure Z: {'0': 88492.9931994337, '1': 11507.006800566292})
  measure X: {'0': 17997.28080645345, '1': 82002.71919354654})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_2/1.6

   ==> (oq_map.json) Exact results for r = 1.6 <== 
evals = [-1.04701589 -0.49174944]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.0470158904222164
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/1.9
c_z = -0.144203901
c_x = 0.187268886
c_0 = -0.786868492

  t_A = -0.914594616
    <Z>_A = cos(t_A) = 0.610111817
    <X>_A = sin(t_A) = -0.792315323

   ==> Run 3-point Fourier quadrature <==
  t = -0.914595, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.914595, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = 0.132603, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = 0.132603, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -1.961792, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.961792, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 4.163336342344337e-17, b = -0.14420390107599912, c = 0.18726888604283626

  t_opt = -0.914594616
    <Z>_opt = cos(t_opt) = 0.610111817
    <X>_opt = sin(t_opt) = -0.792315323
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -0.914595, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.914595, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.5842400000000001
  <X> = -0.7568600000000001
  Energy = -1.0128545079651896

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.6108763857191889
  <X> = -0.7916544674149563
  Energy = -1.0232114998497142
  measure Z: {'0': 80543.81928595944, '1': 19456.18071404055})
  measure X: {'0': 10417.276629252188, '1': 89582.7233707478})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_2/1.9

   ==> (oq_map.json) Exact results for r = 1.9 <== 
evals = [-1.023225   -0.55051198]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.0232250037111297
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/2.5
c_z = -0.066271102
c_x = 0.209148615
c_0 = -0.784992480

  t_A = -1.263943124
    <Z>_A = cos(t_A) = 0.302060331
    <X>_A = sin(t_A) = -0.953288811

   ==> Run 3-point Fourier quadrature <==
  t = -1.263943, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.263943, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -0.216746, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.216746, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -2.311141, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -2.311141, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = -3.469446951953614e-18, b = -0.06627110183578012, c = 0.2091486150522356

  t_opt = -1.263943124
    <Z>_opt = cos(t_opt) = 0.302060331
    <X>_opt = sin(t_opt) = -0.953288811
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -1.263943, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.263943, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.29112000000000005
  <X> = -0.9111199999999999
  Energy = -0.9948448097463755

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.30432963815101427
  <X> = -0.9529805510003956
  Energy = -1.0044753032885514
  measure Z: {'0': 65216.48190755071, '1': 34783.51809244929})
  measure X: {'0': 2350.972449980232, '1': 97649.02755001976})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_2/2.5

   ==> (oq_map.json) Exact results for r = 2.5 <== 
evals = [-1.00438939 -0.56559557]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.0043893858738882
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/2.95
c_z = -0.036185839
c_x = 0.223454420
c_0 = -0.774745750

  t_A = -1.410251678
    <Z>_A = cos(t_A) = 0.159855875
    <X>_A = sin(t_A) = -0.987140364

   ==> Run 3-point Fourier quadrature <==
  t = -1.410252, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.410252, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -0.363054, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.363054, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -2.457449, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -2.457449, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 4.9439619065339e-17, b = -0.036185838522596936, c = 0.22345441969595461

  t_opt = -1.410251678
    <Z>_opt = cos(t_opt) = 0.159855875
    <X>_opt = sin(t_opt) = -0.987140364
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -1.410252, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.410252, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.15014
  <X> = -0.9432
  Energy = -0.9909409009305266

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.1568918634708556
  <X> = -0.9865300155671944
  Energy = -1.0008675062557937
  measure Z: {'0': 57844.59317354278, '1': 42155.40682645721})
  measure X: {'0': 673.4992216402692, '1': 99326.50077835974})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_2/2.95

   ==> (oq_map.json) Exact results for r = 2.95 <== 
evals = [-1.00111115 -0.54838035]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.0011111466652745
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/6.0
c_z = -0.000371898
c_x = 0.268404889
c_0 = -0.731584011

  t_A = -1.569410743
    <Z>_A = cos(t_A) = 0.001385583
    <X>_A = sin(t_A) = -0.999999040

   ==> Run 3-point Fourier quadrature <==
  t = -1.569411, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.569411, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -0.522213, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.522213, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -2.616608, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -2.616608, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = -8.369447848525016e-17, b = -0.00037189768093560726, c = 0.26840488937165796

  t_opt = -1.569410743
    <Z>_opt = cos(t_opt) = 0.001385583
    <X>_opt = sin(t_opt) = -0.999999040
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -1.569411, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.569411, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.0006200000000000094
  <X> = -0.9562999999999999
  Energy = -0.9882598371028262

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.0005229015095130629
  <X> = -1.0
  Energy = -0.9999890946576642
  measure Z: {'0': 50026.14507547565, '1': 49973.85492452434})
  measure X: {'0': 3.5197539327569416e-15, '1': 100000.0})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_2/6.0

   ==> (oq_map.json) Exact results for r = 6.0 <== 
evals = [-0.99998916 -0.46317886]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -0.9999891578395312
e_analytic - evals[0] = 0.000000000000



   ==> Run Calibration circuits <== 
n_shots       =     100000
Backend       =      qasm_simulator
Noise model   =      ibm_perth
NoiseModel:
  Basis gates: ['cx', 'id', 'reset', 'rz', 'sx', 'x']
  Instructions with noise: ['reset', 'sx', 'x', 'cx', 'measure', 'id']
  Qubits with noise: [0, 1, 2, 3, 4, 5, 6]
  Specific qubit errors: [('id', (0,)), ('id', (1,)), ('id', (2,)), ('id', (3,)), ('id', (4,)), ('id', (5,)), ('id', (6,)), ('sx', (0,)), ('sx', (1,)), ('sx', (2,)), ('sx', (3,)), ('sx', (4,)), ('sx', (5,)), ('sx', (6,)), ('x', (0,)), ('x', (1,)), ('x', (2,)), ('x', (3,)), ('x', (4,)), ('x', (5,)), ('x', (6,)), ('cx', (6, 5)), ('cx', (5, 6)), ('cx', (4, 5)), ('cx', (5, 4)), ('cx', (3, 5)), ('cx', (5, 3)), ('cx', (3, 1)), ('cx', (1, 3)), ('cx', (2, 1)), ('cx', (1, 2)), ('cx', (0, 1)), ('cx', (1, 0)), ('reset', (0,)), ('reset', (1,)), ('reset', (2,)), ('reset', (3,)), ('reset', (4,)), ('reset', (5,)), ('reset', (6,)), ('measure', (0,)), ('measure', (1,)), ('measure', (2,)), ('measure', (3,)), ('measure', (4,)), ('measure', (5,)), ('measure', (6,))]
Calibration matrix =
[[0.97898 0.02167]
 [0.02102 0.97833]]

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/0.6
c_z = -0.975331596
c_x = 0.172588132
c_0 = -0.140879461

  t_A = -0.175140281
    <Z>_A = cos(t_A) = 0.984702105
    <X>_A = sin(t_A) = -0.174246274

   ==> Run 3-point Fourier quadrature <==
  t = -0.175140, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.175140, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = 0.872057, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = 0.872057, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -1.222338, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.222338, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 0.0, b = -0.9753315962732313, c = 0.1725881321138931

  t_opt = -0.175140281
    <Z>_opt = cos(t_opt) = 0.984702105
    <X>_opt = sin(t_opt) = -0.174246274
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -0.175140, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.175140, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.9439200000000001
  <X> = -0.17158
  Energy = -1.091127133480277

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9853339032027904
  <X> = -0.17991037376136793
  Energy = -1.1329571454462446
  measure Z: {'0': 99266.69516013951, '1': 733.3048398604801})
  measure X: {'0': 41004.4813119316, '1': 58995.5186880684})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_3/0.6

   ==> (oq_map.json) Exact results for r = 0.6 <== 
evals = [-1.13136338  0.84960445]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.131363376499586
e_analytic - evals[0] = -0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/0.65
c_z = -0.893017040
c_x = 0.171773983
c_0 = -0.234423207

  t_A = -0.190031414
    <Z>_A = cos(t_A) = 0.981998302
    <X>_A = sin(t_A) = -0.188889744

   ==> Run 3-point Fourier quadrature <==
  t = -0.190031, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.190031, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = 0.857166, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = 0.857166, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -1.237229, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.237229, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 0.0, b = -0.8930170404711618, c = 0.17177398346406267

  t_opt = -0.190031414
    <Z>_opt = cos(t_opt) = 0.981998302
    <X>_opt = sin(t_opt) = -0.188889744
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -0.190031, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.190031, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.93862
  <X> = -0.18982000000000004
  Energy = -1.1052329992459868

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9797975589601012
  <X> = -0.19896376273381394
  Energy = -1.1435759216310006
  measure Z: {'0': 98989.87794800507, '1': 1010.1220519949262})
  measure X: {'0': 40051.811863309296, '1': 59948.1881366907})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_3/0.65

   ==> (oq_map.json) Exact results for r = 0.65 <== 
evals = [-1.14381077  0.67496435]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.1438107681038217
e_analytic - evals[0] = -0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/0.7
c_z = -0.818749229
c_x = 0.171060688
c_0 = -0.313783336

  t_A = -0.205966480
    <Z>_A = cos(t_A) = 0.978863784
    <X>_A = sin(t_A) = -0.204513307

   ==> Run 3-point Fourier quadrature <==
  t = -0.205966, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.205966, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = 0.841231, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = 0.841231, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -1.253164, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.253164, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 0.0, b = -0.8187492286324076, c = 0.17106068808312366

  t_opt = -0.205966480
    <Z>_opt = cos(t_opt) = 0.978863784
    <X>_opt = sin(t_opt) = -0.204513307
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -0.205966, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.205966, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.9377800000000001
  <X> = -0.19745999999999997
  Energy = -1.115367631396603

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9789201004296101
  <X> = -0.20694445606698808
  Energy = -1.150673474470119
  measure Z: {'0': 98946.00502148051, '1': 1053.994978519493})
  measure X: {'0': 39652.77719665059, '1': 60347.2228033494})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_3/0.7

   ==> (oq_map.json) Exact results for r = 0.7 <== 
evals = [-1.15021149  0.52264482]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.1502114912511527
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/0.75
c_z = -0.751762455
c_x = 0.170457573
c_0 = -0.381398162

  t_A = -0.222973719
    <Z>_A = cos(t_A) = 0.975244182
    <X>_A = sin(t_A) = -0.221130698

   ==> Run 3-point Fourier quadrature <==
  t = -0.222974, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.222974, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = 0.824224, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = 0.824224, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -1.270171, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.270171, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = -2.220446049250313e-16, b = -0.7517624545623147, c = 0.17045757337561954

  t_opt = -0.222973719
    <Z>_opt = cos(t_opt) = 0.975244182
    <X>_opt = sin(t_opt) = -0.221130698
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -0.222974, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.222974, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.93404
  <X> = -0.20765999999999996
  Energy = -1.1189715846384531

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9750133185352367
  <X> = -0.2175993149142456
  Energy = -1.1514680186533646
  measure Z: {'0': 98750.66592676184, '1': 1249.3340732381687})
  measure X: {'0': 39120.03425428772, '1': 60879.96574571228})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_3/0.75

   ==> (oq_map.json) Exact results for r = 0.75 <== 
evals = [-1.15224352  0.3894472 ]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.1522435240824251
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/0.8
c_z = -0.691218028
c_x = 0.169960572
c_0 = -0.439308382

  t_A = -0.241102571
    <Z>_A = cos(t_A) = 0.971075301
    <X>_A = sin(t_A) = -0.238773451

   ==> Run 3-point Fourier quadrature <==
  t = -0.241103, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.241103, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = 0.806095, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = 0.806095, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -1.288300, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.288300, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 0.0, b = -0.6912180276548994, c = 0.16996057197909592

  t_opt = -0.241102571
    <Z>_opt = cos(t_opt) = 0.971075301
    <X>_opt = sin(t_opt) = -0.238773451
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -0.241103, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.241103, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.9276199999999999
  <X> = -0.22825999999999996
  Energy = -1.1192912490110327

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9683070291851483
  <X> = -0.2391179462498118
  Energy = -1.1492602798306646
  measure Z: {'0': 98415.35145925742, '1': 1584.648540742583})
  measure X: {'0': 38044.10268750941, '1': 61955.89731249059})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_3/0.8

   ==> (oq_map.json) Exact results for r = 0.8 <== 
evals = [-1.15111521  0.27249844]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.1511152082081149
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/0.85
c_z = -0.636488864
c_x = 0.169579229
c_0 = -0.489018448

  t_A = -0.260380693
    <Z>_A = cos(t_A) = 0.966292039
    <X>_A = sin(t_A) = -0.257448431

   ==> Run 3-point Fourier quadrature <==
  t = -0.260381, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.260381, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = 0.786817, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = 0.786817, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -1.307578, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.307578, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 0.0, b = -0.636488864240029, c = 0.16957922946515439

  t_opt = -0.260380693
    <Z>_opt = cos(t_opt) = 0.966292039
    <X>_opt = sin(t_opt) = -0.257448431
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -0.260381, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.260381, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.9229
  <X> = -0.24110000000000004
  Energy = -1.1173195730968495

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9633765497568472
  <X> = -0.25253052825728
  Energy = -1.1450208264541892
  measure Z: {'0': 98168.82748784235, '1': 1831.1725121576414})
  measure X: {'0': 37373.473587135995, '1': 62626.526412864005})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_3/0.85

   ==> (oq_map.json) Exact results for r = 0.85 <== 
evals = [-1.14771048  0.16967358]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.147710477292962
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/1.15
c_z = -0.399295092
c_x = 0.169766330
c_0 = -0.672952709

  t_A = -0.402010464
    <Z>_A = cos(t_A) = 0.920276221
    <X>_A = sin(t_A) = -0.391269314

   ==> Run 3-point Fourier quadrature <==
  t = -0.402010, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.402010, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = 0.645187, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = 0.645187, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -1.449208, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.449208, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = -5.551115123125783e-17, b = -0.3992950916910411, c = 0.16976633007745243

  t_opt = -0.402010464
    <Z>_opt = cos(t_opt) = 0.920276221
    <X>_opt = sin(t_opt) = -0.391269314
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -0.402010, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.402010, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.8829
  <X> = -0.37752
  Energy = -1.0895805304621868

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9215928059130725
  <X> = -0.3950340015044477
  Energy = -1.108003665707412
  measure Z: {'0': 96079.64029565363, '1': 3920.359704346376})
  measure X: {'0': 30248.299924777613, '1': 69751.70007522238})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_3/1.15

   ==> (oq_map.json) Exact results for r = 1.15 <== 
evals = [-1.10683884 -0.23906658]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.1068388428457654
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/1.2
c_z = -0.371037374
c_x = 0.170213481
c_0 = -0.690922272

  t_A = -0.430106748
    <Z>_A = cos(t_A) = 0.908921244
    <X>_A = sin(t_A) = -0.416967830

   ==> Run 3-point Fourier quadrature <==
  t = -0.430107, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.430107, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = 0.617091, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = 0.617091, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -1.477304, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.477304, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 0.0, b = -0.3710373736142774, c = 0.17021348058116217

  t_opt = -0.430106748
    <Z>_opt = cos(t_opt) = 0.908921244
    <X>_opt = sin(t_opt) = -0.416967830
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -0.430107, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.430107, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.86778
  <X> = -0.39986000000000005
  Energy = -1.0809626463741617

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9057985451136681
  <X> = -0.4183702249010248
  Energy = -1.0982196373085165
  measure Z: {'0': 95289.9272556834, '1': 4710.072744316595})
  measure X: {'0': 29081.48875494876, '1': 70918.51124505124})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_3/1.2

   ==> (oq_map.json) Exact results for r = 1.2 <== 
evals = [-1.09913957 -0.28270497]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.099139568978659
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/1.3
c_z = -0.321395392
c_x = 0.171457744
c_0 = -0.719962104

  t_A = -0.490070852
    <Z>_A = cos(t_A) = 0.882299511
    <X>_A = sin(t_A) = -0.470688402

   ==> Run 3-point Fourier quadrature <==
  t = -0.490071, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.490071, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = 0.557127, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = 0.557127, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -1.537268, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.537268, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 5.551115123125783e-17, b = -0.32139539191852423, c = 0.17145774377906556

  t_opt = -0.490070852
    <Z>_opt = cos(t_opt) = 0.882299511
    <X>_opt = sin(t_opt) = -0.470688402
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -0.490071, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.490071, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.84196
  <X> = -0.44632000000000005
  Energy = -1.067089187900939

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.8788271305957892
  <X> = -0.4669020579342394
  Energy = -1.0824670670034187
  measure Z: {'0': 93941.35652978947, '1': 6058.643470210533})
  measure X: {'0': 26654.89710328803, '1': 73345.10289671196})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_3/1.3

   ==> (oq_map.json) Exact results for r = 1.3 <== 
evals = [-1.08423227 -0.35569193]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.0842322722775133
e_analytic - evals[0] = -0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/1.45
c_z = -0.260906520
c_x = 0.174167246
c_0 = -0.750292491

  t_A = -0.588611503
    <Z>_A = cos(t_A) = 0.831712383
    <X>_A = sin(t_A) = -0.555206729

   ==> Run 3-point Fourier quadrature <==
  t = -0.588612, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.588612, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = 0.458586, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = 0.458586, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -1.635809, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.635809, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 0.0, b = -0.2609065198764, c = 0.17416724617012772

  t_opt = -0.588611503
    <Z>_opt = cos(t_opt) = 0.831712383
    <X>_opt = sin(t_opt) = -0.555206729
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -0.588612, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.588612, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.79586
  <X> = -0.5325200000000001
  Energy = -1.0506850954573184

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.8306713603743827
  <X> = -0.5569460288652903
  Energy = -1.0640218205271013
  measure Z: {'0': 91533.56801871913, '1': 8466.431981280872})
  measure X: {'0': 22152.69855673549, '1': 77847.30144326451})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_3/1.45

   ==> (oq_map.json) Exact results for r = 1.45 <== 
evals = [-1.0639905  -0.43659448]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.0639905010555568
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/1.6
c_z = -0.213224929
c_x = 0.177807023
c_0 = -0.769382665

  t_A = -0.695069165
    <Z>_A = cos(t_A) = 0.768009407
    <X>_A = sin(t_A) = -0.640438561

   ==> Run 3-point Fourier quadrature <==
  t = -0.695069, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.695069, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = 0.352128, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = 0.352128, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -1.742267, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.742267, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 8.326672684688674e-17, b = -0.21322492879091295, c = 0.17780702316230254

  t_opt = -0.695069165
    <Z>_opt = cos(t_opt) = 0.768009407
    <X>_opt = sin(t_opt) = -0.640438561
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -0.695069, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.695069, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.73508
  <X> = -0.6103400000000001
  Energy = -1.0346427843789163

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.76718095479102
  <X> = -0.6382363079880076
  Energy = -1.0464476676589183
  measure Z: {'0': 88359.047739551, '1': 11640.952260449001})
  measure X: {'0': 18088.18460059962, '1': 81911.81539940038})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_3/1.6

   ==> (oq_map.json) Exact results for r = 1.6 <== 
evals = [-1.04701589 -0.49174944]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.0470158904222164
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/1.9
c_z = -0.144203901
c_x = 0.187268886
c_0 = -0.786868492

  t_A = -0.914594616
    <Z>_A = cos(t_A) = 0.610111817
    <X>_A = sin(t_A) = -0.792315323

   ==> Run 3-point Fourier quadrature <==
  t = -0.914595, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.914595, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = 0.132603, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = 0.132603, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -1.961792, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.961792, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 0.0, b = -0.14420390107599912, c = 0.18726888604283615

  t_opt = -0.914594616
    <Z>_opt = cos(t_opt) = 0.610111817
    <X>_opt = sin(t_opt) = -0.792315323
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -0.914595, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.914595, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.58216
  <X> = -0.7607600000000001
  Energy = -1.0132849125065184

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.6074416829786929
  <X> = -0.795364094669802
  Energy = -1.0234109000791474
  measure Z: {'0': 80372.08414893465, '1': 19627.915851065358})
  measure X: {'0': 10231.795266509906, '1': 89768.2047334901})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_3/1.9

   ==> (oq_map.json) Exact results for r = 1.9 <== 
evals = [-1.023225   -0.55051198]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.0232250037111297
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/2.5
c_z = -0.066271102
c_x = 0.209148615
c_0 = -0.784992480

  t_A = -1.263943124
    <Z>_A = cos(t_A) = 0.302060331
    <X>_A = sin(t_A) = -0.953288811

   ==> Run 3-point Fourier quadrature <==
  t = -1.263943, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.263943, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -0.216746, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.216746, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -2.311141, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -2.311141, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = -1.0408340855860843e-17, b = -0.06627110183578011, c = 0.2091486150522356

  t_opt = -1.263943124
    <Z>_opt = cos(t_opt) = 0.302060331
    <X>_opt = sin(t_opt) = -0.953288811
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -1.263943, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.263943, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.28424000000000005
  <X> = -0.91188
  Energy = -0.994547817513185

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.2962363290948161
  <X> = -0.9532230999555764
  Energy = -1.0039896795579581
  measure Z: {'0': 64811.81645474081, '1': 35188.1835452592})
  measure X: {'0': 2338.845002221178, '1': 97661.15499777882})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_3/2.5

   ==> (oq_map.json) Exact results for r = 2.5 <== 
evals = [-1.00438939 -0.56559557]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.0043893858738882
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/2.95
c_z = -0.036185839
c_x = 0.223454420
c_0 = -0.774745750

  t_A = -1.410251678
    <Z>_A = cos(t_A) = 0.159855875
    <X>_A = sin(t_A) = -0.987140364

   ==> Run 3-point Fourier quadrature <==
  t = -1.410252, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.410252, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -0.363054, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.363054, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -2.457449, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -2.457449, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = -1.6479873021779667e-17, b = -0.03618583852259694, c = 0.22345441969595453

  t_opt = -1.410251678
    <Z>_opt = cos(t_opt) = 0.159855875
    <X>_opt = sin(t_opt) = -0.987140364
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -1.410252, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.410252, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.15398
  <X> = -0.9431400000000001
  Energy = -0.9910664472852716

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.16016755282917228
  <X> = -0.9858770931100951
  Energy = -1.0008401414132062
  measure Z: {'0': 58008.37764145861, '1': 41991.62235854138})
  measure X: {'0': 706.1453444952566, '1': 99293.85465550474})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_3/2.95

   ==> (oq_map.json) Exact results for r = 2.95 <== 
evals = [-1.00111115 -0.54838035]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.0011111466652745
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/6.0
c_z = -0.000371898
c_x = 0.268404889
c_0 = -0.731584011

  t_A = -1.569410743
    <Z>_A = cos(t_A) = 0.001385583
    <X>_A = sin(t_A) = -0.999999040

   ==> Run 3-point Fourier quadrature <==
  t = -1.569411, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.569411, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -0.522213, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.522213, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -2.616608, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -2.616608, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 3.6070051025877126e-17, b = -0.0003718976809355938, c = 0.26840488937165813

  t_opt = -1.569410743
    <Z>_opt = cos(t_opt) = 0.001385583
    <X>_opt = sin(t_opt) = -0.999999040
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -1.569411, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.569411, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = -0.00024000000000001798
  <X> = -0.9562999999999999
  Energy = -0.9882595172708205

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = -0.0009296883976977477
  <X> = -0.9996239462654712
  Energy = -0.9998876197818324
  measure Z: {'0': 49953.51558011511, '1': 50046.48441988489})
  measure X: {'0': 18.8026867264432, '1': 99981.19731327356})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_3/6.0

   ==> (oq_map.json) Exact results for r = 6.0 <== 
evals = [-0.99998916 -0.46317886]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -0.9999891578395312
e_analytic - evals[0] = 0.000000000000



   ==> Run Calibration circuits <== 
n_shots       =     100000
Backend       =      qasm_simulator
Noise model   =      ibm_perth
NoiseModel:
  Basis gates: ['cx', 'id', 'reset', 'rz', 'sx', 'x']
  Instructions with noise: ['reset', 'sx', 'x', 'cx', 'measure', 'id']
  Qubits with noise: [0, 1, 2, 3, 4, 5, 6]
  Specific qubit errors: [('id', (0,)), ('id', (1,)), ('id', (2,)), ('id', (3,)), ('id', (4,)), ('id', (5,)), ('id', (6,)), ('sx', (0,)), ('sx', (1,)), ('sx', (2,)), ('sx', (3,)), ('sx', (4,)), ('sx', (5,)), ('sx', (6,)), ('x', (0,)), ('x', (1,)), ('x', (2,)), ('x', (3,)), ('x', (4,)), ('x', (5,)), ('x', (6,)), ('cx', (6, 5)), ('cx', (5, 6)), ('cx', (4, 5)), ('cx', (5, 4)), ('cx', (3, 5)), ('cx', (5, 3)), ('cx', (3, 1)), ('cx', (1, 3)), ('cx', (2, 1)), ('cx', (1, 2)), ('cx', (0, 1)), ('cx', (1, 0)), ('reset', (0,)), ('reset', (1,)), ('reset', (2,)), ('reset', (3,)), ('reset', (4,)), ('reset', (5,)), ('reset', (6,)), ('measure', (0,)), ('measure', (1,)), ('measure', (2,)), ('measure', (3,)), ('measure', (4,)), ('measure', (5,)), ('measure', (6,))]
Calibration matrix =
[[0.97838 0.02256]
 [0.02162 0.97744]]

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/0.6
c_z = -0.975331596
c_x = 0.172588132
c_0 = -0.140879461

  t_A = -0.175140281
    <Z>_A = cos(t_A) = 0.984702105
    <X>_A = sin(t_A) = -0.174246274

   ==> Run 3-point Fourier quadrature <==
  t = -0.175140, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.175140, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = 0.872057, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = 0.872057, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -1.222338, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.222338, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = -1.1102230246251565e-16, b = -0.9753315962732312, c = 0.17258813211389312

  t_opt = -0.175140281
    <Z>_opt = cos(t_opt) = 0.984702105
    <X>_opt = sin(t_opt) = -0.174246274
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -0.175140, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.175140, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.94204
  <X> = -0.17070000000000002
  Energy = -1.089141632523023

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9845996108065356
  <X> = -0.17957355989424223
  Energy = -1.1321828367950766
  measure Z: {'0': 99229.98054032678, '1': 770.0194596732221})
  measure X: {'0': 41021.32200528789, '1': 58978.67799471211})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_4/0.6

   ==> (oq_map.json) Exact results for r = 0.6 <== 
evals = [-1.13136338  0.84960445]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.131363376499586
e_analytic - evals[0] = -0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/0.65
c_z = -0.893017040
c_x = 0.171773983
c_0 = -0.234423207

  t_A = -0.190031414
    <Z>_A = cos(t_A) = 0.981998302
    <X>_A = sin(t_A) = -0.188889744

   ==> Run 3-point Fourier quadrature <==
  t = -0.190031, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.190031, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = 0.857166, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = 0.857166, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -1.237229, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.237229, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = -1.1102230246251565e-16, b = -0.8930170404711617, c = 0.1717739834640627

  t_opt = -0.190031414
    <Z>_opt = cos(t_opt) = 0.981998302
    <X>_opt = sin(t_opt) = -0.188889744
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -0.190031, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.190031, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.93998
  <X> = -0.18141999999999997
  Energy = -1.1050046009599295

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9824443932958143
  <X> = -0.19078906068932794
  Energy = -1.1445353886622835
  measure Z: {'0': 99122.21966479071, '1': 877.7803352092868})
  measure X: {'0': 40460.546965533606, '1': 59539.453034466394})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_4/0.65

   ==> (oq_map.json) Exact results for r = 0.65 <== 
evals = [-1.14381077  0.67496435]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.1438107681038217
e_analytic - evals[0] = -0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/0.7
c_z = -0.818749229
c_x = 0.171060688
c_0 = -0.313783336

  t_A = -0.205966480
    <Z>_A = cos(t_A) = 0.978863784
    <X>_A = sin(t_A) = -0.204513307

   ==> Run 3-point Fourier quadrature <==
  t = -0.205966, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.205966, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = 0.841231, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = 0.841231, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -1.253164, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.253164, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 3.3306690738754696e-16, b = -0.818749228632408, c = 0.17106068808312366

  t_opt = -0.205966480
    <Z>_opt = cos(t_opt) = 0.978863784
    <X>_opt = sin(t_opt) = -0.204513307
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -0.205966, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.205966, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.9351400000000001
  <X> = -0.19199999999999995
  Energy = -1.1122721420760797

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9773806783725756
  <X> = -0.20185809043543795
  Energy = -1.1485429966436072
  measure Z: {'0': 98869.03391862877, '1': 1130.9660813712217})
  measure X: {'0': 39907.095478228104, '1': 60092.904521771896})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_4/0.7

   ==> (oq_map.json) Exact results for r = 0.7 <== 
evals = [-1.15021149  0.52264482]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.1502114912511527
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/0.75
c_z = -0.751762455
c_x = 0.170457573
c_0 = -0.381398162

  t_A = -0.222973719
    <Z>_A = cos(t_A) = 0.975244182
    <X>_A = sin(t_A) = -0.221130698

   ==> Run 3-point Fourier quadrature <==
  t = -0.222974, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.222974, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = 0.824224, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = 0.824224, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -1.270171, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.270171, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 0.0, b = -0.7517624545623149, c = 0.17045757337561948

  t_opt = -0.222973719
    <Z>_opt = cos(t_opt) = 0.975244182
    <X>_opt = sin(t_opt) = -0.221130698
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -0.222974, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.222974, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.93384
  <X> = -0.21599999999999997
  Energy = -1.1202428483094935

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9760205897522106
  <X> = -0.226967420692066
  Energy = -1.1538221119138603
  measure Z: {'0': 98801.02948761053, '1': 1198.9705123894664})
  measure X: {'0': 38651.628965396696, '1': 61348.371034603304})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_4/0.75

   ==> (oq_map.json) Exact results for r = 0.75 <== 
evals = [-1.15224352  0.3894472 ]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.1522435240824251
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/0.8
c_z = -0.691218028
c_x = 0.169960572
c_0 = -0.439308382

  t_A = -0.241102571
    <Z>_A = cos(t_A) = 0.971075301
    <X>_A = sin(t_A) = -0.238773451

   ==> Run 3-point Fourier quadrature <==
  t = -0.241103, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.241103, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = 0.806095, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = 0.806095, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -1.288300, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.288300, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 2.220446049250313e-16, b = -0.6912180276548996, c = 0.169960571979096

  t_opt = -0.241102571
    <Z>_opt = cos(t_opt) = 0.971075301
    <X>_opt = sin(t_opt) = -0.238773451
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -0.241103, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.241103, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.9309799999999999
  <X> = -0.22518
  Energy = -1.1210902630222574

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9730283944630631
  <X> = -0.23657173924216757
  Energy = -1.1520910178265067
  measure Z: {'0': 98651.41972315316, '1': 1348.5802768468377})
  measure X: {'0': 38171.41303789162, '1': 61828.586962108384})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_4/0.8

   ==> (oq_map.json) Exact results for r = 0.8 <== 
evals = [-1.15111521  0.27249844]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.1511152082081149
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/0.85
c_z = -0.636488864
c_x = 0.169579229
c_0 = -0.489018448

  t_A = -0.260380693
    <Z>_A = cos(t_A) = 0.966292039
    <X>_A = sin(t_A) = -0.257448431

   ==> Run 3-point Fourier quadrature <==
  t = -0.260381, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.260381, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = 0.786817, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = 0.786817, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -1.307578, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.307578, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 0.0, b = -0.636488864240029, c = 0.16957922946515439

  t_opt = -0.260380693
    <Z>_opt = cos(t_opt) = 0.966292039
    <X>_opt = sin(t_opt) = -0.257448431
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -0.260381, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.260381, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.92534
  <X> = -0.24707999999999997
  Energy = -1.1198866897177968

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9671276959755818
  <X> = -0.2594840032669449
  Energy = -1.148587554184794
  measure Z: {'0': 98356.38479877908, '1': 1643.6152012209147})
  measure X: {'0': 37025.79983665276, '1': 62974.20016334725})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_4/0.85

   ==> (oq_map.json) Exact results for r = 0.85 <== 
evals = [-1.14771048  0.16967358]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.147710477292962
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/1.15
c_z = -0.399295092
c_x = 0.169766330
c_0 = -0.672952709

  t_A = -0.402010464
    <Z>_A = cos(t_A) = 0.920276221
    <X>_A = sin(t_A) = -0.391269314

   ==> Run 3-point Fourier quadrature <==
  t = -0.402010, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.402010, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = 0.645187, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = 0.645187, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -1.449208, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.449208, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = -5.551115123125783e-17, b = -0.39929509169104116, c = 0.16976633007745248

  t_opt = -0.402010464
    <Z>_opt = cos(t_opt) = 0.920276221
    <X>_opt = sin(t_opt) = -0.391269314
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -0.402010, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.402010, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.8818600000000001
  <X> = -0.37212
  Energy = -1.0882485253844099

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9216379653039725
  <X> = -0.3903036167257835
  Energy = -1.107218637566814
  measure Z: {'0': 96081.89826519863, '1': 3918.1017348013706})
  measure X: {'0': 30484.819163710825, '1': 69515.18083628918})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_4/1.15

   ==> (oq_map.json) Exact results for r = 1.15 <== 
evals = [-1.10683884 -0.23906658]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.1068388428457654
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/1.2
c_z = -0.371037374
c_x = 0.170213481
c_0 = -0.690922272

  t_A = -0.430106748
    <Z>_A = cos(t_A) = 0.908921244
    <X>_A = sin(t_A) = -0.416967830

   ==> Run 3-point Fourier quadrature <==
  t = -0.430107, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.430107, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = 0.617091, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = 0.617091, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -1.477304, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.477304, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 0.0, b = -0.3710373736142774, c = 0.17021348058116215

  t_opt = -0.430106748
    <Z>_opt = cos(t_opt) = 0.908921244
    <X>_opt = sin(t_opt) = -0.416967830
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -0.430107, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.430107, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.8685
  <X> = -0.39525999999999994
  Energy = -1.0804468112724905

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9076604380787752
  <X> = -0.41451319870524944
  Energy = -1.098253951330765
  measure Z: {'0': 95383.02190393876, '1': 4616.978096061241})
  measure X: {'0': 29274.34006473753, '1': 70725.65993526248})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_4/1.2

   ==> (oq_map.json) Exact results for r = 1.2 <== 
evals = [-1.09913957 -0.28270497]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.099139568978659
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/1.3
c_z = -0.321395392
c_x = 0.171457744
c_0 = -0.719962104

  t_A = -0.490070852
    <Z>_A = cos(t_A) = 0.882299511
    <X>_A = sin(t_A) = -0.470688402

   ==> Run 3-point Fourier quadrature <==
  t = -0.490071, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.490071, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = 0.557127, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = 0.557127, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -1.537268, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.537268, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = -5.551115123125783e-17, b = -0.3213953919185241, c = 0.17145774377906553

  t_opt = -0.490070852
    <Z>_opt = cos(t_opt) = 0.882299511
    <X>_opt = sin(t_opt) = -0.470688402
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -0.490071, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.490071, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.84466
  <X> = -0.45308
  Energy = -1.0691160098070656

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.8827185099403911
  <X> = -0.4750057551764588
  Energy = -1.0851071800384005
  measure Z: {'0': 94135.92549701956, '1': 5864.074502980438})
  measure X: {'0': 26249.712241177058, '1': 73750.28775882295})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_4/1.3

   ==> (oq_map.json) Exact results for r = 1.3 <== 
evals = [-1.08423227 -0.35569193]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.0842322722775133
e_analytic - evals[0] = -0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/1.45
c_z = -0.260906520
c_x = 0.174167246
c_0 = -0.750292491

  t_A = -0.588611503
    <Z>_A = cos(t_A) = 0.831712383
    <X>_A = sin(t_A) = -0.555206729

   ==> Run 3-point Fourier quadrature <==
  t = -0.588612, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.588612, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = 0.458586, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = 0.458586, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -1.635809, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.635809, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = -2.7755575615628914e-17, b = -0.2609065198764, c = 0.17416724617012772

  t_opt = -0.588611503
    <Z>_opt = cos(t_opt) = 0.831712383
    <X>_opt = sin(t_opt) = -0.555206729
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -0.588612, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.588612, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.79602
  <X> = -0.5291399999999999
  Energy = -1.0501381552084434

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.8318302613997279
  <X> = -0.5545814080978997
  Energy = -1.0639123458732123
  measure Z: {'0': 91591.5130699864, '1': 8408.4869300136})
  measure X: {'0': 22270.929595105015, '1': 77729.07040489498})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_4/1.45

   ==> (oq_map.json) Exact results for r = 1.45 <== 
evals = [-1.0639905  -0.43659448]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.0639905010555568
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/1.6
c_z = -0.213224929
c_x = 0.177807023
c_0 = -0.769382665

  t_A = -0.695069165
    <Z>_A = cos(t_A) = 0.768009407
    <X>_A = sin(t_A) = -0.640438561

   ==> Run 3-point Fourier quadrature <==
  t = -0.695069, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.695069, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = 0.352128, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = 0.352128, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -1.742267, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.742267, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 2.7755575615628914e-17, b = -0.2132249287909129, c = 0.17780702316230249

  t_opt = -0.695069165
    <Z>_opt = cos(t_opt) = 0.768009407
    <X>_opt = sin(t_opt) = -0.640438561
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -0.695069, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.695069, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.7356
  <X> = -0.6126
  Energy = -1.0351555052142345

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.7686175221419844
  <X> = -0.6418991023484233
  Energy = -1.0474052501917122
  measure Z: {'0': 88430.87610709922, '1': 11569.123892900781})
  measure X: {'0': 17905.04488257883, '1': 82094.95511742117})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_4/1.6

   ==> (oq_map.json) Exact results for r = 1.6 <== 
evals = [-1.04701589 -0.49174944]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.0470158904222164
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/1.9
c_z = -0.144203901
c_x = 0.187268886
c_0 = -0.786868492

  t_A = -0.914594616
    <Z>_A = cos(t_A) = 0.610111817
    <X>_A = sin(t_A) = -0.792315323

   ==> Run 3-point Fourier quadrature <==
  t = -0.914595, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.914595, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = 0.132603, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = 0.132603, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -1.961792, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.961792, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = -1.3877787807814457e-17, b = -0.14420390107599912, c = 0.18726888604283617

  t_opt = -0.914594616
    <Z>_opt = cos(t_opt) = 0.610111817
    <X>_opt = sin(t_opt) = -0.792315323
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -0.914595, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.914595, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.58114
  <X> = -0.7569600000000001
  Energy = -1.0124262027604582

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.6070180634802811
  <X> = -0.7929317219012489
  Energy = -1.0228943047560968
  measure Z: {'0': 80350.90317401405, '1': 19649.096825985944})
  measure X: {'0': 10353.413904937555, '1': 89646.58609506245})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_4/1.9

   ==> (oq_map.json) Exact results for r = 1.9 <== 
evals = [-1.023225   -0.55051198]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.0232250037111297
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/2.5
c_z = -0.066271102
c_x = 0.209148615
c_0 = -0.784992480

  t_A = -1.263943124
    <Z>_A = cos(t_A) = 0.302060331
    <X>_A = sin(t_A) = -0.953288811

   ==> Run 3-point Fourier quadrature <==
  t = -1.263943, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.263943, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -0.216746, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.216746, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -2.311141, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -2.311141, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = -3.122502256758253e-17, b = -0.0662711018357801, c = 0.20914861505223556

  t_opt = -1.263943124
    <Z>_opt = cos(t_opt) = 0.302060331
    <X>_opt = sin(t_opt) = -0.953288811
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -1.263943, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.263943, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.28446
  <X> = -0.9100600000000001
  Energy = -0.9941817466761939

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.29662488748825927
  <X> = -0.953108325814629
  Energy = -1.003991424898196
  measure Z: {'0': 64831.24437441297, '1': 35168.75562558704})
  measure X: {'0': 2344.583709268546, '1': 97655.41629073146})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_4/2.5

   ==> (oq_map.json) Exact results for r = 2.5 <== 
evals = [-1.00438939 -0.56559557]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.0043893858738882
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/2.95
c_z = -0.036185839
c_x = 0.223454420
c_0 = -0.774745750

  t_A = -1.410251678
    <Z>_A = cos(t_A) = 0.159855875
    <X>_A = sin(t_A) = -0.987140364

   ==> Run 3-point Fourier quadrature <==
  t = -1.410252, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.410252, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -0.363054, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.363054, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -2.457449, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -2.457449, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = -3.469446951953614e-17, b = -0.03618583852259693, c = 0.22345441969595453

  t_opt = -1.410251678
    <Z>_opt = cos(t_opt) = 0.159855875
    <X>_opt = sin(t_opt) = -0.987140364
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -1.410252, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.410252, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.15328000000000003
  <X> = -0.9425399999999999
  Energy = -0.9909070445464881

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.15938147352583465
  <X> = -0.9870896193568514
  Energy = -1.001082640823305
  measure Z: {'0': 57969.07367629173, '1': 42030.92632370826})
  measure X: {'0': 645.5190321574265, '1': 99354.48096784258})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_4/2.95

   ==> (oq_map.json) Exact results for r = 2.95 <== 
evals = [-1.00111115 -0.54838035]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.0011111466652745
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/6.0
c_z = -0.000371898
c_x = 0.268404889
c_0 = -0.731584011

  t_A = -1.569410743
    <Z>_A = cos(t_A) = 0.001385583
    <X>_A = sin(t_A) = -0.999999040

   ==> Run 3-point Fourier quadrature <==
  t = -1.569411, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.569411, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -0.522213, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.522213, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -2.616608, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -2.616608, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 2.8089730113320735e-17, b = -0.0003718976809355839, c = 0.26840488937165813

  t_opt = -1.569410743
    <Z>_opt = cos(t_opt) = 0.001385583
    <X>_opt = sin(t_opt) = -0.999999040
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -1.569411, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.569411, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.0021999999999999797
  <X> = -0.9556199999999999
  Energy = -0.9880779093763893

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.001318239876734073
  <X> = -0.9999999999999997
  Energy = -0.9999893904421584
  measure Z: {'0': 50065.91199383671, '1': 49934.0880061633})
  measure X: {'0': 1.055186493736926e-11, '1': 99999.99999999999})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_4/6.0

   ==> (oq_map.json) Exact results for r = 6.0 <== 
evals = [-0.99998916 -0.46317886]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -0.9999891578395312
e_analytic - evals[0] = 0.000000000000



   ==> Run Calibration circuits <== 
n_shots       =     100000
Backend       =      qasm_simulator
Noise model   =      ibm_perth
NoiseModel:
  Basis gates: ['cx', 'id', 'reset', 'rz', 'sx', 'x']
  Instructions with noise: ['reset', 'sx', 'x', 'cx', 'measure', 'id']
  Qubits with noise: [0, 1, 2, 3, 4, 5, 6]
  Specific qubit errors: [('id', (0,)), ('id', (1,)), ('id', (2,)), ('id', (3,)), ('id', (4,)), ('id', (5,)), ('id', (6,)), ('sx', (0,)), ('sx', (1,)), ('sx', (2,)), ('sx', (3,)), ('sx', (4,)), ('sx', (5,)), ('sx', (6,)), ('x', (0,)), ('x', (1,)), ('x', (2,)), ('x', (3,)), ('x', (4,)), ('x', (5,)), ('x', (6,)), ('cx', (6, 5)), ('cx', (5, 6)), ('cx', (4, 5)), ('cx', (5, 4)), ('cx', (3, 5)), ('cx', (5, 3)), ('cx', (3, 1)), ('cx', (1, 3)), ('cx', (2, 1)), ('cx', (1, 2)), ('cx', (0, 1)), ('cx', (1, 0)), ('reset', (0,)), ('reset', (1,)), ('reset', (2,)), ('reset', (3,)), ('reset', (4,)), ('reset', (5,)), ('reset', (6,)), ('measure', (0,)), ('measure', (1,)), ('measure', (2,)), ('measure', (3,)), ('measure', (4,)), ('measure', (5,)), ('measure', (6,))]
Calibration matrix =
[[0.97719 0.02265]
 [0.02281 0.97735]]

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/0.6
c_z = -0.975331596
c_x = 0.172588132
c_0 = -0.140879461

  t_A = -0.175140281
    <Z>_A = cos(t_A) = 0.984702105
    <X>_A = sin(t_A) = -0.174246274

   ==> Run 3-point Fourier quadrature <==
  t = -0.175140, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.175140, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = 0.872057, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = 0.872057, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -1.222338, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.222338, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 1.1102230246251565e-16, b = -0.9753315962732315, c = 0.1725881321138931

  t_opt = -0.175140281
    <Z>_opt = cos(t_opt) = 0.984702105
    <X>_opt = sin(t_opt) = -0.174246274
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -0.175140, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.175140, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.9431
  <X> = -0.17320000000000002
  Energy = -1.0906069543453576

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9881827895910404
  <X> = -0.18128103589393552
  Energy = -1.1359723143721165
  measure Z: {'0': 99409.139479552, '1': 590.860520447984})
  measure X: {'0': 40935.948205303226, '1': 59064.05179469677})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_5/0.6

   ==> (oq_map.json) Exact results for r = 0.6 <== 
evals = [-1.13136338  0.84960445]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.131363376499586
e_analytic - evals[0] = -0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/0.65
c_z = -0.893017040
c_x = 0.171773983
c_0 = -0.234423207

  t_A = -0.190031414
    <Z>_A = cos(t_A) = 0.981998302
    <X>_A = sin(t_A) = -0.188889744

   ==> Run 3-point Fourier quadrature <==
  t = -0.190031, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.190031, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = 0.857166, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = 0.857166, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -1.237229, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.237229, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 1.1102230246251565e-16, b = -0.8930170404711619, c = 0.17177398346406272

  t_opt = -0.190031414
    <Z>_opt = cos(t_opt) = 0.981998302
    <X>_opt = sin(t_opt) = -0.188889744
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -0.190031, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.190031, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.9391
  <X> = -0.17744000000000004
  Energy = -1.1035350855101278

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9839922894499383
  <X> = -0.18572296529204013
  Energy = -1.145047462917795
  measure Z: {'0': 99199.6144724969, '1': 800.385527503088})
  measure X: {'0': 40713.85173539799, '1': 59286.14826460201})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_5/0.65

   ==> (oq_map.json) Exact results for r = 0.65 <== 
evals = [-1.14381077  0.67496435]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.1438107681038217
e_analytic - evals[0] = -0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/0.7
c_z = -0.818749229
c_x = 0.171060688
c_0 = -0.313783336

  t_A = -0.205966480
    <Z>_A = cos(t_A) = 0.978863784
    <X>_A = sin(t_A) = -0.204513307

   ==> Run 3-point Fourier quadrature <==
  t = -0.205966, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.205966, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = 0.841231, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = 0.841231, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -1.253164, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.253164, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 0.0, b = -0.8187492286324076, c = 0.17106068808312358

  t_opt = -0.205966480
    <Z>_opt = cos(t_opt) = 0.978863784
    <X>_opt = sin(t_opt) = -0.204513307
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -0.205966, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.205966, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.93794
  <X> = -0.19761999999999996
  Energy = -1.1155260009832775

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9827770455290148
  <X> = -0.206864039840101
  Energy = -1.15381758924003
  measure Z: {'0': 99138.85227645074, '1': 861.1477235492624})
  measure X: {'0': 39656.79800799495, '1': 60343.20199200505})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_5/0.7

   ==> (oq_map.json) Exact results for r = 0.7 <== 
evals = [-1.15021149  0.52264482]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.1502114912511527
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/0.75
c_z = -0.751762455
c_x = 0.170457573
c_0 = -0.381398162

  t_A = -0.222973719
    <Z>_A = cos(t_A) = 0.975244182
    <X>_A = sin(t_A) = -0.221130698

   ==> Run 3-point Fourier quadrature <==
  t = -0.222974, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.222974, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = 0.824224, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = 0.824224, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -1.270171, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.270171, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 1.1102230246251565e-16, b = -0.751762454562315, c = 0.17045757337561968

  t_opt = -0.222973719
    <Z>_opt = cos(t_opt) = 0.975244182
    <X>_opt = sin(t_opt) = -0.221130698
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -0.222974, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.222974, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.93198
  <X> = -0.21077999999999997
  Energy = -1.1179547816109867

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9765331992370322
  <X> = -0.22065078472485272
  Energy = -1.1531307540395335
  measure Z: {'0': 98826.6599618516, '1': 1173.340038148392})
  measure X: {'0': 38967.460763757364, '1': 61032.53923624263})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_5/0.75

   ==> (oq_map.json) Exact results for r = 0.75 <== 
evals = [-1.15224352  0.3894472 ]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.1522435240824251
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/0.8
c_z = -0.691218028
c_x = 0.169960572
c_0 = -0.439308382

  t_A = -0.241102571
    <Z>_A = cos(t_A) = 0.971075301
    <X>_A = sin(t_A) = -0.238773451

   ==> Run 3-point Fourier quadrature <==
  t = -0.241103, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.241103, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = 0.806095, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = 0.806095, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -1.288300, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.288300, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 1.1102230246251565e-16, b = -0.6912180276548995, c = 0.16996057197909595

  t_opt = -0.241102571
    <Z>_opt = cos(t_opt) = 0.971075301
    <X>_opt = sin(t_opt) = -0.238773451
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -0.241103, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.241103, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.92832
  <X> = -0.22649999999999998
  Energy = -1.119475971023708

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9726988932157549
  <X> = -0.2371194502933352
  Energy = -1.1519563499077683
  measure Z: {'0': 98634.94466078775, '1': 1365.0553392122547})
  measure X: {'0': 38144.02748533324, '1': 61855.97251466676})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_5/0.8

   ==> (oq_map.json) Exact results for r = 0.8 <== 
evals = [-1.15111521  0.27249844]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.1511152082081149
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/0.85
c_z = -0.636488864
c_x = 0.169579229
c_0 = -0.489018448

  t_A = -0.260380693
    <Z>_A = cos(t_A) = 0.966292039
    <X>_A = sin(t_A) = -0.257448431

   ==> Run 3-point Fourier quadrature <==
  t = -0.260381, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.260381, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = 0.786817, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = 0.786817, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -1.307578, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.307578, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 0.0, b = -0.636488864240029, c = 0.1695792294651545

  t_opt = -0.260380693
    <Z>_opt = cos(t_opt) = 0.966292039
    <X>_opt = sin(t_opt) = -0.257448431
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -0.260381, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.260381, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.92604
  <X> = -0.24330000000000002
  Energy = -1.1196912224353863

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9703103064813867
  <X> = -0.25471954550964476
  Energy = -1.14980529725565
  measure Z: {'0': 98515.51532406935, '1': 1484.4846759306567})
  measure X: {'0': 37264.02272451777, '1': 62735.97727548223})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_5/0.85

   ==> (oq_map.json) Exact results for r = 0.85 <== 
evals = [-1.14771048  0.16967358]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.147710477292962
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/1.15
c_z = -0.399295092
c_x = 0.169766330
c_0 = -0.672952709

  t_A = -0.402010464
    <Z>_A = cos(t_A) = 0.920276221
    <X>_A = sin(t_A) = -0.391269314

   ==> Run 3-point Fourier quadrature <==
  t = -0.402010, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.402010, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = 0.645187, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = 0.645187, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -1.449208, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.449208, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = -5.551115123125783e-17, b = -0.3992950916910411, c = 0.16976633007745245

  t_opt = -0.402010464
    <Z>_opt = cos(t_opt) = 0.920276221
    <X>_opt = sin(t_opt) = -0.391269314
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -0.402010, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.402010, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.8829199999999999
  <X> = -0.36833999999999995
  Energy = -1.0880300614539096

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9251367150679697
  <X> = -0.3857145851481724
  Energy = -1.1078366081250928
  measure Z: {'0': 96256.83575339848, '1': 3743.164246601521})
  measure X: {'0': 30714.27074259138, '1': 69285.72925740863})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_5/1.15

   ==> (oq_map.json) Exact results for r = 1.15 <== 
evals = [-1.10683884 -0.23906658]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.1068388428457654
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/1.2
c_z = -0.371037374
c_x = 0.170213481
c_0 = -0.690922272

  t_A = -0.430106748
    <Z>_A = cos(t_A) = 0.908921244
    <X>_A = sin(t_A) = -0.416967830

   ==> Run 3-point Fourier quadrature <==
  t = -0.430107, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.430107, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = 0.617091, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = 0.617091, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -1.477304, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.477304, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = -5.551115123125783e-17, b = -0.37103737361427735, c = 0.17021348058116215

  t_opt = -0.430106748
    <Z>_opt = cos(t_opt) = 0.908921244
    <X>_opt = sin(t_opt) = -0.416967830
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -0.430107, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.430107, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.86642
  <X> = -0.39632
  Energy = -1.0798554798247888

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9078509020068446
  <X> = -0.4150271334567428
  Energy = -1.0984120991892474
  measure Z: {'0': 95392.54510034223, '1': 4607.454899657762})
  measure X: {'0': 29248.643327162863, '1': 70751.35667283714})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_5/1.2

   ==> (oq_map.json) Exact results for r = 1.2 <== 
evals = [-1.09913957 -0.28270497]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.099139568978659
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/1.3
c_z = -0.321395392
c_x = 0.171457744
c_0 = -0.719962104

  t_A = -0.490070852
    <Z>_A = cos(t_A) = 0.882299511
    <X>_A = sin(t_A) = -0.470688402

   ==> Run 3-point Fourier quadrature <==
  t = -0.490071, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.490071, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = 0.557127, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = 0.557127, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -1.537268, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.537268, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 0.0, b = -0.3213953919185242, c = 0.17145774377906559

  t_opt = -0.490070852
    <Z>_opt = cos(t_opt) = 0.882299511
    <X>_opt = sin(t_opt) = -0.470688402
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -0.490071, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.490071, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.8465199999999999
  <X> = -0.4457
  Energy = -1.0684484470869444

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.8870031648145311
  <X> = -0.4667588605959569
  Energy = -1.0850702544329536
  measure Z: {'0': 94350.15824072655, '1': 5649.84175927344})
  measure X: {'0': 26662.05697020215, '1': 73337.94302979784})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_5/1.3

   ==> (oq_map.json) Exact results for r = 1.3 <== 
evals = [-1.08423227 -0.35569193]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.0842322722775133
e_analytic - evals[0] = -0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/1.45
c_z = -0.260906520
c_x = 0.174167246
c_0 = -0.750292491

  t_A = -0.588611503
    <Z>_A = cos(t_A) = 0.831712383
    <X>_A = sin(t_A) = -0.555206729

   ==> Run 3-point Fourier quadrature <==
  t = -0.588612, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.588612, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = 0.458586, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = 0.458586, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -1.635809, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.635809, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = -5.551115123125783e-17, b = -0.26090651987639996, c = 0.1741672461701277

  t_opt = -0.588611503
    <Z>_opt = cos(t_opt) = 0.831712383
    <X>_opt = sin(t_opt) = -0.555206729
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -0.588612, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.588612, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.7950999999999999
  <X> = -0.5314399999999999
  Energy = -1.0502987058763484

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.8331342846936636
  <X> = -0.5565822298936005
  Energy = -1.0646010516749052
  measure Z: {'0': 91656.71423468318, '1': 8343.285765316816})
  measure X: {'0': 22170.88850531997, '1': 77829.11149468002})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_5/1.45

   ==> (oq_map.json) Exact results for r = 1.45 <== 
evals = [-1.0639905  -0.43659448]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.0639905010555568
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/1.6
c_z = -0.213224929
c_x = 0.177807023
c_0 = -0.769382665

  t_A = -0.695069165
    <Z>_A = cos(t_A) = 0.768009407
    <X>_A = sin(t_A) = -0.640438561

   ==> Run 3-point Fourier quadrature <==
  t = -0.695069, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.695069, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = 0.352128, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = 0.352128, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -1.742267, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.742267, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 2.7755575615628914e-17, b = -0.2132249287909129, c = 0.17780702316230249

  t_opt = -0.695069165
    <Z>_opt = cos(t_opt) = 0.768009407
    <X>_opt = sin(t_opt) = -0.640438561
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -0.695069, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.695069, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.7366600000000001
  <X> = -0.6112
  Energy = -1.0351325938063256

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.7719110776187396
  <X> = -0.6401408008538698
  Energy = -1.0477948799691439
  measure Z: {'0': 88595.55388093698, '1': 11404.44611906302})
  measure X: {'0': 17992.959957306506, '1': 82007.0400426935})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_5/1.6

   ==> (oq_map.json) Exact results for r = 1.6 <== 
evals = [-1.04701589 -0.49174944]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.0470158904222164
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/1.9
c_z = -0.144203901
c_x = 0.187268886
c_0 = -0.786868492

  t_A = -0.914594616
    <Z>_A = cos(t_A) = 0.610111817
    <X>_A = sin(t_A) = -0.792315323

   ==> Run 3-point Fourier quadrature <==
  t = -0.914595, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.914595, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = 0.132603, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = 0.132603, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -1.961792, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.961792, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = -1.3877787807814457e-17, b = -0.14420390107599912, c = 0.18726888604283615

  t_opt = -0.914594616
    <Z>_opt = cos(t_opt) = 0.610111817
    <X>_opt = sin(t_opt) = -0.792315323
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -0.914595, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.914595, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.5790200000000001
  <X> = -0.7572399999999999
  Energy = -1.0121729257782692

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.6067634672540336
  <X> = -0.7931359608306503
  Energy = -1.0228958385838682
  measure Z: {'0': 80338.17336270168, '1': 19661.82663729832})
  measure X: {'0': 10343.20195846749, '1': 89656.7980415325})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_5/1.9

   ==> (oq_map.json) Exact results for r = 1.9 <== 
evals = [-1.023225   -0.55051198]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.0232250037111297
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/2.5
c_z = -0.066271102
c_x = 0.209148615
c_0 = -0.784992480

  t_A = -1.263943124
    <Z>_A = cos(t_A) = 0.302060331
    <X>_A = sin(t_A) = -0.953288811

   ==> Run 3-point Fourier quadrature <==
  t = -1.263943, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.263943, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -0.216746, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.216746, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -2.311141, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -2.311141, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 7.28583859910259e-17, b = -0.06627110183578011, c = 0.20914861505223567

  t_opt = -1.263943124
    <Z>_opt = cos(t_opt) = 0.302060331
    <X>_opt = sin(t_opt) = -0.953288811
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -1.263943, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.263943, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.28913999999999995
  <X> = -0.9114800000000001
  Energy = -0.9947888864661595

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.3030779188240807
  <X> = -0.9547216488498892
  Energy = -1.0047564986734583
  measure Z: {'0': 65153.895941204035, '1': 34846.104058795965})
  measure X: {'0': 2263.917557505545, '1': 97736.08244249446})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_5/2.5

   ==> (oq_map.json) Exact results for r = 2.5 <== 
evals = [-1.00438939 -0.56559557]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.0043893858738882
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/2.95
c_z = -0.036185839
c_x = 0.223454420
c_0 = -0.774745750

  t_A = -1.410251678
    <Z>_A = cos(t_A) = 0.159855875
    <X>_A = sin(t_A) = -0.987140364

   ==> Run 3-point Fourier quadrature <==
  t = -1.410252, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.410252, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -0.363054, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.363054, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -2.457449, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -2.457449, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 2.2551405187698492e-17, b = -0.03618583852259694, c = 0.2234544196959546

  t_opt = -1.410251678
    <Z>_opt = cos(t_opt) = 0.159855875
    <X>_opt = sin(t_opt) = -0.987140364
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -1.410252, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.410252, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.14992000000000005
  <X> = -0.9436599999999999
  Energy = -0.9910357290791116

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.15722756512559993
  <X> = -0.9884342249269937
  Energy = -1.0013051578991374
  measure Z: {'0': 57861.37825628, '1': 42138.621743719996})
  measure X: {'0': 578.2887536503043, '1': 99421.7112463497})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_5/2.95

   ==> (oq_map.json) Exact results for r = 2.95 <== 
evals = [-1.00111115 -0.54838035]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.0011111466652745
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/6.0
c_z = -0.000371898
c_x = 0.268404889
c_0 = -0.731584011

  t_A = -1.569410743
    <Z>_A = cos(t_A) = 0.001385583
    <X>_A = sin(t_A) = -0.999999040

   ==> Run 3-point Fourier quadrature <==
  t = -1.569411, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.569411, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -0.522213, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.522213, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -2.616608, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -2.616608, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 1.1087237763085164e-17, b = -0.00037189768093557913, c = 0.2684048893716581

  t_opt = -1.569410743
    <Z>_opt = cos(t_opt) = 0.001385583
    <X>_opt = sin(t_opt) = -0.999999040
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -1.569411, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.569411, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = -0.0014400000000000523
  <X> = -0.9537199999999999
  Energy = -0.9875665863790245

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = -0.0013409662481816964
  <X> = -0.9989733276066359
  Energy = -0.9997128375994058
  measure Z: {'0': 49932.95168759092, '1': 50067.04831240909})
  measure X: {'0': 51.333619668198175, '1': 99948.6663803318})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_5/6.0

   ==> (oq_map.json) Exact results for r = 6.0 <== 
evals = [-0.99998916 -0.46317886]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -0.9999891578395312
e_analytic - evals[0] = 0.000000000000



   ==> Run Calibration circuits <== 
n_shots       =     100000
Backend       =      qasm_simulator
Noise model   =      ibm_perth
NoiseModel:
  Basis gates: ['cx', 'id', 'reset', 'rz', 'sx', 'x']
  Instructions with noise: ['reset', 'sx', 'x', 'cx', 'measure', 'id']
  Qubits with noise: [0, 1, 2, 3, 4, 5, 6]
  Specific qubit errors: [('id', (0,)), ('id', (1,)), ('id', (2,)), ('id', (3,)), ('id', (4,)), ('id', (5,)), ('id', (6,)), ('sx', (0,)), ('sx', (1,)), ('sx', (2,)), ('sx', (3,)), ('sx', (4,)), ('sx', (5,)), ('sx', (6,)), ('x', (0,)), ('x', (1,)), ('x', (2,)), ('x', (3,)), ('x', (4,)), ('x', (5,)), ('x', (6,)), ('cx', (6, 5)), ('cx', (5, 6)), ('cx', (4, 5)), ('cx', (5, 4)), ('cx', (3, 5)), ('cx', (5, 3)), ('cx', (3, 1)), ('cx', (1, 3)), ('cx', (2, 1)), ('cx', (1, 2)), ('cx', (0, 1)), ('cx', (1, 0)), ('reset', (0,)), ('reset', (1,)), ('reset', (2,)), ('reset', (3,)), ('reset', (4,)), ('reset', (5,)), ('reset', (6,)), ('measure', (0,)), ('measure', (1,)), ('measure', (2,)), ('measure', (3,)), ('measure', (4,)), ('measure', (5,)), ('measure', (6,))]
Calibration matrix =
[[0.97879 0.02269]
 [0.02121 0.97731]]

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/0.6
c_z = -0.975331596
c_x = 0.172588132
c_0 = -0.140879461

  t_A = -0.175140281
    <Z>_A = cos(t_A) = 0.984702105
    <X>_A = sin(t_A) = -0.174246274

   ==> Run 3-point Fourier quadrature <==
  t = -0.175140, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.175140, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = 0.872057, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = 0.872057, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -1.222338, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.222338, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 0.0, b = -0.9753315962732313, c = 0.17258813211389304

  t_opt = -0.175140281
    <Z>_opt = cos(t_opt) = 0.984702105
    <X>_opt = sin(t_opt) = -0.174246274
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -0.175140, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.175140, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.9413800000000001
  <X> = -0.16588000000000003
  Energy = -1.087666038872694

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9830561679285224
  <X> = -0.17504445141436592
  Energy = -1.1298957978164246
  measure Z: {'0': 99152.80839642612, '1': 847.191603573884})
  measure X: {'0': 41247.777429281705, '1': 58752.222570718295})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_6/0.6

   ==> (oq_map.json) Exact results for r = 0.6 <== 
evals = [-1.13136338  0.84960445]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.131363376499586
e_analytic - evals[0] = -0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/0.65
c_z = -0.893017040
c_x = 0.171773983
c_0 = -0.234423207

  t_A = -0.190031414
    <Z>_A = cos(t_A) = 0.981998302
    <X>_A = sin(t_A) = -0.188889744

   ==> Run 3-point Fourier quadrature <==
  t = -0.190031, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.190031, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = 0.857166, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = 0.857166, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -1.237229, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.237229, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 1.1102230246251565e-16, b = -0.8930170404711619, c = 0.1717739834640627

  t_opt = -0.190031414
    <Z>_opt = cos(t_opt) = 0.981998302
    <X>_opt = sin(t_opt) = -0.188889744
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -0.190031, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.190031, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.93994
  <X> = -0.17915999999999999
  Energy = -1.104580671075682

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.981550048252913
  <X> = -0.18893421193728066
  Energy = -1.143418108540049
  measure Z: {'0': 99077.50241264566, '1': 922.4975873543503})
  measure X: {'0': 40553.28940313597, '1': 59446.71059686403})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_6/0.65

   ==> (oq_map.json) Exact results for r = 0.65 <== 
evals = [-1.14381077  0.67496435]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.1438107681038217
e_analytic - evals[0] = -0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/0.7
c_z = -0.818749229
c_x = 0.171060688
c_0 = -0.313783336

  t_A = -0.205966480
    <Z>_A = cos(t_A) = 0.978863784
    <X>_A = sin(t_A) = -0.204513307

   ==> Run 3-point Fourier quadrature <==
  t = -0.205966, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.205966, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = 0.841231, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = 0.841231, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -1.253164, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.253164, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 0.0, b = -0.8187492286324075, c = 0.17106068808312366

  t_opt = -0.205966480
    <Z>_opt = cos(t_opt) = 0.978863784
    <X>_opt = sin(t_opt) = -0.204513307
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -0.205966, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.205966, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.9371799999999999
  <X> = -0.19677999999999995
  Energy = -1.1147600605915269

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9786633197364671
  <X> = -0.20736324605871326
  Energy = -1.1505348739798276
  measure Z: {'0': 98933.16598682337, '1': 1066.83401317664})
  measure X: {'0': 39631.83769706434, '1': 60368.16230293567})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_6/0.7

   ==> (oq_map.json) Exact results for r = 0.7 <== 
evals = [-1.15021149  0.52264482]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.1502114912511527
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/0.75
c_z = -0.751762455
c_x = 0.170457573
c_0 = -0.381398162

  t_A = -0.222973719
    <Z>_A = cos(t_A) = 0.975244182
    <X>_A = sin(t_A) = -0.221130698

   ==> Run 3-point Fourier quadrature <==
  t = -0.222974, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.222974, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = 0.824224, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = 0.824224, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -1.270171, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.270171, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 2.220446049250313e-16, b = -0.7517624545623152, c = 0.17045757337561962

  t_opt = -0.222973719
    <Z>_opt = cos(t_opt) = 0.975244182
    <X>_opt = sin(t_opt) = -0.221130698
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -0.222974, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.222974, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.93266
  <X> = -0.21108
  Energy = -1.1185171173521018

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9739357825524632
  <X> = -0.2223198477890863
  Energy = -1.151462618136961
  measure Z: {'0': 98696.78912762315, '1': 1303.210872376846})
  measure X: {'0': 38884.00761054569, '1': 61115.99238945432})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_6/0.75

   ==> (oq_map.json) Exact results for r = 0.75 <== 
evals = [-1.15224352  0.3894472 ]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.1522435240824251
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/0.8
c_z = -0.691218028
c_x = 0.169960572
c_0 = -0.439308382

  t_A = -0.241102571
    <Z>_A = cos(t_A) = 0.971075301
    <X>_A = sin(t_A) = -0.238773451

   ==> Run 3-point Fourier quadrature <==
  t = -0.241103, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.241103, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = 0.806095, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = 0.806095, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -1.288300, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.288300, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 0.0, b = -0.6912180276548994, c = 0.16996057197909592

  t_opt = -0.241102571
    <Z>_opt = cos(t_opt) = 0.971075301
    <X>_opt = sin(t_opt) = -0.238773451
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -0.241103, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.241103, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.9286399999999999
  <X> = -0.22690000000000005
  Energy = -1.119765145021349

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9697311996679089
  <X> = -0.23886623000949364
  Energy = -1.1502019103066217
  measure Z: {'0': 98486.55998339545, '1': 1513.4400166045518})
  measure X: {'0': 38056.68849952531, '1': 61943.31150047469})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_6/0.8

   ==> (oq_map.json) Exact results for r = 0.8 <== 
evals = [-1.15111521  0.27249844]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.1511152082081149
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/0.85
c_z = -0.636488864
c_x = 0.169579229
c_0 = -0.489018448

  t_A = -0.260380693
    <Z>_A = cos(t_A) = 0.966292039
    <X>_A = sin(t_A) = -0.257448431

   ==> Run 3-point Fourier quadrature <==
  t = -0.260381, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.260381, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = 0.786817, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = 0.786817, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -1.307578, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.307578, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 1.1102230246251565e-16, b = -0.636488864240029, c = 0.16957922946515444

  t_opt = -0.260380693
    <Z>_opt = cos(t_opt) = 0.966292039
    <X>_opt = sin(t_opt) = -0.257448431
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -0.260381, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.260381, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.92218
  <X> = -0.24406
  Energy = -1.1173632556338133

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9629745842495043
  <X> = -0.2568141407715728
  Energy = -1.145491391594458
  measure Z: {'0': 98148.72921247521, '1': 1851.2707875247834})
  measure X: {'0': 37159.292961421364, '1': 62840.707038578636})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_6/0.85

   ==> (oq_map.json) Exact results for r = 0.85 <== 
evals = [-1.14771048  0.16967358]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.147710477292962
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/1.15
c_z = -0.399295092
c_x = 0.169766330
c_0 = -0.672952709

  t_A = -0.402010464
    <Z>_A = cos(t_A) = 0.920276221
    <X>_A = sin(t_A) = -0.391269314

   ==> Run 3-point Fourier quadrature <==
  t = -0.402010, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.402010, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = 0.645187, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = 0.645187, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -1.449208, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.449208, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = -5.551115123125783e-17, b = -0.3992950916910411, c = 0.1697663300774525

  t_opt = -0.402010464
    <Z>_opt = cos(t_opt) = 0.920276221
    <X>_opt = sin(t_opt) = -0.391269314
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -0.402010, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.402010, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.8784799999999999
  <X> = -0.37376000000000004
  Energy = -1.0871773247558212

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9172680681947945
  <X> = -0.39246941164364474
  Energy = -1.10584143815483
  measure Z: {'0': 95863.40340973972, '1': 4136.596590260276})
  measure X: {'0': 30376.52941781776, '1': 69623.47058218223})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_6/1.15

   ==> (oq_map.json) Exact results for r = 1.15 <== 
evals = [-1.10683884 -0.23906658]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.1068388428457654
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/1.2
c_z = -0.371037374
c_x = 0.170213481
c_0 = -0.690922272

  t_A = -0.430106748
    <Z>_A = cos(t_A) = 0.908921244
    <X>_A = sin(t_A) = -0.416967830

   ==> Run 3-point Fourier quadrature <==
  t = -0.430107, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.430107, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = 0.617091, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = 0.617091, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -1.477304, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.477304, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = -5.551115123125783e-17, b = -0.37103737361427735, c = 0.17021348058116217

  t_opt = -0.430106748
    <Z>_opt = cos(t_opt) = 0.908921244
    <X>_opt = sin(t_opt) = -0.416967830
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -0.430107, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.430107, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.86734
  <X> = -0.40037999999999996
  Energy = -1.0808879009396737

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9056165735874476
  <X> = -0.4203116828783604
  Energy = -1.0984825813910795
  measure Z: {'0': 95280.82867937238, '1': 4719.171320627614})
  measure X: {'0': 28984.41585608198, '1': 71015.58414391802})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_6/1.2

   ==> (oq_map.json) Exact results for r = 1.2 <== 
evals = [-1.09913957 -0.28270497]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.099139568978659
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/1.3
c_z = -0.321395392
c_x = 0.171457744
c_0 = -0.719962104

  t_A = -0.490070852
    <Z>_A = cos(t_A) = 0.882299511
    <X>_A = sin(t_A) = -0.470688402

   ==> Run 3-point Fourier quadrature <==
  t = -0.490071, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.490071, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = 0.557127, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = 0.557127, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -1.537268, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.537268, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 0.0, b = -0.3213953919185242, c = 0.17145774377906553

  t_opt = -0.490070852
    <Z>_opt = cos(t_opt) = 0.882299511
    <X>_opt = sin(t_opt) = -0.470688402
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -0.490071, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.490071, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.8429599999999999
  <X> = -0.44534
  Energy = -1.067242554703954

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.8801171425592551
  <X> = -0.46733605331563155
  Energy = -1.0829560827729006
  measure Z: {'0': 94005.85712796275, '1': 5994.1428720372505})
  measure X: {'0': 26633.19733421843, '1': 73366.80266578158})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_6/1.3

   ==> (oq_map.json) Exact results for r = 1.3 <== 
evals = [-1.08423227 -0.35569193]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.0842322722775133
e_analytic - evals[0] = -0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/1.45
c_z = -0.260906520
c_x = 0.174167246
c_0 = -0.750292491

  t_A = -0.588611503
    <Z>_A = cos(t_A) = 0.831712383
    <X>_A = sin(t_A) = -0.555206729

   ==> Run 3-point Fourier quadrature <==
  t = -0.588612, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.588612, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = 0.458586, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = 0.458586, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -1.635809, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.635809, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = -5.551115123125783e-17, b = -0.26090651987639996, c = 0.17416724617012766

  t_opt = -0.588611503
    <Z>_opt = cos(t_opt) = 0.831712383
    <X>_opt = sin(t_opt) = -0.555206729
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -0.588612, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.588612, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.7934399999999999
  <X> = -0.5285599999999999
  Energy = -1.0493639993843837

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.8283234075684465
  <X> = -0.5543771572011307
  Energy = -1.0629618110281593
  measure Z: {'0': 91416.17037842232, '1': 8583.829621577679})
  measure X: {'0': 22281.14213994346, '1': 77718.85786005654})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_6/1.45

   ==> (oq_map.json) Exact results for r = 1.45 <== 
evals = [-1.0639905  -0.43659448]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.0639905010555568
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/1.6
c_z = -0.213224929
c_x = 0.177807023
c_0 = -0.769382665

  t_A = -0.695069165
    <Z>_A = cos(t_A) = 0.768009407
    <X>_A = sin(t_A) = -0.640438561

   ==> Run 3-point Fourier quadrature <==
  t = -0.695069, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.695069, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = 0.352128, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = 0.352128, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -1.742267, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.742267, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = -2.7755575615628914e-17, b = -0.21322492879091287, c = 0.17780702316230243

  t_opt = -0.695069165
    <Z>_opt = cos(t_opt) = 0.768009407
    <X>_opt = sin(t_opt) = -0.640438561
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -0.695069, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.695069, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.73448
  <X> = -0.6093200000000001
  Energy = -1.0343334862580162

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.7666562075306272
  <X> = -0.638845313328942
  Energy = -1.0464440638884493
  measure Z: {'0': 88332.81037653137, '1': 11667.189623468636})
  measure X: {'0': 18057.734333552893, '1': 81942.2656664471})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_6/1.6

   ==> (oq_map.json) Exact results for r = 1.6 <== 
evals = [-1.04701589 -0.49174944]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.0470158904222164
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/1.9
c_z = -0.144203901
c_x = 0.187268886
c_0 = -0.786868492

  t_A = -0.914594616
    <Z>_A = cos(t_A) = 0.610111817
    <X>_A = sin(t_A) = -0.792315323

   ==> Run 3-point Fourier quadrature <==
  t = -0.914595, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.914595, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = 0.132603, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = 0.132603, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -1.961792, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.961792, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = -1.3877787807814457e-17, b = -0.14420390107599912, c = 0.18726888604283617

  t_opt = -0.914594616
    <Z>_opt = cos(t_opt) = 0.610111817
    <X>_opt = sin(t_opt) = -0.792315323
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -0.914595, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.914595, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.58782
  <X> = -0.7551399999999999
  Energy = -1.013048655447048

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.6132622071088689
  <X> = -0.7913607363179676
  Energy = -1.0235005379060473
  measure Z: {'0': 80663.11035544345, '1': 19336.889644556555})
  measure X: {'0': 10431.963184101623, '1': 89568.03681589838})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_6/1.9

   ==> (oq_map.json) Exact results for r = 1.9 <== 
evals = [-1.023225   -0.55051198]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.0232250037111297
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/2.5
c_z = -0.066271102
c_x = 0.209148615
c_0 = -0.784992480

  t_A = -1.263943124
    <Z>_A = cos(t_A) = 0.302060331
    <X>_A = sin(t_A) = -0.953288811

   ==> Run 3-point Fourier quadrature <==
  t = -1.263943, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.263943, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -0.216746, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.216746, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -2.311141, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -2.311141, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 2.0816681711721685e-17, b = -0.0662711018357801, c = 0.20914861505223561

  t_opt = -1.263943124
    <Z>_opt = cos(t_opt) = 0.302060331
    <X>_opt = sin(t_opt) = -0.953288811
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -1.263943, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.263943, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.29468000000000005
  <X> = -0.91428
  Energy = -0.9957416444924759

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.3066624829912149
  <X> = -0.9578077606941234
  Energy = -1.0056395077085334
  measure Z: {'0': 65333.12414956075, '1': 34666.87585043925})
  measure X: {'0': 2109.611965293828, '1': 97890.38803470616})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_6/2.5

   ==> (oq_map.json) Exact results for r = 2.5 <== 
evals = [-1.00438939 -0.56559557]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.0043893858738882
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/2.95
c_z = -0.036185839
c_x = 0.223454420
c_0 = -0.774745750

  t_A = -1.410251678
    <Z>_A = cos(t_A) = 0.159855875
    <X>_A = sin(t_A) = -0.987140364

   ==> Run 3-point Fourier quadrature <==
  t = -1.410252, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.410252, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -0.363054, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.363054, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -2.457449, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -2.457449, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = -1.5612511283791264e-17, b = -0.03618583852259693, c = 0.22345441969595456

  t_opt = -1.410251678
    <Z>_opt = cos(t_opt) = 0.159855875
    <X>_opt = sin(t_opt) = -0.987140364
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -1.410252, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.410252, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.15067999999999998
  <X> = -0.9454800000000001
  Energy = -0.9914699173602355

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.15605062874996428
  <X> = -0.9904403304904786
  Energy = -1.0017108426240346
  measure Z: {'0': 57802.53143749821, '1': 42197.46856250179})
  measure X: {'0': 477.9834754760653, '1': 99522.01652452393})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_6/2.95

   ==> (oq_map.json) Exact results for r = 2.95 <== 
evals = [-1.00111115 -0.54838035]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.0011111466652745
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/6.0
c_z = -0.000371898
c_x = 0.268404889
c_0 = -0.731584011

  t_A = -1.569410743
    <Z>_A = cos(t_A) = 0.001385583
    <X>_A = sin(t_A) = -0.999999040

   ==> Run 3-point Fourier quadrature <==
  t = -1.569411, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.569411, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -0.522213, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.522213, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -2.616608, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -2.616608, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 3.05835009891558e-17, b = -0.00037189768093560184, c = 0.26840488937165813

  t_opt = -1.569410743
    <Z>_opt = cos(t_opt) = 0.001385583
    <X>_opt = sin(t_opt) = -0.999999040
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -1.569411, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.569411, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.0011799999999999589
  <X> = -0.95672
  Energy = -0.9883727754190635

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = -0.00031377469874582786
  <X> = -1.0
  Energy = -0.9999887834997226
  measure Z: {'0': 49984.311265062715, '1': 50015.68873493729})
  measure X: {'1': 100000.0, '0': 0})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_6/6.0

   ==> (oq_map.json) Exact results for r = 6.0 <== 
evals = [-0.99998916 -0.46317886]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -0.9999891578395312
e_analytic - evals[0] = 0.000000000000



   ==> Run Calibration circuits <== 
n_shots       =     100000
Backend       =      qasm_simulator
Noise model   =      ibm_perth
NoiseModel:
  Basis gates: ['cx', 'id', 'reset', 'rz', 'sx', 'x']
  Instructions with noise: ['reset', 'sx', 'x', 'cx', 'measure', 'id']
  Qubits with noise: [0, 1, 2, 3, 4, 5, 6]
  Specific qubit errors: [('id', (0,)), ('id', (1,)), ('id', (2,)), ('id', (3,)), ('id', (4,)), ('id', (5,)), ('id', (6,)), ('sx', (0,)), ('sx', (1,)), ('sx', (2,)), ('sx', (3,)), ('sx', (4,)), ('sx', (5,)), ('sx', (6,)), ('x', (0,)), ('x', (1,)), ('x', (2,)), ('x', (3,)), ('x', (4,)), ('x', (5,)), ('x', (6,)), ('cx', (6, 5)), ('cx', (5, 6)), ('cx', (4, 5)), ('cx', (5, 4)), ('cx', (3, 5)), ('cx', (5, 3)), ('cx', (3, 1)), ('cx', (1, 3)), ('cx', (2, 1)), ('cx', (1, 2)), ('cx', (0, 1)), ('cx', (1, 0)), ('reset', (0,)), ('reset', (1,)), ('reset', (2,)), ('reset', (3,)), ('reset', (4,)), ('reset', (5,)), ('reset', (6,)), ('measure', (0,)), ('measure', (1,)), ('measure', (2,)), ('measure', (3,)), ('measure', (4,)), ('measure', (5,)), ('measure', (6,))]
Calibration matrix =
[[0.97823 0.02266]
 [0.02177 0.97734]]

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/0.6
c_z = -0.975331596
c_x = 0.172588132
c_0 = -0.140879461

  t_A = -0.175140281
    <Z>_A = cos(t_A) = 0.984702105
    <X>_A = sin(t_A) = -0.174246274

   ==> Run 3-point Fourier quadrature <==
  t = -0.175140, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.175140, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = 0.872057, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = 0.872057, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -1.222338, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.222338, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = -2.220446049250313e-16, b = -0.9753315962732311, c = 0.17258813211389307

  t_opt = -0.175140281
    <Z>_opt = cos(t_opt) = 0.984702105
    <X>_opt = sin(t_opt) = -0.174246274
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -0.175140, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.175140, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.9419
  <X> = -0.16359999999999997
  Energy = -1.087779710361536

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9847630210297457
  <X> = -0.1721380955869274
  Energy = -1.1310589430527287
  measure Z: {'0': 99238.1510514873, '1': 761.8489485127078})
  measure X: {'0': 41393.09522065363, '1': 58606.90477934637})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_7/0.6

   ==> (oq_map.json) Exact results for r = 0.6 <== 
evals = [-1.13136338  0.84960445]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.131363376499586
e_analytic - evals[0] = -0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/0.65
c_z = -0.893017040
c_x = 0.171773983
c_0 = -0.234423207

  t_A = -0.190031414
    <Z>_A = cos(t_A) = 0.981998302
    <X>_A = sin(t_A) = -0.188889744

   ==> Run 3-point Fourier quadrature <==
  t = -0.190031, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.190031, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = 0.857166, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = 0.857166, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -1.237229, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.237229, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 0.0, b = -0.8930170404711618, c = 0.17177398346406267

  t_opt = -0.190031414
    <Z>_opt = cos(t_opt) = 0.981998302
    <X>_opt = sin(t_opt) = -0.188889744
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -0.190031, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.190031, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.94034
  <X> = -0.18278
  Energy = -1.10555969971201

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9831304876191349
  <X> = -0.19220989015955126
  Energy = -1.1453921441223027
  measure Z: {'0': 99156.52438095676, '1': 843.4756190432455})
  measure X: {'0': 40389.505492022436, '1': 59610.494507977564})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_7/0.65

   ==> (oq_map.json) Exact results for r = 0.65 <== 
evals = [-1.14381077  0.67496435]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.1438107681038217
e_analytic - evals[0] = -0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/0.7
c_z = -0.818749229
c_x = 0.171060688
c_0 = -0.313783336

  t_A = -0.205966480
    <Z>_A = cos(t_A) = 0.978863784
    <X>_A = sin(t_A) = -0.204513307

   ==> Run 3-point Fourier quadrature <==
  t = -0.205966, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.205966, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = 0.841231, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = 0.841231, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -1.253164, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.253164, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 0.0, b = -0.8187492286324076, c = 0.1710606880831236

  t_opt = -0.205966480
    <Z>_opt = cos(t_opt) = 0.978863784
    <X>_opt = sin(t_opt) = -0.204513307
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -0.205966, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.205966, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.93744
  <X> = -0.1961
  Energy = -1.114856614123075

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9800956497169895
  <X> = -0.20614920938811238
  Energy = -1.151499919098296
  measure Z: {'0': 99004.78248584947, '1': 995.2175141505352})
  measure X: {'0': 39692.539530594375, '1': 60307.46046940562})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_7/0.7

   ==> (oq_map.json) Exact results for r = 0.7 <== 
evals = [-1.15021149  0.52264482]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.1502114912511527
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/0.75
c_z = -0.751762455
c_x = 0.170457573
c_0 = -0.381398162

  t_A = -0.222973719
    <Z>_A = cos(t_A) = 0.975244182
    <X>_A = sin(t_A) = -0.221130698

   ==> Run 3-point Fourier quadrature <==
  t = -0.222974, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.222974, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = 0.824224, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = 0.824224, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -1.270171, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.270171, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = -1.1102230246251565e-16, b = -0.7517624545623148, c = 0.1704575733756196

  t_opt = -0.222973719
    <Z>_opt = cos(t_opt) = 0.975244182
    <X>_opt = sin(t_opt) = -0.221130698
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -0.222974, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.222974, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.9333
  <X> = -0.21215999999999996
  Energy = -1.1191823395022675

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9757631570664629
  <X> = -0.22295592769146322
  Energy = -1.1529447943236422
  measure Z: {'0': 98788.15785332314, '1': 1211.8421466768573})
  measure X: {'0': 38852.20361542684, '1': 61147.79638457316})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_7/0.75

   ==> (oq_map.json) Exact results for r = 0.75 <== 
evals = [-1.15224352  0.3894472 ]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.1522435240824251
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/0.8
c_z = -0.691218028
c_x = 0.169960572
c_0 = -0.439308382

  t_A = -0.241102571
    <Z>_A = cos(t_A) = 0.971075301
    <X>_A = sin(t_A) = -0.238773451

   ==> Run 3-point Fourier quadrature <==
  t = -0.241103, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.241103, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = 0.806095, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = 0.806095, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -1.288300, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.288300, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 0.0, b = -0.6912180276548994, c = 0.16996057197909598

  t_opt = -0.241102571
    <Z>_opt = cos(t_opt) = 0.971075301
    <X>_opt = sin(t_opt) = -0.238773451
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -0.241103, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.241103, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.92998
  <X> = -0.22962
  Energy = -1.12115366993419

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9722887927755703
  <X> = -0.24122774887474602
  Energy = -1.1523711298671209
  measure Z: {'0': 98614.43963877851, '1': 1385.5603612214816})
  measure X: {'0': 37938.6125562627, '1': 62061.3874437373})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_7/0.8

   ==> (oq_map.json) Exact results for r = 0.8 <== 
evals = [-1.15111521  0.27249844]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.1511152082081149
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/0.85
c_z = -0.636488864
c_x = 0.169579229
c_0 = -0.489018448

  t_A = -0.260380693
    <Z>_A = cos(t_A) = 0.966292039
    <X>_A = sin(t_A) = -0.257448431

   ==> Run 3-point Fourier quadrature <==
  t = -0.260381, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.260381, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = 0.786817, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = 0.786817, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -1.307578, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.307578, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 0.0, b = -0.636488864240029, c = 0.1695792294651544

  t_opt = -0.260380693
    <Z>_opt = cos(t_opt) = 0.966292039
    <X>_opt = sin(t_opt) = -0.257448431
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -0.260381, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.260381, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.9270799999999999
  <X> = -0.24463999999999997
  Energy = -1.1205804070216794

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9692539533250724
  <X> = -0.25694611496231556
  Energy = -1.1495105201670857
  measure Z: {'0': 98462.69766625362, '1': 1537.3023337463821})
  measure X: {'0': 37152.69425188422, '1': 62847.30574811578})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_7/0.85

   ==> (oq_map.json) Exact results for r = 0.85 <== 
evals = [-1.14771048  0.16967358]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.147710477292962
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/1.15
c_z = -0.399295092
c_x = 0.169766330
c_0 = -0.672952709

  t_A = -0.402010464
    <Z>_A = cos(t_A) = 0.920276221
    <X>_A = sin(t_A) = -0.391269314

   ==> Run 3-point Fourier quadrature <==
  t = -0.402010, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.402010, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = 0.645187, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = 0.645187, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -1.449208, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.449208, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = -1.1102230246251565e-16, b = -0.39929509169104105, c = 0.1697663300774525

  t_opt = -0.402010464
    <Z>_opt = cos(t_opt) = 0.920276221
    <X>_opt = sin(t_opt) = -0.391269314
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -0.402010, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.402010, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.8804000000000001
  <X> = -0.37810000000000005
  Energy = -1.0886807572044042

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9204035279668398
  <X> = -0.3966114537625316
  Energy = -1.1077965911415522
  measure Z: {'0': 96020.17639834198, '1': 3979.823601658012})
  measure X: {'0': 30169.427311873416, '1': 69830.57268812657})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_7/1.15

   ==> (oq_map.json) Exact results for r = 1.15 <== 
evals = [-1.10683884 -0.23906658]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.1068388428457654
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/1.2
c_z = -0.371037374
c_x = 0.170213481
c_0 = -0.690922272

  t_A = -0.430106748
    <Z>_A = cos(t_A) = 0.908921244
    <X>_A = sin(t_A) = -0.416967830

   ==> Run 3-point Fourier quadrature <==
  t = -0.430107, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.430107, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = 0.617091, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = 0.617091, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -1.477304, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.477304, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = -1.1102230246251565e-16, b = -0.37103737361427735, c = 0.17021348058116212

  t_opt = -0.430106748
    <Z>_opt = cos(t_opt) = 0.908921244
    <X>_opt = sin(t_opt) = -0.416967830
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -0.430107, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.430107, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.8700600000000001
  <X> = -0.39856
  Energy = -1.0815873340612467

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9095827621131304
  <X> = -0.41802275078153556
  Energy = -1.0995645784658934
  measure Z: {'0': 95479.1381056565, '1': 4520.861894343491})
  measure X: {'0': 29098.862460923214, '1': 70901.13753907678})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_7/1.2

   ==> (oq_map.json) Exact results for r = 1.2 <== 
evals = [-1.09913957 -0.28270497]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.099139568978659
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/1.3
c_z = -0.321395392
c_x = 0.171457744
c_0 = -0.719962104

  t_A = -0.490070852
    <Z>_A = cos(t_A) = 0.882299511
    <X>_A = sin(t_A) = -0.470688402

   ==> Run 3-point Fourier quadrature <==
  t = -0.490071, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.490071, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = 0.557127, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = 0.557127, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -1.537268, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.537268, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = -5.551115123125783e-17, b = -0.3213953919185241, c = 0.17145774377906553

  t_opt = -0.490070852
    <Z>_opt = cos(t_opt) = 0.882299511
    <X>_opt = sin(t_opt) = -0.470688402
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -0.490071, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.490071, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.84246
  <X> = -0.45252000000000003
  Energy = -1.0683129236083284

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.8806994784036657
  <X> = -0.47449166467537435
  Energy = -1.0843701278089444
  measure Z: {'0': 94034.97392018327, '1': 5965.026079816725})
  measure X: {'0': 26275.41676623128, '1': 73724.58323376872})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_7/1.3

   ==> (oq_map.json) Exact results for r = 1.3 <== 
evals = [-1.08423227 -0.35569193]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.0842322722775133
e_analytic - evals[0] = -0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/1.45
c_z = -0.260906520
c_x = 0.174167246
c_0 = -0.750292491

  t_A = -0.588611503
    <Z>_A = cos(t_A) = 0.831712383
    <X>_A = sin(t_A) = -0.555206729

   ==> Run 3-point Fourier quadrature <==
  t = -0.588612, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.588612, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = 0.458586, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = 0.458586, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -1.635809, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.635809, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = -5.551115123125783e-17, b = -0.26090651987639996, c = 0.17416724617012766

  t_opt = -0.588611503
    <Z>_opt = cos(t_opt) = 0.831712383
    <X>_opt = sin(t_opt) = -0.555206729
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -0.588612, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.588612, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.7968999999999999
  <X> = -0.52736
  Energy = -1.0500577352477518

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.83302112735644
  <X> = -0.5528114097131556
  Energy = -1.063914774821221
  measure Z: {'0': 91651.05636782199, '1': 8348.943632178009})
  measure X: {'0': 22359.42951434222, '1': 77640.57048565778})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_7/1.45

   ==> (oq_map.json) Exact results for r = 1.45 <== 
evals = [-1.0639905  -0.43659448]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.0639905010555568
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/1.6
c_z = -0.213224929
c_x = 0.177807023
c_0 = -0.769382665

  t_A = -0.695069165
    <Z>_A = cos(t_A) = 0.768009407
    <X>_A = sin(t_A) = -0.640438561

   ==> Run 3-point Fourier quadrature <==
  t = -0.695069, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.695069, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = 0.352128, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = 0.352128, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -1.742267, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.742267, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 2.7755575615628914e-17, b = -0.21322492879091293, c = 0.17780702316230249

  t_opt = -0.695069165
    <Z>_opt = cos(t_opt) = 0.768009407
    <X>_opt = sin(t_opt) = -0.640438561
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -0.695069, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.695069, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.73072
  <X> = -0.6125799999999999
  Energy = -1.0341114114212715

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.763764036298652
  <X> = -0.641993779201202
  Energy = -1.046387200227735
  measure Z: {'0': 88188.2018149326, '1': 11811.798185067399})
  measure X: {'0': 17900.311039939905, '1': 82099.6889600601})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_7/1.6

   ==> (oq_map.json) Exact results for r = 1.6 <== 
evals = [-1.04701589 -0.49174944]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.0470158904222164
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/1.9
c_z = -0.144203901
c_x = 0.187268886
c_0 = -0.786868492

  t_A = -0.914594616
    <Z>_A = cos(t_A) = 0.610111817
    <X>_A = sin(t_A) = -0.792315323

   ==> Run 3-point Fourier quadrature <==
  t = -0.914595, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.914595, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = 0.132603, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = 0.132603, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -1.961792, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.961792, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = -1.3877787807814457e-17, b = -0.1442039010759991, c = 0.18726888604283617

  t_opt = -0.914594616
    <Z>_opt = cos(t_opt) = 0.610111817
    <X>_opt = sin(t_opt) = -0.792315323
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -0.914595, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.914595, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.5801400000000001
  <X> = -0.7599800000000001
  Energy = -1.0128475508952315

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.6061827038108252
  <X> = -0.7962472660377531
  Energy = -1.0233947408900286
  measure Z: {'0': 80309.13519054124, '1': 19690.86480945874})
  measure X: {'0': 10187.636698112337, '1': 89812.36330188766})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_7/1.9

   ==> (oq_map.json) Exact results for r = 1.9 <== 
evals = [-1.023225   -0.55051198]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.0232250037111297
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/2.5
c_z = -0.066271102
c_x = 0.209148615
c_0 = -0.784992480

  t_A = -1.263943124
    <Z>_A = cos(t_A) = 0.302060331
    <X>_A = sin(t_A) = -0.953288811

   ==> Run 3-point Fourier quadrature <==
  t = -1.263943, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.263943, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -0.216746, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.216746, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -2.311141, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -2.311141, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 0.0, b = -0.06627110183578012, c = 0.2091486150522356

  t_opt = -1.263943124
    <Z>_opt = cos(t_opt) = 0.302060331
    <X>_opt = sin(t_opt) = -0.953288811
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -1.263943, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.263943, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.2924
  <X> = -0.9109799999999999
  Energy = -0.994900355950618

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.30506399322750477
  <X> = -0.9542681332088916
  Energy = -1.004793265844282
  measure Z: {'0': 65253.19966137524, '1': 34746.80033862476})
  measure X: {'0': 2286.5933395554216, '1': 97713.40666044458})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_7/2.5

   ==> (oq_map.json) Exact results for r = 2.5 <== 
evals = [-1.00438939 -0.56559557]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.0043893858738882
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/2.95
c_z = -0.036185839
c_x = 0.223454420
c_0 = -0.774745750

  t_A = -1.410251678
    <Z>_A = cos(t_A) = 0.159855875
    <X>_A = sin(t_A) = -0.987140364

   ==> Run 3-point Fourier quadrature <==
  t = -1.410252, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.410252, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -0.363054, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.363054, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -2.457449, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -2.457449, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 9.540979117872439e-18, b = -0.03618583852259695, c = 0.22345441969595456

  t_opt = -1.410251678
    <Z>_opt = cos(t_opt) = 0.159855875
    <X>_opt = sin(t_opt) = -0.987140364
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -1.410252, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.410252, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.15202000000000004
  <X> = -0.94266
  Energy = -0.9908882649203132

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.15815691026256556
  <X> = -0.9874211203790982
  Energy = -1.0011124043433541
  measure Z: {'0': 57907.845513128275, '1': 42092.15448687172})
  measure X: {'0': 628.9439810450882, '1': 99371.05601895491})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_7/2.95

   ==> (oq_map.json) Exact results for r = 2.95 <== 
evals = [-1.00111115 -0.54838035]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.0011111466652745
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/6.0
c_z = -0.000371898
c_x = 0.268404889
c_0 = -0.731584011

  t_A = -1.569410743
    <Z>_A = cos(t_A) = 0.001385583
    <X>_A = sin(t_A) = -0.999999040

   ==> Run 3-point Fourier quadrature <==
  t = -1.569411, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.569411, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -0.522213, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.522213, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -2.616608, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -2.616608, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 9.088578820743917e-17, b = -0.0003718976809356457, c = 0.2684048893716582

  t_opt = -1.569410743
    <Z>_opt = cos(t_opt) = 0.001385583
    <X>_opt = sin(t_opt) = -0.999999040
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -1.569411, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.569411, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = -0.0017199999999999993
  <X> = -0.95696
  Energy = -0.988436114089238

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = -0.0027313498904499856
  <X> = -1.0
  Energy = -0.9999878844091153
  measure Z: {'0': 49863.4325054775, '1': 50136.56749452251})
  measure X: {'1': 100000.0, '0': 0})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_7/6.0

   ==> (oq_map.json) Exact results for r = 6.0 <== 
evals = [-0.99998916 -0.46317886]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -0.9999891578395312
e_analytic - evals[0] = 0.000000000000



   ==> Run Calibration circuits <== 
n_shots       =     100000
Backend       =      qasm_simulator
Noise model   =      ibm_perth
NoiseModel:
  Basis gates: ['cx', 'id', 'reset', 'rz', 'sx', 'x']
  Instructions with noise: ['reset', 'sx', 'x', 'cx', 'measure', 'id']
  Qubits with noise: [0, 1, 2, 3, 4, 5, 6]
  Specific qubit errors: [('id', (0,)), ('id', (1,)), ('id', (2,)), ('id', (3,)), ('id', (4,)), ('id', (5,)), ('id', (6,)), ('sx', (0,)), ('sx', (1,)), ('sx', (2,)), ('sx', (3,)), ('sx', (4,)), ('sx', (5,)), ('sx', (6,)), ('x', (0,)), ('x', (1,)), ('x', (2,)), ('x', (3,)), ('x', (4,)), ('x', (5,)), ('x', (6,)), ('cx', (6, 5)), ('cx', (5, 6)), ('cx', (4, 5)), ('cx', (5, 4)), ('cx', (3, 5)), ('cx', (5, 3)), ('cx', (3, 1)), ('cx', (1, 3)), ('cx', (2, 1)), ('cx', (1, 2)), ('cx', (0, 1)), ('cx', (1, 0)), ('reset', (0,)), ('reset', (1,)), ('reset', (2,)), ('reset', (3,)), ('reset', (4,)), ('reset', (5,)), ('reset', (6,)), ('measure', (0,)), ('measure', (1,)), ('measure', (2,)), ('measure', (3,)), ('measure', (4,)), ('measure', (5,)), ('measure', (6,))]
Calibration matrix =
[[0.97835 0.02261]
 [0.02165 0.97739]]

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/0.6
c_z = -0.975331596
c_x = 0.172588132
c_0 = -0.140879461

  t_A = -0.175140281
    <Z>_A = cos(t_A) = 0.984702105
    <X>_A = sin(t_A) = -0.174246274

   ==> Run 3-point Fourier quadrature <==
  t = -0.175140, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.175140, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = 0.872057, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = 0.872057, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -1.222338, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.222338, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 2.220446049250313e-16, b = -0.9753315962732315, c = 0.17258813211389315

  t_opt = -0.175140281
    <Z>_opt = cos(t_opt) = 0.984702105
    <X>_opt = sin(t_opt) = -0.174246274
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -0.175140, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.175140, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.94076
  <X> = -0.16956
  Energy = -1.0876964576091834

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9833218239268489
  <X> = -0.17841672416263377
  Energy = -1.1307369147599342
  measure Z: {'0': 99166.09119634244, '1': 833.9088036575611})
  measure X: {'0': 41079.16379186831, '1': 58920.83620813169})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_8/0.6

   ==> (oq_map.json) Exact results for r = 0.6 <== 
evals = [-1.13136338  0.84960445]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.131363376499586
e_analytic - evals[0] = -0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/0.65
c_z = -0.893017040
c_x = 0.171773983
c_0 = -0.234423207

  t_A = -0.190031414
    <Z>_A = cos(t_A) = 0.981998302
    <X>_A = sin(t_A) = -0.188889744

   ==> Run 3-point Fourier quadrature <==
  t = -0.190031, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.190031, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = 0.857166, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = 0.857166, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -1.237229, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.237229, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 1.1102230246251565e-16, b = -0.8930170404711619, c = 0.1717739834640627

  t_opt = -0.190031414
    <Z>_opt = cos(t_opt) = 0.981998302
    <X>_opt = sin(t_opt) = -0.188889744
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -0.190031, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.190031, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.93944
  <X> = -0.17964000000000002
  Energy = -1.1042166140675092

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9819406950879296
  <X> = -0.18896353321360754
  Energy = -1.14377199945296
  measure Z: {'0': 99097.03475439647, '1': 902.9652456035285})
  measure X: {'0': 40551.82333931963, '1': 59448.17666068038})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_8/0.65

   ==> (oq_map.json) Exact results for r = 0.65 <== 
evals = [-1.14381077  0.67496435]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.1438107681038217
e_analytic - evals[0] = -0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/0.7
c_z = -0.818749229
c_x = 0.171060688
c_0 = -0.313783336

  t_A = -0.205966480
    <Z>_A = cos(t_A) = 0.978863784
    <X>_A = sin(t_A) = -0.204513307

   ==> Run 3-point Fourier quadrature <==
  t = -0.205966, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.205966, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = 0.841231, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = 0.841231, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -1.253164, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.253164, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 1.1102230246251565e-16, b = -0.8187492286324077, c = 0.17106068808312364

  t_opt = -0.205966480
    <Z>_opt = cos(t_opt) = 0.978863784
    <X>_opt = sin(t_opt) = -0.204513307
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -0.205966, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.205966, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.93756
  <X> = -0.19904000000000005
  Energy = -1.115457782453475

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9799736343343113
  <X> = -0.20926193317236674
  Energy = -1.151932483770194
  measure Z: {'0': 98998.68171671557, '1': 1001.3182832844394})
  measure X: {'0': 39536.903341381665, '1': 60463.096658618335})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_8/0.7

   ==> (oq_map.json) Exact results for r = 0.7 <== 
evals = [-1.15021149  0.52264482]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.1502114912511527
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/0.75
c_z = -0.751762455
c_x = 0.170457573
c_0 = -0.381398162

  t_A = -0.222973719
    <Z>_A = cos(t_A) = 0.975244182
    <X>_A = sin(t_A) = -0.221130698

   ==> Run 3-point Fourier quadrature <==
  t = -0.222974, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.222974, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = 0.824224, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = 0.824224, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -1.270171, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.270171, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 0.0, b = -0.7517624545623149, c = 0.17045757337561962

  t_opt = -0.222973719
    <Z>_opt = cos(t_opt) = 0.975244182
    <X>_opt = sin(t_opt) = -0.221130698
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -0.222974, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.222974, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.9348799999999999
  <X> = -0.21306000000000003
  Energy = -1.1205235359965138

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9771695230043151
  <X> = -0.22393120330209154
  Energy = -1.1541682905470547
  measure Z: {'0': 98858.47615021576, '1': 1141.523849784235})
  measure X: {'0': 38803.43983489543, '1': 61196.56016510457})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_8/0.75

   ==> (oq_map.json) Exact results for r = 0.75 <== 
evals = [-1.15224352  0.3894472 ]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.1522435240824251
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/0.8
c_z = -0.691218028
c_x = 0.169960572
c_0 = -0.439308382

  t_A = -0.241102571
    <Z>_A = cos(t_A) = 0.971075301
    <X>_A = sin(t_A) = -0.238773451

   ==> Run 3-point Fourier quadrature <==
  t = -0.241103, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.241103, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = 0.806095, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = 0.806095, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -1.288300, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.288300, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 1.1102230246251565e-16, b = -0.6912180276548995, c = 0.16996057197909598

  t_opt = -0.241102571
    <Z>_opt = cos(t_opt) = 0.971075301
    <X>_opt = sin(t_opt) = -0.238773451
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -0.241103, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.241103, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.9285399999999999
  <X> = -0.23147999999999996
  Energy = -1.1204744426382478

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9705359198201735
  <X> = -0.24320421793694413
  Energy = -1.1514954342924721
  measure Z: {'0': 98526.79599100868, '1': 1473.2040089913273})
  measure X: {'0': 37839.78910315279, '1': 62160.21089684721})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_8/0.8

   ==> (oq_map.json) Exact results for r = 0.8 <== 
evals = [-1.15111521  0.27249844]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.1511152082081149
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/0.85
c_z = -0.636488864
c_x = 0.169579229
c_0 = -0.489018448

  t_A = -0.260380693
    <Z>_A = cos(t_A) = 0.966292039
    <X>_A = sin(t_A) = -0.257448431

   ==> Run 3-point Fourier quadrature <==
  t = -0.260381, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.260381, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = 0.786817, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = 0.786817, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -1.307578, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.307578, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = -1.1102230246251565e-16, b = -0.6364888642400289, c = 0.1695792294651544

  t_opt = -0.260380693
    <Z>_opt = cos(t_opt) = 0.966292039
    <X>_opt = sin(t_opt) = -0.257448431
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -0.260381, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.260381, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.92482
  <X> = -0.24506
  Energy = -1.1192131654648723

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9666436478548093
  <X> = -0.25741310399136036
  Energy = -1.1479282814427125
  measure Z: {'0': 98332.18239274046, '1': 1667.8176072595354})
  measure X: {'0': 37129.34480043198, '1': 62870.65519956802})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_8/0.85

   ==> (oq_map.json) Exact results for r = 0.85 <== 
evals = [-1.14771048  0.16967358]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.147710477292962
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/1.15
c_z = -0.399295092
c_x = 0.169766330
c_0 = -0.672952709

  t_A = -0.402010464
    <Z>_A = cos(t_A) = 0.920276221
    <X>_A = sin(t_A) = -0.391269314

   ==> Run 3-point Fourier quadrature <==
  t = -0.402010, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.402010, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = 0.645187, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = 0.645187, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -1.449208, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.449208, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = -5.551115123125783e-17, b = -0.3992950916910411, c = 0.16976633007745248

  t_opt = -0.402010464
    <Z>_opt = cos(t_opt) = 0.920276221
    <X>_opt = sin(t_opt) = -0.391269314
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -0.402010, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.402010, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.8787400000000001
  <X> = -0.37528
  Energy = -1.0875391863013788

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9184296988786151
  <X> = -0.39366355875876413
  Energy = -1.1065079975585437
  measure Z: {'0': 95921.48494393074, '1': 4078.5150560692423})
  measure X: {'0': 30316.822062061787, '1': 69683.1779379382})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_8/1.15

   ==> (oq_map.json) Exact results for r = 1.15 <== 
evals = [-1.10683884 -0.23906658]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.1068388428457654
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/1.2
c_z = -0.371037374
c_x = 0.170213481
c_0 = -0.690922272

  t_A = -0.430106748
    <Z>_A = cos(t_A) = 0.908921244
    <X>_A = sin(t_A) = -0.416967830

   ==> Run 3-point Fourier quadrature <==
  t = -0.430107, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.430107, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = 0.617091, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = 0.617091, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -1.477304, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.477304, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = -5.551115123125783e-17, b = -0.3710373736142774, c = 0.17021348058116215

  t_opt = -0.430106748
    <Z>_opt = cos(t_opt) = 0.908921244
    <X>_opt = sin(t_opt) = -0.416967830
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -0.430107, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.430107, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.86978
  <X> = -0.39955999999999997
  Energy = -1.081653657077216

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9090547638816908
  <X> = -0.4190679473049228
  Energy = -1.0995465779269642
  measure Z: {'0': 95452.73819408455, '1': 4547.2618059154565})
  measure X: {'0': 29046.602634753857, '1': 70953.39736524614})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_8/1.2

   ==> (oq_map.json) Exact results for r = 1.2 <== 
evals = [-1.09913957 -0.28270497]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.099139568978659
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/1.3
c_z = -0.321395392
c_x = 0.171457744
c_0 = -0.719962104

  t_A = -0.490070852
    <Z>_A = cos(t_A) = 0.882299511
    <X>_A = sin(t_A) = -0.470688402

   ==> Run 3-point Fourier quadrature <==
  t = -0.490071, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.490071, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = 0.557127, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = 0.557127, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -1.537268, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.537268, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 5.551115123125783e-17, b = -0.32139539191852423, c = 0.1714577437790656

  t_opt = -0.490070852
    <Z>_opt = cos(t_opt) = 0.882299511
    <X>_opt = sin(t_opt) = -0.470688402
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -0.490071, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.490071, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.8446
  <X> = -0.44662
  Energy = -1.0679891090587375

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.8827086867319428
  <X> = -0.46830728013036854
  Energy = -1.083955517486308
  measure Z: {'0': 94135.43433659716, '1': 5864.565663402855})
  measure X: {'0': 26584.635993481577, '1': 73415.36400651843})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_8/1.3

   ==> (oq_map.json) Exact results for r = 1.3 <== 
evals = [-1.08423227 -0.35569193]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.0842322722775133
e_analytic - evals[0] = -0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/1.45
c_z = -0.260906520
c_x = 0.174167246
c_0 = -0.750292491

  t_A = -0.588611503
    <Z>_A = cos(t_A) = 0.831712383
    <X>_A = sin(t_A) = -0.555206729

   ==> Run 3-point Fourier quadrature <==
  t = -0.588612, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.588612, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = 0.458586, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = 0.458586, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -1.635809, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.635809, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = -5.551115123125783e-17, b = -0.26090651987639996, c = 0.1741672461701277

  t_opt = -0.588611503
    <Z>_opt = cos(t_opt) = 0.831712383
    <X>_opt = sin(t_opt) = -0.555206729
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -0.588612, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.588612, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.7955000000000001
  <X> = -0.52742
  Energy = -1.0497029161546951

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.8313348818522084
  <X> = -0.5528491014196262
  Energy = -1.063481387035774
  measure Z: {'0': 91566.74409261042, '1': 8433.25590738958})
  measure X: {'0': 22357.54492901869, '1': 77642.4550709813})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_8/1.45

   ==> (oq_map.json) Exact results for r = 1.45 <== 
evals = [-1.0639905  -0.43659448]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.0639905010555568
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/1.6
c_z = -0.213224929
c_x = 0.177807023
c_0 = -0.769382665

  t_A = -0.695069165
    <Z>_A = cos(t_A) = 0.768009407
    <X>_A = sin(t_A) = -0.640438561

   ==> Run 3-point Fourier quadrature <==
  t = -0.695069, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.695069, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = 0.352128, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = 0.352128, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -1.742267, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.742267, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 0.0, b = -0.21322492879091284, c = 0.17780702316230246

  t_opt = -0.695069165
    <Z>_opt = cos(t_opt) = 0.768009407
    <X>_opt = sin(t_opt) = -0.640438561
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -0.695069, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.695069, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.7340599999999999
  <X> = -0.6095999999999999
  Energy = -1.0342937177544096

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.7670496162931257
  <X> = -0.638834829308276
  Energy = -1.0465260843113133
  measure Z: {'0': 88352.48081465629, '1': 11647.519185343708})
  measure X: {'0': 18058.258534586203, '1': 81941.7414654138})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_8/1.6

   ==> (oq_map.json) Exact results for r = 1.6 <== 
evals = [-1.04701589 -0.49174944]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.0470158904222164
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/1.9
c_z = -0.144203901
c_x = 0.187268886
c_0 = -0.786868492

  t_A = -0.914594616
    <Z>_A = cos(t_A) = 0.610111817
    <X>_A = sin(t_A) = -0.792315323

   ==> Run 3-point Fourier quadrature <==
  t = -0.914595, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.914595, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = 0.132603, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = 0.132603, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -1.961792, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.961792, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 0.0, b = -0.1442039010759991, c = 0.18726888604283615

  t_opt = -0.914594616
    <Z>_opt = cos(t_opt) = 0.610111817
    <X>_opt = sin(t_opt) = -0.792315323
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -0.914595, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.914595, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.5860799999999999
  <X> = -0.7589999999999999
  Energy = -1.013520598559301

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.6122167063312891
  <X> = -0.7951534936187512
  Energy = -1.024060038050091
  measure Z: {'0': 80610.83531656447, '1': 19389.164683435545})
  measure X: {'0': 10242.325319062445, '1': 89757.67468093756})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_8/1.9

   ==> (oq_map.json) Exact results for r = 1.9 <== 
evals = [-1.023225   -0.55051198]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.0232250037111297
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/2.5
c_z = -0.066271102
c_x = 0.209148615
c_0 = -0.784992480

  t_A = -1.263943124
    <Z>_A = cos(t_A) = 0.302060331
    <X>_A = sin(t_A) = -0.953288811

   ==> Run 3-point Fourier quadrature <==
  t = -1.263943, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.263943, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -0.216746, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.216746, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -2.311141, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -2.311141, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = -3.122502256758253e-17, b = -0.0662711018357801, c = 0.20914861505223556

  t_opt = -1.263943124
    <Z>_opt = cos(t_opt) = 0.302060331
    <X>_opt = sin(t_opt) = -0.953288811
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -1.263943, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.263943, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.28552
  <X> = -0.9125399999999999
  Energy = -0.9947706826094693

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.29773788458921
  <X> = -0.9558038820987205
  Energy = -1.0046289563060293
  measure Z: {'0': 64886.8942294605, '1': 35113.1057705395})
  measure X: {'0': 2209.805895063982, '1': 97790.19410493602})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_8/2.5

   ==> (oq_map.json) Exact results for r = 2.5 <== 
evals = [-1.00438939 -0.56559557]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.0043893858738882
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/2.95
c_z = -0.036185839
c_x = 0.223454420
c_0 = -0.774745750

  t_A = -1.410251678
    <Z>_A = cos(t_A) = 0.159855875
    <X>_A = sin(t_A) = -0.987140364

   ==> Run 3-point Fourier quadrature <==
  t = -1.410252, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.410252, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -0.363054, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.363054, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -2.457449, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -2.457449, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = -2.42861286636753e-17, b = -0.036185838522596915, c = 0.22345441969595453

  t_opt = -1.410251678
    <Z>_opt = cos(t_opt) = 0.159855875
    <X>_opt = sin(t_opt) = -0.987140364
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -1.410252, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.410252, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.15456000000000003
  <X> = -0.9425600000000001
  Energy = -0.9909578315081911

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.16071316470749114
  <X> = -0.9872140854817327
  Energy = -1.0011586416910734
  measure Z: {'0': 58035.658235374554, '1': 41964.341764625446})
  measure X: {'0': 639.2957259133673, '1': 99360.70427408663})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_8/2.95

   ==> (oq_map.json) Exact results for r = 2.95 <== 
evals = [-1.00111115 -0.54838035]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.0011111466652745
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/6.0
c_z = -0.000371898
c_x = 0.268404889
c_0 = -0.731584011

  t_A = -1.569410743
    <Z>_A = cos(t_A) = 0.001385583
    <X>_A = sin(t_A) = -0.999999040

   ==> Run 3-point Fourier quadrature <==
  t = -1.569411, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.569411, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -0.522213, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.522213, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -2.616608, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -2.616608, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = -3.2965675274190115e-17, b = -0.00037189768093559935, c = 0.268404889371658

  t_opt = -1.569410743
    <Z>_opt = cos(t_opt) = 0.001385583
    <X>_opt = sin(t_opt) = -0.999999040
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -1.569411, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.569411, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = -0.003579999999999972
  <X> = -0.95566
  Energy = -0.9880864960033684

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = -0.00475024588277112
  <X> = -0.9999999999999983
  Energy = -0.9999871335863773
  measure Z: {'0': 49762.48770586144, '1': 50237.512294138556})
  measure X: {'0': 8.909301421611282e-11, '1': 99999.99999999991})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_8/6.0

   ==> (oq_map.json) Exact results for r = 6.0 <== 
evals = [-0.99998916 -0.46317886]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -0.9999891578395312
e_analytic - evals[0] = 0.000000000000



   ==> Run Calibration circuits <== 
n_shots       =     100000
Backend       =      qasm_simulator
Noise model   =      ibm_perth
NoiseModel:
  Basis gates: ['cx', 'id', 'reset', 'rz', 'sx', 'x']
  Instructions with noise: ['reset', 'sx', 'x', 'cx', 'measure', 'id']
  Qubits with noise: [0, 1, 2, 3, 4, 5, 6]
  Specific qubit errors: [('id', (0,)), ('id', (1,)), ('id', (2,)), ('id', (3,)), ('id', (4,)), ('id', (5,)), ('id', (6,)), ('sx', (0,)), ('sx', (1,)), ('sx', (2,)), ('sx', (3,)), ('sx', (4,)), ('sx', (5,)), ('sx', (6,)), ('x', (0,)), ('x', (1,)), ('x', (2,)), ('x', (3,)), ('x', (4,)), ('x', (5,)), ('x', (6,)), ('cx', (6, 5)), ('cx', (5, 6)), ('cx', (4, 5)), ('cx', (5, 4)), ('cx', (3, 5)), ('cx', (5, 3)), ('cx', (3, 1)), ('cx', (1, 3)), ('cx', (2, 1)), ('cx', (1, 2)), ('cx', (0, 1)), ('cx', (1, 0)), ('reset', (0,)), ('reset', (1,)), ('reset', (2,)), ('reset', (3,)), ('reset', (4,)), ('reset', (5,)), ('reset', (6,)), ('measure', (0,)), ('measure', (1,)), ('measure', (2,)), ('measure', (3,)), ('measure', (4,)), ('measure', (5,)), ('measure', (6,))]
Calibration matrix =
[[0.97848 0.02243]
 [0.02152 0.97757]]

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/0.6
c_z = -0.975331596
c_x = 0.172588132
c_0 = -0.140879461

  t_A = -0.175140281
    <Z>_A = cos(t_A) = 0.984702105
    <X>_A = sin(t_A) = -0.174246274

   ==> Run 3-point Fourier quadrature <==
  t = -0.175140, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.175140, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = 0.872057, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = 0.872057, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -1.222338, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.222338, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 2.220446049250313e-16, b = -0.9753315962732315, c = 0.17258813211389312

  t_opt = -0.175140281
    <Z>_opt = cos(t_opt) = 0.984702105
    <X>_opt = sin(t_opt) = -0.174246274
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -0.175140, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.175140, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.94232
  <X> = -0.16840000000000005
  Energy = -1.0890177726661174

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9846869940427727
  <X> = -0.17709325721738317
  Energy = -1.1318399936202872
  measure Z: {'0': 99234.34970213863, '1': 765.6502978613628})
  measure X: {'0': 41145.33713913084, '1': 58854.66286086915})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_9/0.6

   ==> (oq_map.json) Exact results for r = 0.6 <== 
evals = [-1.13136338  0.84960445]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.131363376499586
e_analytic - evals[0] = -0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/0.65
c_z = -0.893017040
c_x = 0.171773983
c_0 = -0.234423207

  t_A = -0.190031414
    <Z>_A = cos(t_A) = 0.981998302
    <X>_A = sin(t_A) = -0.188889744

   ==> Run 3-point Fourier quadrature <==
  t = -0.190031, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.190031, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = 0.857166, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = 0.857166, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -1.237229, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.237229, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 0.0, b = -0.8930170404711618, c = 0.17177398346406272

  t_opt = -0.190031414
    <Z>_opt = cos(t_opt) = 0.981998302
    <X>_opt = sin(t_opt) = -0.188889744
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -0.190031, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.190031, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.9388000000000001
  <X> = -0.17911999999999995
  Energy = -1.1035557606902062

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.981005176788534
  <X> = -0.18830605133960082
  Energy = -1.1428236273893737
  measure Z: {'0': 99050.25883942672, '1': 949.7411605732852})
  measure X: {'0': 40584.69743301997, '1': 59415.30256698004})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_9/0.65

   ==> (oq_map.json) Exact results for r = 0.65 <== 
evals = [-1.14381077  0.67496435]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.1438107681038217
e_analytic - evals[0] = -0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/0.7
c_z = -0.818749229
c_x = 0.171060688
c_0 = -0.313783336

  t_A = -0.205966480
    <Z>_A = cos(t_A) = 0.978863784
    <X>_A = sin(t_A) = -0.204513307

   ==> Run 3-point Fourier quadrature <==
  t = -0.205966, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.205966, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = 0.841231, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = 0.841231, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -1.253164, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.253164, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 1.1102230246251565e-16, b = -0.8187492286324077, c = 0.1710606880831236

  t_opt = -0.205966480
    <Z>_opt = cos(t_opt) = 0.978863784
    <X>_opt = sin(t_opt) = -0.204513307
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -0.205966, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.205966, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.93634
  <X> = -0.19693999999999995
  Energy = -1.1140996809495691

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9784320903718641
  <X> = -0.20694524746586568
  Energy = -1.1502740519890113
  measure Z: {'0': 98921.6045185932, '1': 1078.3954814067934})
  measure X: {'0': 39652.737626706716, '1': 60347.262373293284})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_9/0.7

   ==> (oq_map.json) Exact results for r = 0.7 <== 
evals = [-1.15021149  0.52264482]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.1502114912511527
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/0.75
c_z = -0.751762455
c_x = 0.170457573
c_0 = -0.381398162

  t_A = -0.222973719
    <Z>_A = cos(t_A) = 0.975244182
    <X>_A = sin(t_A) = -0.221130698

   ==> Run 3-point Fourier quadrature <==
  t = -0.222974, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.222974, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = 0.824224, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = 0.824224, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -1.270171, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.270171, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 0.0, b = -0.7517624545623149, c = 0.17045757337561962

  t_opt = -0.222973719
    <Z>_opt = cos(t_opt) = 0.975244182
    <X>_opt = sin(t_opt) = -0.221130698
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -0.222974, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.222974, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.9341600000000001
  <X> = -0.21199999999999997
  Energy = -1.1198015820014509

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9761518749019631
  <X> = -0.22269755754953474
  Energy = -1.153192976650364
  measure Z: {'0': 98807.59374509816, '1': 1192.4062549018402})
  measure X: {'0': 38865.122122523266, '1': 61134.877877476734})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_9/0.75

   ==> (oq_map.json) Exact results for r = 0.75 <== 
evals = [-1.15224352  0.3894472 ]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.1522435240824251
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/0.8
c_z = -0.691218028
c_x = 0.169960572
c_0 = -0.439308382

  t_A = -0.241102571
    <Z>_A = cos(t_A) = 0.971075301
    <X>_A = sin(t_A) = -0.238773451

   ==> Run 3-point Fourier quadrature <==
  t = -0.241103, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.241103, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = 0.806095, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = 0.806095, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -1.288300, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.288300, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 0.0, b = -0.6912180276548994, c = 0.16996057197909595

  t_opt = -0.241102571
    <Z>_opt = cos(t_opt) = 0.971075301
    <X>_opt = sin(t_opt) = -0.238773451
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -0.241103, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.241103, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.9299999999999999
  <X> = -0.23024
  Energy = -1.12127286984937

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9718006363240497
  <X> = -0.24177605776708727
  Energy = -1.1521268982204773
  measure Z: {'0': 98590.03181620248, '1': 1409.9681837975204})
  measure X: {'0': 37911.19711164563, '1': 62088.80288835437})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_9/0.8

   ==> (oq_map.json) Exact results for r = 0.8 <== 
evals = [-1.15111521  0.27249844]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.1511152082081149
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/0.85
c_z = -0.636488864
c_x = 0.169579229
c_0 = -0.489018448

  t_A = -0.260380693
    <Z>_A = cos(t_A) = 0.966292039
    <X>_A = sin(t_A) = -0.257448431

   ==> Run 3-point Fourier quadrature <==
  t = -0.260381, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.260381, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = 0.786817, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = 0.786817, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -1.307578, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.307578, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 1.1102230246251565e-16, b = -0.6364888642400292, c = 0.16957922946515444

  t_opt = -0.260380693
    <Z>_opt = cos(t_opt) = 0.966292039
    <X>_opt = sin(t_opt) = -0.257448431
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -0.260381, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.260381, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.92502
  <X> = -0.24435999999999997
  Energy = -1.1192217577770947

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9665917054547899
  <X> = -0.25654516052783083
  Energy = -1.1477480354997538
  measure Z: {'0': 98329.5852727395, '1': 1670.414727260506})
  measure X: {'0': 37172.741973608456, '1': 62827.258026391544})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_9/0.85

   ==> (oq_map.json) Exact results for r = 0.85 <== 
evals = [-1.14771048  0.16967358]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.147710477292962
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/1.15
c_z = -0.399295092
c_x = 0.169766330
c_0 = -0.672952709

  t_A = -0.402010464
    <Z>_A = cos(t_A) = 0.920276221
    <X>_A = sin(t_A) = -0.391269314

   ==> Run 3-point Fourier quadrature <==
  t = -0.402010, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.402010, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = 0.645187, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = 0.645187, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -1.449208, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.449208, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = -1.1102230246251565e-16, b = -0.399295091691041, c = 0.16976633007745245

  t_opt = -0.402010464
    <Z>_opt = cos(t_opt) = 0.920276221
    <X>_opt = sin(t_opt) = -0.391269314
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -0.402010, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.402010, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.8813599999999999
  <X> = -0.37636000000000003
  Energy = -1.0887686870780928

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9209246378322342
  <X> = -0.3946132565091623
  Energy = -1.1076654411385605
  measure Z: {'0': 96046.2318916117, '1': 3953.7681083882953})
  measure X: {'0': 30269.337174541877, '1': 69730.66282545812})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_9/1.15

   ==> (oq_map.json) Exact results for r = 1.15 <== 
evals = [-1.10683884 -0.23906658]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.1068388428457654
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/1.2
c_z = -0.371037374
c_x = 0.170213481
c_0 = -0.690922272

  t_A = -0.430106748
    <Z>_A = cos(t_A) = 0.908921244
    <X>_A = sin(t_A) = -0.416967830

   ==> Run 3-point Fourier quadrature <==
  t = -0.430107, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.430107, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = 0.617091, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = 0.617091, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -1.477304, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.477304, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = -5.551115123125783e-17, b = -0.37103737361427735, c = 0.17021348058116215

  t_opt = -0.430106748
    <Z>_opt = cos(t_opt) = 0.908921244
    <X>_opt = sin(t_opt) = -0.416967830
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -0.430107, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.430107, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.86904
  <X> = -0.40262
  Energy = -1.0818999426713196

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9080382825123705
  <X> = -0.42208043515005167
  Energy = -1.0996821913906913
  measure Z: {'0': 95401.91412561851, '1': 4598.085874381485})
  measure X: {'0': 28895.978242497415, '1': 71104.02175750257})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_9/1.2

   ==> (oq_map.json) Exact results for r = 1.2 <== 
evals = [-1.09913957 -0.28270497]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.099139568978659
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/1.3
c_z = -0.321395392
c_x = 0.171457744
c_0 = -0.719962104

  t_A = -0.490070852
    <Z>_A = cos(t_A) = 0.882299511
    <X>_A = sin(t_A) = -0.470688402

   ==> Run 3-point Fourier quadrature <==
  t = -0.490071, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.490071, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = 0.557127, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = 0.557127, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -1.537268, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.537268, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 0.0, b = -0.3213953919185242, c = 0.1714577437790655

  t_opt = -0.490070852
    <Z>_opt = cos(t_opt) = 0.882299511
    <X>_opt = sin(t_opt) = -0.470688402
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -0.490071, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.490071, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.8459000000000001
  <X> = -0.45152
  Energy = -1.069247066012749

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.8838345274840691
  <X> = -0.47322838766159925
  Energy = -1.0851611195102746
  measure Z: {'0': 94191.72637420346, '1': 5808.273625796549})
  measure X: {'0': 26338.580616920037, '1': 73661.41938307996})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_9/1.3

   ==> (oq_map.json) Exact results for r = 1.3 <== 
evals = [-1.08423227 -0.35569193]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.0842322722775133
e_analytic - evals[0] = -0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/1.45
c_z = -0.260906520
c_x = 0.174167246
c_0 = -0.750292491

  t_A = -0.588611503
    <Z>_A = cos(t_A) = 0.831712383
    <X>_A = sin(t_A) = -0.555206729

   ==> Run 3-point Fourier quadrature <==
  t = -0.588612, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.588612, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = 0.458586, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = 0.458586, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -1.635809, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.635809, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 2.7755575615628914e-17, b = -0.26090651987640007, c = 0.17416724617012774

  t_opt = -0.588611503
    <Z>_opt = cos(t_opt) = 0.831712383
    <X>_opt = sin(t_opt) = -0.555206729
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -0.588612, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.588612, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.7959
  <X> = -0.5236799999999999
  Energy = -1.0491558932619696

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.8315360078552687
  <X> = -0.5487056075300123
  Energy = -1.0628122012010124
  measure Z: {'0': 91576.80039276344, '1': 8423.199607236565})
  measure X: {'0': 22564.71962349939, '1': 77435.28037650061})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_9/1.45

   ==> (oq_map.json) Exact results for r = 1.45 <== 
evals = [-1.0639905  -0.43659448]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.0639905010555568
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/1.6
c_z = -0.213224929
c_x = 0.177807023
c_0 = -0.769382665

  t_A = -0.695069165
    <Z>_A = cos(t_A) = 0.768009407
    <X>_A = sin(t_A) = -0.640438561

   ==> Run 3-point Fourier quadrature <==
  t = -0.695069, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.695069, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = 0.352128, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = 0.352128, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -1.742267, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.742267, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = -2.7755575615628914e-17, b = -0.21322492879091284, c = 0.17780702316230246

  t_opt = -0.695069165
    <Z>_opt = cos(t_opt) = 0.768009407
    <X>_opt = sin(t_opt) = -0.640438561
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -0.695069, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.695069, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.7360199999999999
  <X> = -0.61652
  Energy = -1.0359420632151228

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.7689033000357234
  <X> = -0.6458135034040163
  Energy = -1.0481621931619132
  measure Z: {'0': 88445.16500178617, '1': 11554.834998213828})
  measure X: {'0': 17709.324829799185, '1': 82290.6751702008})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_9/1.6

   ==> (oq_map.json) Exact results for r = 1.6 <== 
evals = [-1.04701589 -0.49174944]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.0470158904222164
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/1.9
c_z = -0.144203901
c_x = 0.187268886
c_0 = -0.786868492

  t_A = -0.914594616
    <Z>_A = cos(t_A) = 0.610111817
    <X>_A = sin(t_A) = -0.792315323

   ==> Run 3-point Fourier quadrature <==
  t = -0.914595, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.914595, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = 0.132603, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = 0.132603, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -1.961792, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.961792, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = -4.163336342344337e-17, b = -0.1442039010759991, c = 0.18726888604283615

  t_opt = -0.914594616
    <Z>_opt = cos(t_opt) = 0.610111817
    <X>_opt = sin(t_opt) = -0.792315323
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -0.914595, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.914595, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.5869200000000001
  <X> = -0.7580199999999999
  Energy = -1.013458206327883

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.6129491138335629
  <X> = -0.7938183149232286
  Energy = -1.0239156166421175
  measure Z: {'0': 80647.45569167814, '1': 19352.544308321856})
  measure X: {'0': 10309.08425383857, '1': 89690.91574616144})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_9/1.9

   ==> (oq_map.json) Exact results for r = 1.9 <== 
evals = [-1.023225   -0.55051198]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.0232250037111297
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/2.5
c_z = -0.066271102
c_x = 0.209148615
c_0 = -0.784992480

  t_A = -1.263943124
    <Z>_A = cos(t_A) = 0.302060331
    <X>_A = sin(t_A) = -0.953288811

   ==> Run 3-point Fourier quadrature <==
  t = -1.263943, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.263943, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -0.216746, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.216746, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -2.311141, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -2.311141, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = -3.122502256758253e-17, b = -0.0662711018357801, c = 0.20914861505223556

  t_opt = -1.263943124
    <Z>_opt = cos(t_opt) = 0.302060331
    <X>_opt = sin(t_opt) = -0.953288811
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -1.263943, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.263943, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.28381999999999996
  <X> = -0.91056
  Energy = -0.9942439074785451

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.2959154855752887
  <X> = -0.953370639824944
  Energy = -1.0039992746637454
  measure Z: {'0': 64795.77427876443, '1': 35204.22572123556})
  measure X: {'0': 2331.4680087527986, '1': 97668.5319912472})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_9/2.5

   ==> (oq_map.json) Exact results for r = 2.5 <== 
evals = [-1.00438939 -0.56559557]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.0043893858738882
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/2.95
c_z = -0.036185839
c_x = 0.223454420
c_0 = -0.774745750

  t_A = -1.410251678
    <Z>_A = cos(t_A) = 0.159855875
    <X>_A = sin(t_A) = -0.987140364

   ==> Run 3-point Fourier quadrature <==
  t = -1.410252, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.410252, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -0.363054, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.363054, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -2.457449, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -2.457449, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 1.9949319973733282e-17, b = -0.03618583852259693, c = 0.2234544196959546

  t_opt = -1.410251678
    <Z>_opt = cos(t_opt) = 0.159855875
    <X>_opt = sin(t_opt) = -0.987140364
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -1.410252, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.410252, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.1507
  <X> = -0.94312
  Energy = -0.9909432886465235

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.1566759060710834
  <X> = -0.9874274419540432
  Energy = -1.001060225548691
  measure Z: {'0': 57833.79530355417, '1': 42166.20469644583})
  measure X: {'0': 628.6279022978365, '1': 99371.37209770217})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_9/2.95

   ==> (oq_map.json) Exact results for r = 2.95 <== 
evals = [-1.00111115 -0.54838035]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.0011111466652745
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/6.0
c_z = -0.000371898
c_x = 0.268404889
c_0 = -0.731584011

  t_A = -1.569410743
    <Z>_A = cos(t_A) = 0.001385583
    <X>_A = sin(t_A) = -0.999999040

   ==> Run 3-point Fourier quadrature <==
  t = -1.569411, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.569411, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -0.522213, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -0.522213, run on qasm_simulator ibm_perth, measure X 100000 shots.
  t = -2.616608, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -2.616608, run on qasm_simulator ibm_perth, measure X 100000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = -3.002112405173815e-17, b = -0.0003718976809356017, c = 0.268404889371658

  t_opt = -1.569410743
    <Z>_opt = cos(t_opt) = 0.001385583
    <X>_opt = sin(t_opt) = -0.999999040
   === End 3-point Fourier quadrature ===
Measure Z, X on circuit parametrized by t_opt:
  t = -1.569411, run on qasm_simulator ibm_perth, measure Z 100000 shots.
  t = -1.569411, run on qasm_simulator ibm_perth, measure X 100000 shots.

Estimate expectations from counts:
  <Z> = 0.005120000000000013
  <X> = -0.95532
  Energy = -0.9879984738508061

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.004403538528028772
  <X> = -1.0
  Energy = -0.999990537857572
  measure Z: {'0': 50220.17692640144, '1': 49779.823073598556})
  measure X: {'0': 1.8204092747109435e-12, '1': 100000.0})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_perth_9/6.0

   ==> (oq_map.json) Exact results for r = 6.0 <== 
evals = [-0.99998916 -0.46317886]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -0.9999891578395312
e_analytic - evals[0] = 0.000000000000


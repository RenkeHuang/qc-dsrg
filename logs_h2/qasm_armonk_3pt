
Set-0

   ==> Run Calibration circuits <== 
n_shots       =      20000
Backend       =      qasm_simulator
Noise model   =      ibmq_armonk
NoiseModel:
  Basis gates: ['id', 'rz', 'sx', 'x']
  Instructions with noise: ['measure', 'sx', 'id', 'x']
  Qubits with noise: [0]
  Specific qubit errors: [('id', (0,)), ('sx', (0,)), ('x', (0,)), ('measure', (0,))]
Calibration matrix =
[[0.9535 0.0381]
 [0.0465 0.9619]]

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/0.6
c_z = -0.975331596
c_x = 0.172588132
c_0 = -0.140879461

  t_A = -0.175140281
    <Z>_A = cos(t_A) = 0.984702105
    <X>_A = sin(t_A) = -0.174246274

   ==> Run 3-point Fourier quadrature <==
  t = -0.175140, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.175140, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = 0.872057, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = 0.872057, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -1.222338, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.222338, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = -1.1102230246251565e-16, b = -0.9753315962732312, c = 0.17258813211389307

  t_opt = -0.175140281
    <Z>_opt = cos(t_opt) = 0.984702105
    <X>_opt = sin(t_opt) = -0.174246274
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -0.175140, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.175140, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = 0.9003000000000001
  <X> = -0.16219999999999996
  Energy = -1.0469642925716103

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9926807952807564
  <X> = -0.16801398329851924
  Energy = -1.1380696256154137
  measure Z: {'0': 19926.807952807565, '1': 73.19204719243506})
  measure X: {'0': 8319.860167014807, '1': 11680.139832985193})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_0/0.6

   ==> (oq_map.json) Exact results for r = 0.6 <== 
evals = [-1.13136338  0.84960445]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.131363376499586
e_analytic - evals[0] = -0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/0.65
c_z = -0.893017040
c_x = 0.171773983
c_0 = -0.234423207

  t_A = -0.190031414
    <Z>_A = cos(t_A) = 0.981998302
    <X>_A = sin(t_A) = -0.188889744

   ==> Run 3-point Fourier quadrature <==
  t = -0.190031, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.190031, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = 0.857166, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = 0.857166, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -1.237229, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.237229, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 0.0, b = -0.8930170404711618, c = 0.17177398346406275

  t_opt = -0.190031414
    <Z>_opt = cos(t_opt) = 0.981998302
    <X>_opt = sin(t_opt) = -0.188889744
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -0.190031, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.190031, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = 0.8858999999999999
  <X> = -0.17009999999999997
  Energy = -1.0547657579184357

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.976949940263381
  <X> = -0.17664409001322434
  Energy = -1.1371990105172354
  measure Z: {'0': 19769.49940263381, '1': 230.50059736619184})
  measure X: {'0': 8233.559099867758, '1': 11766.440900132244})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_0/0.65

   ==> (oq_map.json) Exact results for r = 0.65 <== 
evals = [-1.14381077  0.67496435]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.1438107681038217
e_analytic - evals[0] = -0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/0.7
c_z = -0.818749229
c_x = 0.171060688
c_0 = -0.313783336

  t_A = -0.205966480
    <Z>_A = cos(t_A) = 0.978863784
    <X>_A = sin(t_A) = -0.204513307

   ==> Run 3-point Fourier quadrature <==
  t = -0.205966, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.205966, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = 0.841231, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = 0.841231, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -1.253164, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.253164, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 0.0, b = -0.8187492286324076, c = 0.1710606880831237

  t_opt = -0.205966480
    <Z>_opt = cos(t_opt) = 0.978863784
    <X>_opt = sin(t_opt) = -0.204513307
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -0.205966, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.205966, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = 0.8884000000000001
  <X> = -0.1881
  Energy = -1.0733366664462767

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9796810138571519
  <X> = -0.1963076251321602
  Energy = -1.1494769281332395
  measure Z: {'0': 19796.810138571516, '1': 203.18986142848104})
  measure X: {'0': 8036.923748678397, '1': 11963.076251321601})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_0/0.7

   ==> (oq_map.json) Exact results for r = 0.7 <== 
evals = [-1.15021149  0.52264482]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.1502114912511527
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/0.75
c_z = -0.751762455
c_x = 0.170457573
c_0 = -0.381398162

  t_A = -0.222973719
    <Z>_A = cos(t_A) = 0.975244182
    <X>_A = sin(t_A) = -0.221130698

   ==> Run 3-point Fourier quadrature <==
  t = -0.222974, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.222974, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = 0.824224, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = 0.824224, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -1.270171, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.270171, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 1.1102230246251565e-16, b = -0.751762454562315, c = 0.1704575733756196

  t_opt = -0.222973719
    <Z>_opt = cos(t_opt) = 0.975244182
    <X>_opt = sin(t_opt) = -0.221130698
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -0.222974, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.222974, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = 0.8831
  <X> = -0.21409999999999996
  Energy = -1.0817745519755877

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9738911951057244
  <X> = -0.2247105090666005
  Energy = -1.1518366052886861
  measure Z: {'0': 19738.911951057245, '1': 261.0880489427546})
  measure X: {'0': 7752.894909333996, '1': 12247.105090666006})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_0/0.75

   ==> (oq_map.json) Exact results for r = 0.75 <== 
evals = [-1.15224352  0.3894472 ]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.1522435240824251
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/0.8
c_z = -0.691218028
c_x = 0.169960572
c_0 = -0.439308382

  t_A = -0.241102571
    <Z>_A = cos(t_A) = 0.971075301
    <X>_A = sin(t_A) = -0.238773451

   ==> Run 3-point Fourier quadrature <==
  t = -0.241103, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.241103, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = 0.806095, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = 0.806095, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -1.288300, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.288300, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = -1.1102230246251565e-16, b = -0.6912180276548993, c = 0.16996057197909595

  t_opt = -0.241102571
    <Z>_opt = cos(t_opt) = 0.971075301
    <X>_opt = sin(t_opt) = -0.238773451
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -0.241103, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.241103, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = 0.8813
  <X> = -0.22859999999999997
  Energy = -1.0873318165645305

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9719248196463901
  <X> = -0.2405505789859571
  Energy = -1.1520044528970241
  measure Z: {'0': 19719.2481964639, '1': 280.7518035360973})
  measure X: {'0': 7594.49421014043, '1': 12405.505789859571})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_0/0.8

   ==> (oq_map.json) Exact results for r = 0.8 <== 
evals = [-1.15111521  0.27249844]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.1511152082081149
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/0.85
c_z = -0.636488864
c_x = 0.169579229
c_0 = -0.489018448

  t_A = -0.260380693
    <Z>_A = cos(t_A) = 0.966292039
    <X>_A = sin(t_A) = -0.257448431

   ==> Run 3-point Fourier quadrature <==
  t = -0.260381, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.260381, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = 0.786817, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = 0.786817, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -1.307578, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.307578, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 0.0, b = -0.636488864240029, c = 0.16957922946515444

  t_opt = -0.260380693
    <Z>_opt = cos(t_opt) = 0.966292039
    <X>_opt = sin(t_opt) = -0.257448431
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -0.260381, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.260381, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = 0.8771
  <X> = -0.26489999999999997
  Energy = -1.0922043687759269

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9673367055250863
  <X> = -0.2802053747397179
  Energy = -1.1522345006433876
  measure Z: {'0': 19673.367055250863, '1': 326.63294474913704})
  measure X: {'0': 7197.946252602821, '1': 12802.05374739718})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_0/0.85

   ==> (oq_map.json) Exact results for r = 0.85 <== 
evals = [-1.14771048  0.16967358]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.147710477292962
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/1.15
c_z = -0.399295092
c_x = 0.169766330
c_0 = -0.672952709

  t_A = -0.402010464
    <Z>_A = cos(t_A) = 0.920276221
    <X>_A = sin(t_A) = -0.391269314

   ==> Run 3-point Fourier quadrature <==
  t = -0.402010, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.402010, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = 0.645187, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = 0.645187, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -1.449208, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.449208, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 0.0, b = -0.39929509169104116, c = 0.1697663300774525

  t_opt = -0.402010464
    <Z>_opt = cos(t_opt) = 0.920276221
    <X>_opt = sin(t_opt) = -0.391269314
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -0.402010, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.402010, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = 0.8333999999999999
  <X> = -0.3687
  Energy = -1.068318084392197

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9195979899513862
  <X> = -0.3935984269189311
  Energy = -1.106963433256148
  measure Z: {'0': 19195.979899513863, '1': 804.020100486136})
  measure X: {'0': 6064.015730810689, '1': 13935.98426918931})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_0/1.15

   ==> (oq_map.json) Exact results for r = 1.15 <== 
evals = [-1.10683884 -0.23906658]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.1068388428457654
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/1.2
c_z = -0.371037374
c_x = 0.170213481
c_0 = -0.690922272

  t_A = -0.430106748
    <Z>_A = cos(t_A) = 0.908921244
    <X>_A = sin(t_A) = -0.416967830

   ==> Run 3-point Fourier quadrature <==
  t = -0.430107, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.430107, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = 0.617091, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = 0.617091, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -1.477304, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.477304, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 0.0, b = -0.3710373736142774, c = 0.17021348058116215

  t_opt = -0.430106748
    <Z>_opt = cos(t_opt) = 0.908921244
    <X>_opt = sin(t_opt) = -0.416967830
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -0.430107, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.430107, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = 0.8203
  <X> = -0.3838
  Energy = -1.0606121633768222

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9052873060940176
  <X> = -0.41009394772674906
  Energy = -1.0966212145812884
  measure Z: {'0': 19052.873060940175, '1': 947.1269390598244})
  measure X: {'0': 5899.06052273251, '1': 14100.939477267491})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_0/1.2

   ==> (oq_map.json) Exact results for r = 1.2 <== 
evals = [-1.09913957 -0.28270497]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.099139568978659
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/1.3
c_z = -0.321395392
c_x = 0.171457744
c_0 = -0.719962104

  t_A = -0.490070852
    <Z>_A = cos(t_A) = 0.882299511
    <X>_A = sin(t_A) = -0.470688402

   ==> Run 3-point Fourier quadrature <==
  t = -0.490071, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.490071, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = 0.557127, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = 0.557127, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -1.537268, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.537268, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 0.0, b = -0.32139539191852423, c = 0.17145774377906559

  t_opt = -0.490070852
    <Z>_opt = cos(t_opt) = 0.882299511
    <X>_opt = sin(t_opt) = -0.470688402
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -0.490071, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.490071, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = 0.798
  <X> = -0.43979999999999997
  Energy = -1.0518427419827612

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.8809263715174053
  <X> = -0.47126939057953443
  Energy = -1.083890566363848
  measure Z: {'0': 18809.263715174053, '1': 1190.7362848259463})
  measure X: {'0': 5287.306094204657, '1': 14712.693905795344})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_0/1.3

   ==> (oq_map.json) Exact results for r = 1.3 <== 
evals = [-1.08423227 -0.35569193]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.0842322722775133
e_analytic - evals[0] = -0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/1.45
c_z = -0.260906520
c_x = 0.174167246
c_0 = -0.750292491

  t_A = -0.588611503
    <Z>_A = cos(t_A) = 0.831712383
    <X>_A = sin(t_A) = -0.555206729

   ==> Run 3-point Fourier quadrature <==
  t = -0.588612, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.588612, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = 0.458586, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = 0.458586, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -1.635809, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.635809, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 2.7755575615628914e-17, b = -0.26090651987640007, c = 0.17416724617012772

  t_opt = -0.588611503
    <Z>_opt = cos(t_opt) = 0.831712383
    <X>_opt = sin(t_opt) = -0.555206729
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -0.588612, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.588612, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = 0.7474000000000001
  <X> = -0.5234000000000001
  Energy = -1.0364531602190366

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.8256499898247249
  <X> = -0.5625955866110155
  Energy = -1.0636956801266324
  measure Z: {'0': 18256.499898247253, '1': 1743.5001017527486})
  measure X: {'0': 4374.0441338898445, '1': 15625.955866110158})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_0/1.45

   ==> (oq_map.json) Exact results for r = 1.45 <== 
evals = [-1.0639905  -0.43659448]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.0639905010555568
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/1.6
c_z = -0.213224929
c_x = 0.177807023
c_0 = -0.769382665

  t_A = -0.695069165
    <Z>_A = cos(t_A) = 0.768009407
    <X>_A = sin(t_A) = -0.640438561

   ==> Run 3-point Fourier quadrature <==
  t = -0.695069, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.695069, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = 0.352128, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = 0.352128, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -1.742267, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.742267, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = -2.7755575615628914e-17, b = -0.21322492879091284, c = 0.17780702316230246

  t_opt = -0.695069165
    <Z>_opt = cos(t_opt) = 0.768009407
    <X>_opt = sin(t_opt) = -0.640438561
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -0.695069, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.695069, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = 0.6921999999999999
  <X> = -0.5876999999999999
  Energy = -1.0214741484279675

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.7653484816528904
  <X> = -0.6328381033580055
  Energy = -1.0450971000088476
  measure Z: {'0': 17653.484816528904, '1': 2346.5151834710955})
  measure X: {'0': 3671.6189664199437, '1': 16328.381033580055})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_0/1.6

   ==> (oq_map.json) Exact results for r = 1.6 <== 
evals = [-1.04701589 -0.49174944]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.0470158904222164
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/1.9
c_z = -0.144203901
c_x = 0.187268886
c_0 = -0.786868492

  t_A = -0.914594616
    <Z>_A = cos(t_A) = 0.610111817
    <X>_A = sin(t_A) = -0.792315323

   ==> Run 3-point Fourier quadrature <==
  t = -0.914595, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.914595, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = 0.132603, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = 0.132603, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -1.961792, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.961792, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = -1.3877787807814457e-17, b = -0.14420390107599912, c = 0.18726888604283615

  t_opt = -0.914594616
    <Z>_opt = cos(t_opt) = 0.610111817
    <X>_opt = sin(t_opt) = -0.792315323
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -0.914595, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.914595, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = 0.5382
  <X> = -0.7286999999999999
  Energy = -1.0009418685286842

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.5971160148428181
  <X> = -0.7868691292729353
  Energy = -1.0203310557458944
  measure Z: {'0': 15971.16014842818, '1': 4028.839851571819})
  measure X: {'0': 2131.3087072706476, '1': 17868.691292729352})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_0/1.9

   ==> (oq_map.json) Exact results for r = 1.9 <== 
evals = [-1.023225   -0.55051198]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.0232250037111297
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/2.5
c_z = -0.066271102
c_x = 0.209148615
c_0 = -0.784992480

  t_A = -1.263943124
    <Z>_A = cos(t_A) = 0.302060331
    <X>_A = sin(t_A) = -0.953288811

   ==> Run 3-point Fourier quadrature <==
  t = -1.263943, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.263943, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -0.216746, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.216746, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -2.311141, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -2.311141, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 4.5102810375396984e-17, b = -0.0662711018357801, c = 0.20914861505223564

  t_opt = -1.263943124
    <Z>_opt = cos(t_opt) = 0.302060331
    <X>_opt = sin(t_opt) = -0.953288811
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -1.263943, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.263943, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = 0.2704
  <X> = -0.8798999999999999
  Energy = -0.9869420527544073

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.30456630997474327
  <X> = -0.9520428228101316
  Energy = -1.0042948632387942
  measure Z: {'0': 13045.663099747433, '1': 6954.336900252569})
  measure X: {'0': 479.57177189868446, '1': 19520.428228101315})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_0/2.5

   ==> (oq_map.json) Exact results for r = 2.5 <== 
evals = [-1.00438939 -0.56559557]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.0043893858738882
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/2.95
c_z = -0.036185839
c_x = 0.223454420
c_0 = -0.774745750

  t_A = -1.410251678
    <Z>_A = cos(t_A) = 0.159855875
    <X>_A = sin(t_A) = -0.987140364

   ==> Run 3-point Fourier quadrature <==
  t = -1.410252, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.410252, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -0.363054, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.363054, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -2.457449, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -2.457449, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = -2.2551405187698492e-17, b = -0.03618583852259693, c = 0.22345441969595453

  t_opt = -1.410251678
    <Z>_opt = cos(t_opt) = 0.159855875
    <X>_opt = sin(t_opt) = -0.987140364
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -1.410252, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.410252, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = 0.1285
  <X> = -0.9125000000000001
  Energy = -0.9832977887002318

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.14955210836709532
  <X> = -0.9876556699019896
  Energy = -1.0008534434989735
  measure Z: {'0': 11495.521083670954, '1': 8504.478916329048})
  measure X: {'0': 123.44330098010371, '1': 19876.556699019897})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_0/2.95

   ==> (oq_map.json) Exact results for r = 2.95 <== 
evals = [-1.00111115 -0.54838035]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.0011111466652745
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/6.0
c_z = -0.000371898
c_x = 0.268404889
c_0 = -0.731584011

  t_A = -1.569410743
    <Z>_A = cos(t_A) = 0.001385583
    <X>_A = sin(t_A) = -0.999999040

   ==> Run 3-point Fourier quadrature <==
  t = -1.569411, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.569411, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -0.522213, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.522213, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -2.616608, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -2.616608, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 2.997871946481623e-17, b = -0.00037189768093557983, c = 0.26840488937165813

  t_opt = -1.569410743
    <Z>_opt = cos(t_opt) = 0.001385583
    <X>_opt = sin(t_opt) = -0.999999040
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -1.569411, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.569411, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = -0.00940000000000002
  <X> = -0.9219999999999999
  Energy = -0.9790498229826152

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = -0.0010924220689524922
  <X> = -0.9980336444926039
  Energy = -0.9994607144901434
  measure Z: {'0': 9989.075779310477, '1': 10010.924220689525})
  measure X: {'0': 19.663555073960623, '1': 19980.33644492604})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_0/6.0

   ==> (oq_map.json) Exact results for r = 6.0 <== 
evals = [-0.99998916 -0.46317886]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -0.9999891578395312
e_analytic - evals[0] = 0.000000000000


Set-1

   ==> Run Calibration circuits <== 
n_shots       =      20000
Backend       =      qasm_simulator
Noise model   =      ibmq_armonk
NoiseModel:
  Basis gates: ['id', 'rz', 'sx', 'x']
  Instructions with noise: ['measure', 'sx', 'id', 'x']
  Qubits with noise: [0]
  Specific qubit errors: [('id', (0,)), ('sx', (0,)), ('x', (0,)), ('measure', (0,))]
Calibration matrix =
[[0.9498  0.03745]
 [0.0502  0.96255]]

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/0.6
c_z = -0.975331596
c_x = 0.172588132
c_0 = -0.140879461

  t_A = -0.175140281
    <Z>_A = cos(t_A) = 0.984702105
    <X>_A = sin(t_A) = -0.174246274

   ==> Run 3-point Fourier quadrature <==
  t = -0.175140, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.175140, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = 0.872057, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = 0.872057, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -1.222338, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.222338, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = -1.1102230246251565e-16, b = -0.9753315962732312, c = 0.1725881321138931

  t_opt = -0.175140281
    <Z>_opt = cos(t_opt) = 0.984702105
    <X>_opt = sin(t_opt) = -0.174246274
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -0.175140, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.175140, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = 0.889
  <X> = -0.17050000000000004
  Energy = -1.037375527030268

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9883816517784891
  <X> = -0.17290513613035385
  Energy = -1.1347206900518696
  measure Z: {'0': 19883.816517784893, '1': 116.18348221510705})
  measure X: {'0': 8270.948638696462, '1': 11729.051361303538})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_1/0.6

   ==> (oq_map.json) Exact results for r = 0.6 <== 
evals = [-1.13136338  0.84960445]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.131363376499586
e_analytic - evals[0] = -0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/0.65
c_z = -0.893017040
c_x = 0.171773983
c_0 = -0.234423207

  t_A = -0.190031414
    <Z>_A = cos(t_A) = 0.981998302
    <X>_A = sin(t_A) = -0.188889744

   ==> Run 3-point Fourier quadrature <==
  t = -0.190031, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.190031, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = 0.857166, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = 0.857166, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -1.237229, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.237229, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 1.1102230246251565e-16, b = -0.8930170404711619, c = 0.1717739834640628

  t_opt = -0.190031414
    <Z>_opt = cos(t_opt) = 0.981998302
    <X>_opt = sin(t_opt) = -0.188889744
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -0.190031, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.190031, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = 0.8882000000000001
  <X> = -0.17710000000000004
  Energy = -1.058022114995768

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9875047954208565
  <X> = -0.18013920096709313
  Energy = -1.1472250451637607
  measure Z: {'0': 19875.047954208563, '1': 124.95204579143655})
  measure X: {'0': 8198.607990329068, '1': 11801.39200967093})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_1/0.65

   ==> (oq_map.json) Exact results for r = 0.65 <== 
evals = [-1.14381077  0.67496435]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.1438107681038217
e_analytic - evals[0] = -0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/0.7
c_z = -0.818749229
c_x = 0.171060688
c_0 = -0.313783336

  t_A = -0.205966480
    <Z>_A = cos(t_A) = 0.978863784
    <X>_A = sin(t_A) = -0.204513307

   ==> Run 3-point Fourier quadrature <==
  t = -0.205966, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.205966, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = 0.841231, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = 0.841231, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -1.253164, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.253164, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 1.1102230246251565e-16, b = -0.8187492286324077, c = 0.17106068808312358

  t_opt = -0.205966480
    <Z>_opt = cos(t_opt) = 0.978863784
    <X>_opt = sin(t_opt) = -0.204513307
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -0.205966, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.205966, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = 0.8845000000000001
  <X> = -0.1894
  Energy = -1.0703659233491183

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9834493534993769
  <X> = -0.19362086970412862
  Energy = -1.152102655076306
  measure Z: {'0': 19834.493534993766, '1': 165.50646500623154})
  measure X: {'0': 8063.7913029587135, '1': 11936.208697041286})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_1/0.7

   ==> (oq_map.json) Exact results for r = 0.7 <== 
evals = [-1.15021149  0.52264482]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.1502114912511527
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/0.75
c_z = -0.751762455
c_x = 0.170457573
c_0 = -0.381398162

  t_A = -0.222973719
    <Z>_A = cos(t_A) = 0.975244182
    <X>_A = sin(t_A) = -0.221130698

   ==> Run 3-point Fourier quadrature <==
  t = -0.222974, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.222974, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = 0.824224, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = 0.824224, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -1.270171, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.270171, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 0.0, b = -0.7517624545623149, c = 0.1704575733756196

  t_opt = -0.222973719
    <Z>_opt = cos(t_opt) = 0.975244182
    <X>_opt = sin(t_opt) = -0.221130698
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -0.222974, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.222974, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = 0.8939999999999999
  <X> = -0.21189999999999998
  Energy = -1.0895937560688906

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9938620047114215
  <X> = -0.2182824572431048
  Energy = -1.1657542000220957
  measure Z: {'0': 19938.620047114215, '1': 61.379952885784014})
  measure X: {'0': 7817.175427568952, '1': 12182.82457243105})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_1/0.75

   ==> (oq_map.json) Exact results for r = 0.75 <== 
evals = [-1.15224352  0.3894472 ]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.1522435240824251
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/0.8
c_z = -0.691218028
c_x = 0.169960572
c_0 = -0.439308382

  t_A = -0.241102571
    <Z>_A = cos(t_A) = 0.971075301
    <X>_A = sin(t_A) = -0.238773451

   ==> Run 3-point Fourier quadrature <==
  t = -0.241103, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.241103, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = 0.806095, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = 0.806095, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -1.288300, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.288300, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = -2.220446049250313e-16, b = -0.6912180276548991, c = 0.16996057197909592

  t_opt = -0.241102571
    <Z>_opt = cos(t_opt) = 0.971075301
    <X>_opt = sin(t_opt) = -0.238773451
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -0.241103, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.241103, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = 0.8835999999999999
  <X> = -0.23029999999999995
  Energy = -1.0892105510005012

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9824628706190353
  <X> = -0.2384501562074522
  Energy = -1.15893155464883
  measure Z: {'0': 19824.62870619035, '1': 175.37129380964709})
  measure X: {'0': 7615.498437925477, '1': 12384.501562074522})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_1/0.8

   ==> (oq_map.json) Exact results for r = 0.8 <== 
evals = [-1.15111521  0.27249844]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.1511152082081149
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/0.85
c_z = -0.636488864
c_x = 0.169579229
c_0 = -0.489018448

  t_A = -0.260380693
    <Z>_A = cos(t_A) = 0.966292039
    <X>_A = sin(t_A) = -0.257448431

   ==> Run 3-point Fourier quadrature <==
  t = -0.260381, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.260381, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = 0.786817, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = 0.786817, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -1.307578, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.307578, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = -1.1102230246251565e-16, b = -0.6364888642400289, c = 0.16957922946515439

  t_opt = -0.260380693
    <Z>_opt = cos(t_opt) = 0.966292039
    <X>_opt = sin(t_opt) = -0.257448431
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -0.260381, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.260381, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = 0.8746
  <X> = -0.25299999999999995
  Energy = -1.0885951537846914

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9725982353265678
  <X> = -0.26333095856796085
  Energy = -1.1527218552788168
  measure Z: {'0': 19725.982353265677, '1': 274.0176467343212})
  measure X: {'0': 7366.690414320391, '1': 12633.309585679608})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_1/0.85

   ==> (oq_map.json) Exact results for r = 0.85 <== 
evals = [-1.14771048  0.16967358]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.147710477292962
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/1.15
c_z = -0.399295092
c_x = 0.169766330
c_0 = -0.672952709

  t_A = -0.402010464
    <Z>_A = cos(t_A) = 0.920276221
    <X>_A = sin(t_A) = -0.391269314

   ==> Run 3-point Fourier quadrature <==
  t = -0.402010, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.402010, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = 0.645187, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = 0.645187, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -1.449208, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.449208, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 0.0, b = -0.39929509169104116, c = 0.1697663300774525

  t_opt = -0.402010464
    <Z>_opt = cos(t_opt) = 0.920276221
    <X>_opt = sin(t_opt) = -0.391269314
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -0.402010, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.402010, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = 0.8260000000000001
  <X> = -0.3603
  Energy = -1.063937263541033

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9193292062576711
  <X> = -0.3809393324044391
  Energy = -1.104707021228692
  measure Z: {'0': 19193.29206257671, '1': 806.7079374232892})
  measure X: {'0': 6190.60667595561, '1': 13809.393324044391})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_1/1.15

   ==> (oq_map.json) Exact results for r = 1.15 <== 
evals = [-1.10683884 -0.23906658]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.1068388428457654
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/1.2
c_z = -0.371037374
c_x = 0.170213481
c_0 = -0.690922272

  t_A = -0.430106748
    <Z>_A = cos(t_A) = 0.908921244
    <X>_A = sin(t_A) = -0.416967830

   ==> Run 3-point Fourier quadrature <==
  t = -0.430107, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.430107, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = 0.617091, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = 0.617091, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -1.477304, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.477304, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 5.551115123125783e-17, b = -0.3710373736142774, c = 0.17021348058116217

  t_opt = -0.430106748
    <Z>_opt = cos(t_opt) = 0.908921244
    <X>_opt = sin(t_opt) = -0.416967830
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -0.430107, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.430107, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = 0.8265
  <X> = -0.393
  Energy = -1.0644785591145776

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9198772400530739
  <X> = -0.4167808406541985
  Energy = -1.1031728246781172
  measure Z: {'0': 19198.77240053074, '1': 801.2275994692604})
  measure X: {'0': 5832.191593458014, '1': 14167.808406541984})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_1/1.2

   ==> (oq_map.json) Exact results for r = 1.2 <== 
evals = [-1.09913957 -0.28270497]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.099139568978659
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/1.3
c_z = -0.321395392
c_x = 0.171457744
c_0 = -0.719962104

  t_A = -0.490070852
    <Z>_A = cos(t_A) = 0.882299511
    <X>_A = sin(t_A) = -0.470688402

   ==> Run 3-point Fourier quadrature <==
  t = -0.490071, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.490071, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = 0.557127, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = 0.557127, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -1.537268, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.537268, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = -5.551115123125783e-17, b = -0.3213953919185241, c = 0.17145774377906556

  t_opt = -0.490070852
    <Z>_opt = cos(t_opt) = 0.882299511
    <X>_opt = sin(t_opt) = -0.470688402
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -0.490071, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.490071, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = 0.7965
  <X> = -0.443
  Energy = -1.0519093136749764

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.8869951235091107
  <X> = -0.4715843703617055
  Energy = -1.0858950410114654
  measure Z: {'0': 18869.951235091106, '1': 1130.0487649088925})
  measure X: {'0': 5284.156296382946, '1': 14715.843703617054})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_1/1.3

   ==> (oq_map.json) Exact results for r = 1.3 <== 
evals = [-1.08423227 -0.35569193]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.0842322722775133
e_analytic - evals[0] = -0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/1.45
c_z = -0.260906520
c_x = 0.174167246
c_0 = -0.750292491

  t_A = -0.588611503
    <Z>_A = cos(t_A) = 0.831712383
    <X>_A = sin(t_A) = -0.555206729

   ==> Run 3-point Fourier quadrature <==
  t = -0.588612, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.588612, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = 0.458586, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = 0.458586, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -1.635809, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.635809, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = -2.7755575615628914e-17, b = -0.26090651987639996, c = 0.1741672461701277

  t_opt = -0.588611503
    <Z>_opt = cos(t_opt) = 0.831712383
    <X>_opt = sin(t_opt) = -0.555206729
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -0.588612, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.588612, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = 0.7531000000000001
  <X> = -0.5186999999999999
  Energy = -1.0371217413253322

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.8394256590110307
  <X> = -0.5545569138420392
  Energy = -1.0658897685339646
  measure Z: {'0': 18394.256590110308, '1': 1605.7434098896917})
  measure X: {'0': 4454.430861579607, '1': 15545.569138420393})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_1/1.45

   ==> (oq_map.json) Exact results for r = 1.45 <== 
evals = [-1.0639905  -0.43659448]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.0639905010555568
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/1.6
c_z = -0.213224929
c_x = 0.177807023
c_0 = -0.769382665

  t_A = -0.695069165
    <Z>_A = cos(t_A) = 0.768009407
    <X>_A = sin(t_A) = -0.640438561

   ==> Run 3-point Fourier quadrature <==
  t = -0.695069, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.695069, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = 0.352128, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = 0.352128, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -1.742267, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.742267, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 2.7755575615628914e-17, b = -0.2132249287909129, c = 0.17780702316230246

  t_opt = -0.695069165
    <Z>_opt = cos(t_opt) = 0.768009407
    <X>_opt = sin(t_opt) = -0.640438561
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -0.695069, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.695069, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = 0.6961999999999999
  <X> = -0.5938000000000001
  Energy = -1.0234116709844212

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.7770592435543663
  <X> = -0.6368718138064907
  Energy = -1.0483113484285211
  measure Z: {'0': 17770.592435543662, '1': 2229.407564456337})
  measure X: {'0': 3631.281861935093, '1': 16368.718138064905})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_1/1.6

   ==> (oq_map.json) Exact results for r = 1.6 <== 
evals = [-1.04701589 -0.49174944]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.0470158904222164
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/1.9
c_z = -0.144203901
c_x = 0.187268886
c_0 = -0.786868492

  t_A = -0.914594616
    <Z>_A = cos(t_A) = 0.610111817
    <X>_A = sin(t_A) = -0.792315323

   ==> Run 3-point Fourier quadrature <==
  t = -0.914595, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.914595, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = 0.132603, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = 0.132603, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -1.961792, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.961792, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = -2.7755575615628914e-17, b = -0.1442039010759991, c = 0.18726888604283617

  t_opt = -0.914594616
    <Z>_opt = cos(t_opt) = 0.610111817
    <X>_opt = sin(t_opt) = -0.792315323
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -0.914595, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.914595, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = 0.5573999999999999
  <X> = -0.7325999999999999
  Energy = -1.0044409320849104

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.6249246448438852
  <X> = -0.7890064118491709
  Energy = -1.0247414152028378
  measure Z: {'0': 16249.246448438853, '1': 3750.7535515611485})
  measure X: {'0': 2109.935881508293, '1': 17890.064118491708})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_1/1.9

   ==> (oq_map.json) Exact results for r = 1.9 <== 
evals = [-1.023225   -0.55051198]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.0232250037111297
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/2.5
c_z = -0.066271102
c_x = 0.209148615
c_0 = -0.784992480

  t_A = -1.263943124
    <Z>_A = cos(t_A) = 0.302060331
    <X>_A = sin(t_A) = -0.953288811

   ==> Run 3-point Fourier quadrature <==
  t = -1.263943, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.263943, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -0.216746, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.216746, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -2.311141, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -2.311141, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 2.0816681711721685e-17, b = -0.0662711018357801, c = 0.20914861505223561

  t_opt = -1.263943124
    <Z>_opt = cos(t_opt) = 0.302060331
    <X>_opt = sin(t_opt) = -0.953288811
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -1.263943, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.263943, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = 0.26499999999999996
  <X> = -0.8811
  Energy = -0.9868351671425568

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.3044336056191092
  <X> = -0.9517728945790375
  Energy = -1.004229613659231
  measure Z: {'0': 13044.336056191092, '1': 6955.663943808909})
  measure X: {'0': 482.2710542096256, '1': 19517.728945790375})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_1/2.5

   ==> (oq_map.json) Exact results for r = 2.5 <== 
evals = [-1.00438939 -0.56559557]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.0043893858738882
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/2.95
c_z = -0.036185839
c_x = 0.223454420
c_0 = -0.774745750

  t_A = -1.410251678
    <Z>_A = cos(t_A) = 0.159855875
    <X>_A = sin(t_A) = -0.987140364

   ==> Run 3-point Fourier quadrature <==
  t = -1.410252, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.410252, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -0.363054, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.363054, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -2.457449, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -2.457449, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = -3.729655473350135e-17, b = -0.03618583852259695, c = 0.22345441969595453

  t_opt = -1.410251678
    <Z>_opt = cos(t_opt) = 0.159855875
    <X>_opt = sin(t_opt) = -0.987140364
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -1.410252, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.410252, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = 0.1356
  <X> = -0.9076
  Energy = -0.982459781497232

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.1626020716435838
  <X> = -0.9808187896364855
  Energy = -0.9997979362505633
  measure Z: {'0': 11626.020716435838, '1': 8373.979283564162})
  measure X: {'0': 191.81210363514498, '1': 19808.187896364852})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_1/2.95

   ==> (oq_map.json) Exact results for r = 2.95 <== 
evals = [-1.00111115 -0.54838035]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.0011111466652745
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/6.0
c_z = -0.000371898
c_x = 0.268404889
c_0 = -0.731584011

  t_A = -1.569410743
    <Z>_A = cos(t_A) = 0.001385583
    <X>_A = sin(t_A) = -0.999999040

   ==> Run 3-point Fourier quadrature <==
  t = -1.569411, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.569411, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -0.522213, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.522213, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -2.616608, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -2.616608, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = -5.7429627917229614e-18, b = -0.00037189768093556547, c = 0.2684048893716581

  t_opt = -1.569410743
    <Z>_opt = cos(t_opt) = 0.001385583
    <X>_opt = sin(t_opt) = -0.999999040
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -1.569411, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.569411, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = -0.008399999999999963
  <X> = -0.9207000000000001
  Energy = -0.9787012685241131

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.004767907018331796
  <X> = -0.9951772894188009
  Energy = -0.9986962342653503
  measure Z: {'0': 10047.679070183318, '1': 9952.320929816682})
  measure X: {'0': 48.22710581198982, '1': 19951.77289418801})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_1/6.0

   ==> (oq_map.json) Exact results for r = 6.0 <== 
evals = [-0.99998916 -0.46317886]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -0.9999891578395312
e_analytic - evals[0] = 0.000000000000


Set-2

   ==> Run Calibration circuits <== 
n_shots       =      20000
Backend       =      qasm_simulator
Noise model   =      ibmq_armonk
NoiseModel:
  Basis gates: ['id', 'rz', 'sx', 'x']
  Instructions with noise: ['measure', 'sx', 'id', 'x']
  Qubits with noise: [0]
  Specific qubit errors: [('id', (0,)), ('sx', (0,)), ('x', (0,)), ('measure', (0,))]
Calibration matrix =
[[0.9516 0.0384]
 [0.0484 0.9616]]

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/0.6
c_z = -0.975331596
c_x = 0.172588132
c_0 = -0.140879461

  t_A = -0.175140281
    <Z>_A = cos(t_A) = 0.984702105
    <X>_A = sin(t_A) = -0.174246274

   ==> Run 3-point Fourier quadrature <==
  t = -0.175140, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.175140, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = 0.872057, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = 0.872057, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -1.222338, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.222338, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 0.0, b = -0.9753315962732313, c = 0.17258813211389312

  t_opt = -0.175140281
    <Z>_opt = cos(t_opt) = 0.984702105
    <X>_opt = sin(t_opt) = -0.174246274
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -0.175140, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.175140, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = 0.8905000000000001
  <X> = -0.1593
  Energy = -1.0369055373450022

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9860928596370057
  <X> = -0.1634910218178539
  Energy = -1.130863594354278
  measure Z: {'0': 19860.92859637006, '1': 139.07140362994193})
  measure X: {'0': 8365.08978182146, '1': 11634.910218178538})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_2/0.6

   ==> (oq_map.json) Exact results for r = 0.6 <== 
evals = [-1.13136338  0.84960445]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.131363376499586
e_analytic - evals[0] = -0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/0.65
c_z = -0.893017040
c_x = 0.171773983
c_0 = -0.234423207

  t_A = -0.190031414
    <Z>_A = cos(t_A) = 0.981998302
    <X>_A = sin(t_A) = -0.188889744

   ==> Run 3-point Fourier quadrature <==
  t = -0.190031, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.190031, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = 0.857166, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = 0.857166, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -1.237229, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.237229, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 2.220446049250313e-16, b = -0.893017040471162, c = 0.17177398346406272

  t_opt = -0.190031414
    <Z>_opt = cos(t_opt) = 0.981998302
    <X>_opt = sin(t_opt) = -0.188889744
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -0.190031, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.190031, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = 0.8920999999999999
  <X> = -0.16650000000000004
  Energy = -1.0596840772288862

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9878449408709348
  <X> = -0.17137538350300413
  Energy = -1.146023405010761
  measure Z: {'0': 19878.449408709348, '1': 121.55059129065376})
  measure X: {'0': 8286.24616496996, '1': 11713.753835030042})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_2/0.65

   ==> (oq_map.json) Exact results for r = 0.65 <== 
evals = [-1.14381077  0.67496435]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.1438107681038217
e_analytic - evals[0] = -0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/0.7
c_z = -0.818749229
c_x = 0.171060688
c_0 = -0.313783336

  t_A = -0.205966480
    <Z>_A = cos(t_A) = 0.978863784
    <X>_A = sin(t_A) = -0.204513307

   ==> Run 3-point Fourier quadrature <==
  t = -0.205966, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.205966, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = 0.841231, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = 0.841231, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -1.253164, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.253164, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 0.0, b = -0.8187492286324076, c = 0.17106068808312358

  t_opt = -0.205966480
    <Z>_opt = cos(t_opt) = 0.978863784
    <X>_opt = sin(t_opt) = -0.204513307
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -0.205966, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.205966, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = 0.8899999999999999
  <X> = -0.20799999999999996
  Energy = -1.0780507729049424

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9855453490571077
  <X> = -0.21681997373698159
  Energy = -1.157787204521187
  measure Z: {'0': 19855.45349057108, '1': 144.54650942892175})
  measure X: {'0': 7831.800262630185, '1': 12168.199737369816})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_2/0.7

   ==> (oq_map.json) Exact results for r = 0.7 <== 
evals = [-1.15021149  0.52264482]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.1502114912511527
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/0.75
c_z = -0.751762455
c_x = 0.170457573
c_0 = -0.381398162

  t_A = -0.222973719
    <Z>_A = cos(t_A) = 0.975244182
    <X>_A = sin(t_A) = -0.221130698

   ==> Run 3-point Fourier quadrature <==
  t = -0.222974, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.222974, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = 0.824224, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = 0.824224, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -1.270171, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.270171, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 0.0, b = -0.7517624545623149, c = 0.1704575733756196

  t_opt = -0.222973719
    <Z>_opt = cos(t_opt) = 0.975244182
    <X>_opt = sin(t_opt) = -0.221130698
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -0.222974, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.222974, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = 0.8816999999999999
  <X> = -0.22300000000000003
  Energy = -1.0822391569422436

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9764564155903737
  <X> = -0.233245730473241
  Energy = -1.1552199348659191
  measure Z: {'0': 19764.564155903736, '1': 235.43584409626337})
  measure X: {'0': 7667.542695267591, '1': 12332.457304732412})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_2/0.75

   ==> (oq_map.json) Exact results for r = 0.75 <== 
evals = [-1.15224352  0.3894472 ]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.1522435240824251
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/0.8
c_z = -0.691218028
c_x = 0.169960572
c_0 = -0.439308382

  t_A = -0.241102571
    <Z>_A = cos(t_A) = 0.971075301
    <X>_A = sin(t_A) = -0.238773451

   ==> Run 3-point Fourier quadrature <==
  t = -0.241103, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.241103, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = 0.806095, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = 0.806095, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -1.288300, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.288300, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 1.1102230246251565e-16, b = -0.6912180276548995, c = 0.16996057197909592

  t_opt = -0.241102571
    <Z>_opt = cos(t_opt) = 0.971075301
    <X>_opt = sin(t_opt) = -0.238773451
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -0.241103, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.241103, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = 0.8835
  <X> = -0.22910000000000003
  Energy = -1.088937476511361

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9784275048579606
  <X> = -0.2399255369149016
  Energy = -1.1563929936355188
  measure Z: {'0': 19784.275048579602, '1': 215.72495142039492})
  measure X: {'0': 7600.7446308509825, '1': 12399.255369149016})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_2/0.8

   ==> (oq_map.json) Exact results for r = 0.8 <== 
evals = [-1.15111521  0.27249844]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.1511152082081149
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/0.85
c_z = -0.636488864
c_x = 0.169579229
c_0 = -0.489018448

  t_A = -0.260380693
    <Z>_A = cos(t_A) = 0.966292039
    <X>_A = sin(t_A) = -0.257448431

   ==> Run 3-point Fourier quadrature <==
  t = -0.260381, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.260381, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = 0.786817, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = 0.786817, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -1.307578, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.307578, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 1.1102230246251565e-16, b = -0.6364888642400292, c = 0.16957922946515447

  t_opt = -0.260380693
    <Z>_opt = cos(t_opt) = 0.966292039
    <X>_opt = sin(t_opt) = -0.257448431
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -0.260381, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.260381, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = 0.8749
  <X> = -0.24629999999999996
  Energy = -1.0876499196065468

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9690100744557189
  <X> = -0.2587604030255884
  Energy = -1.1496629595543164
  measure Z: {'0': 19690.10074455719, '1': 309.8992554428111})
  measure X: {'0': 7412.395969744116, '1': 12587.604030255883})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_2/0.85

   ==> (oq_map.json) Exact results for r = 0.85 <== 
evals = [-1.14771048  0.16967358]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.147710477292962
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/1.15
c_z = -0.399295092
c_x = 0.169766330
c_0 = -0.672952709

  t_A = -0.402010464
    <Z>_A = cos(t_A) = 0.920276221
    <X>_A = sin(t_A) = -0.391269314

   ==> Run 3-point Fourier quadrature <==
  t = -0.402010, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.402010, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = 0.645187, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = 0.645187, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -1.449208, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.449208, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 5.551115123125783e-17, b = -0.3992950916910412, c = 0.16976633007745248

  t_opt = -0.402010464
    <Z>_opt = cos(t_opt) = 0.920276221
    <X>_opt = sin(t_opt) = -0.391269314
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -0.402010, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.402010, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = 0.8381000000000001
  <X> = -0.36600000000000005
  Energy = -1.069736402231936

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9287122207788321
  <X> = -0.3898379339332569
  Energy = -1.1099642957966265
  measure Z: {'0': 19287.12220778832, '1': 712.8777922116785})
  measure X: {'0': 6101.620660667431, '1': 13898.379339332569})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_2/1.15

   ==> (oq_map.json) Exact results for r = 1.15 <== 
evals = [-1.10683884 -0.23906658]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.1068388428457654
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/1.2
c_z = -0.371037374
c_x = 0.170213481
c_0 = -0.690922272

  t_A = -0.430106748
    <Z>_A = cos(t_A) = 0.908921244
    <X>_A = sin(t_A) = -0.416967830

   ==> Run 3-point Fourier quadrature <==
  t = -0.430107, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.430107, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = 0.617091, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = 0.617091, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -1.477304, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.477304, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 1.1102230246251565e-16, b = -0.3710373736142775, c = 0.17021348058116217

  t_opt = -0.430106748
    <Z>_opt = cos(t_opt) = 0.908921244
    <X>_opt = sin(t_opt) = -0.416967830
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -0.430107, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.430107, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = 0.8251999999999999
  <X> = -0.37660000000000005
  Energy = -1.0612047094473478

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9145860714177194
  <X> = -0.40144546638349965
  Energy = -1.0985993159336744
  measure Z: {'0': 19145.86071417719, '1': 854.1392858228079})
  measure X: {'0': 5985.545336165004, '1': 14014.454663834997})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_2/1.2

   ==> (oq_map.json) Exact results for r = 1.2 <== 
evals = [-1.09913957 -0.28270497]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.099139568978659
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/1.3
c_z = -0.321395392
c_x = 0.171457744
c_0 = -0.719962104

  t_A = -0.490070852
    <Z>_A = cos(t_A) = 0.882299511
    <X>_A = sin(t_A) = -0.470688402

   ==> Run 3-point Fourier quadrature <==
  t = -0.490071, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.490071, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = 0.557127, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = 0.557127, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -1.537268, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.537268, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 5.551115123125783e-17, b = -0.32139539191852423, c = 0.17145774377906559

  t_opt = -0.490070852
    <Z>_opt = cos(t_opt) = 0.882299511
    <X>_opt = sin(t_opt) = -0.470688402
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -0.490071, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.490071, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = 0.8053999999999999
  <X> = -0.441
  Energy = -1.054426817175493

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.8929040735875263
  <X> = -0.47196671095325504
  Energy = -1.087859705592927
  measure Z: {'0': 18929.040735875264, '1': 1070.959264124738})
  measure X: {'0': 5280.33289046745, '1': 14719.667109532551})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_2/1.3

   ==> (oq_map.json) Exact results for r = 1.3 <== 
evals = [-1.08423227 -0.35569193]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.0842322722775133
e_analytic - evals[0] = -0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/1.45
c_z = -0.260906520
c_x = 0.174167246
c_0 = -0.750292491

  t_A = -0.588611503
    <Z>_A = cos(t_A) = 0.831712383
    <X>_A = sin(t_A) = -0.555206729

   ==> Run 3-point Fourier quadrature <==
  t = -0.588612, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.588612, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = 0.458586, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = 0.458586, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -1.635809, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.635809, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 2.7755575615628914e-17, b = -0.2609065198764, c = 0.17416724617012774

  t_opt = -0.588611503
    <Z>_opt = cos(t_opt) = 0.831712383
    <X>_opt = sin(t_opt) = -0.555206729
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -0.588612, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.588612, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = 0.7470000000000001
  <X> = -0.5323
  Energy = -1.037898886102

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.8289531319594663
  <X> = -0.5719448089564017
  Energy = -1.066185819755393
  measure Z: {'0': 18289.531319594662, '1': 1710.4686804053383})
  measure X: {'0': 4280.551910435983, '1': 15719.448089564017})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_2/1.45

   ==> (oq_map.json) Exact results for r = 1.45 <== 
evals = [-1.0639905  -0.43659448]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.0639905010555568
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/1.6
c_z = -0.213224929
c_x = 0.177807023
c_0 = -0.769382665

  t_A = -0.695069165
    <Z>_A = cos(t_A) = 0.768009407
    <X>_A = sin(t_A) = -0.640438561

   ==> Run 3-point Fourier quadrature <==
  t = -0.695069, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.695069, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = 0.352128, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = 0.352128, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -1.742267, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.742267, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 2.7755575615628914e-17, b = -0.2132249287909129, c = 0.17780702316230249

  t_opt = -0.695069165
    <Z>_opt = cos(t_opt) = 0.768009407
    <X>_opt = sin(t_opt) = -0.640438561
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -0.695069, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.695069, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = 0.6991
  <X> = -0.5994999999999999
  Energy = -1.02504352330994

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.7765002190102259
  <X> = -0.6455321948648105
  Energy = -1.0497320270353354
  measure Z: {'0': 17765.00219010226, '1': 2234.997809897739})
  measure X: {'0': 3544.678051351895, '1': 16455.321948648107})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_2/1.6

   ==> (oq_map.json) Exact results for r = 1.6 <== 
evals = [-1.04701589 -0.49174944]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.0470158904222164
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/1.9
c_z = -0.144203901
c_x = 0.187268886
c_0 = -0.786868492

  t_A = -0.914594616
    <Z>_A = cos(t_A) = 0.610111817
    <X>_A = sin(t_A) = -0.792315323

   ==> Run 3-point Fourier quadrature <==
  t = -0.914595, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.914595, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = 0.132603, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = 0.132603, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -1.961792, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.961792, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 0.0, b = -0.14420390107599912, c = 0.18726888604283617

  t_opt = -0.914594616
    <Z>_opt = cos(t_opt) = 0.610111817
    <X>_opt = sin(t_opt) = -0.792315323
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -0.914595, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.914595, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = 0.5414000000000001
  <X> = -0.7329000000000001
  Energy = -1.0021898503335074

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.6038107757601641
  <X> = -0.7916119150185326
  Energy = -1.0221846425902648
  measure Z: {'0': 16038.107757601641, '1': 3961.892242398359})
  measure X: {'0': 2083.8808498146745, '1': 17916.119150185325})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_2/1.9

   ==> (oq_map.json) Exact results for r = 1.9 <== 
evals = [-1.023225   -0.55051198]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.0232250037111297
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/2.5
c_z = -0.066271102
c_x = 0.209148615
c_0 = -0.784992480

  t_A = -1.263943124
    <Z>_A = cos(t_A) = 0.302060331
    <X>_A = sin(t_A) = -0.953288811

   ==> Run 3-point Fourier quadrature <==
  t = -1.263943, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.263943, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -0.216746, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.216746, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -2.311141, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -2.311141, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = -2.7755575615628914e-17, b = -0.0662711018357801, c = 0.20914861505223556

  t_opt = -1.263943124
    <Z>_opt = cos(t_opt) = 0.302060331
    <X>_opt = sin(t_opt) = -0.953288811
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -1.263943, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.263943, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = 0.2643
  <X> = -0.8846
  Energy = -0.9875207975239546

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.30037231711149526
  <X> = -0.957731055455505
  Energy = -1.0052066086905302
  measure Z: {'0': 13003.72317111495, '1': 6996.276828885047})
  measure X: {'0': 422.6894454449488, '1': 19577.310554555053})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_2/2.5

   ==> (oq_map.json) Exact results for r = 2.5 <== 
evals = [-1.00438939 -0.56559557]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.0043893858738882
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/2.95
c_z = -0.036185839
c_x = 0.223454420
c_0 = -0.774745750

  t_A = -1.410251678
    <Z>_A = cos(t_A) = 0.159855875
    <X>_A = sin(t_A) = -0.987140364

   ==> Run 3-point Fourier quadrature <==
  t = -1.410252, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.410252, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -0.363054, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.363054, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -2.457449, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -2.457449, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 1.734723475976807e-17, b = -0.03618583852259691, c = 0.2234544196959546

  t_opt = -1.410251678
    <Z>_opt = cos(t_opt) = 0.159855875
    <X>_opt = sin(t_opt) = -0.987140364
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -1.410252, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.410252, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = 0.12420000000000003
  <X> = -0.9129
  Energy = -0.983231571362463

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.14695575968989488
  <X> = -0.9887209703812561
  Energy = -1.0009975385453882
  measure Z: {'0': 11469.557596898949, '1': 8530.442403101051})
  measure X: {'0': 112.79029618744073, '1': 19887.209703812558})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_2/2.95

   ==> (oq_map.json) Exact results for r = 2.95 <== 
evals = [-1.00111115 -0.54838035]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.0011111466652745
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/6.0
c_z = -0.000371898
c_x = 0.268404889
c_0 = -0.731584011

  t_A = -1.569410743
    <Z>_A = cos(t_A) = 0.001385583
    <X>_A = sin(t_A) = -0.999999040

   ==> Run 3-point Fourier quadrature <==
  t = -1.569411, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.569411, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -0.522213, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.522213, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -2.616608, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -2.616608, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = -2.924635360279648e-17, b = -0.00037189768093556086, c = 0.268404889371658

  t_opt = -1.569410743
    <Z>_opt = cos(t_opt) = 0.001385583
    <X>_opt = sin(t_opt) = -0.999999040
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -1.569411, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.569411, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = -0.010599999999999998
  <X> = -0.9238999999999999
  Energy = -0.9795593459952043

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = -0.0006570307536478692
  <X> = -1.0
  Energy = -0.9999886558435918
  measure Z: {'0': 9993.429692463522, '1': 10006.57030753648})
  measure X: {'1': 20000.0, '0': 0})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_2/6.0

   ==> (oq_map.json) Exact results for r = 6.0 <== 
evals = [-0.99998916 -0.46317886]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -0.9999891578395312
e_analytic - evals[0] = 0.000000000000


Set-3

   ==> Run Calibration circuits <== 
n_shots       =      20000
Backend       =      qasm_simulator
Noise model   =      ibmq_armonk
NoiseModel:
  Basis gates: ['id', 'rz', 'sx', 'x']
  Instructions with noise: ['measure', 'sx', 'id', 'x']
  Qubits with noise: [0]
  Specific qubit errors: [('id', (0,)), ('sx', (0,)), ('x', (0,)), ('measure', (0,))]
Calibration matrix =
[[0.95275 0.0374 ]
 [0.04725 0.9626 ]]

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/0.6
c_z = -0.975331596
c_x = 0.172588132
c_0 = -0.140879461

  t_A = -0.175140281
    <Z>_A = cos(t_A) = 0.984702105
    <X>_A = sin(t_A) = -0.174246274

   ==> Run 3-point Fourier quadrature <==
  t = -0.175140, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.175140, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = 0.872057, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = 0.872057, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -1.222338, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.222338, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 1.1102230246251565e-16, b = -0.9753315962732314, c = 0.17258813211389318

  t_opt = -0.175140281
    <Z>_opt = cos(t_opt) = 0.984702105
    <X>_opt = sin(t_opt) = -0.174246274
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -0.175140, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.175140, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = 0.895
  <X> = -0.16460000000000002
  Energy = -1.0422092466284354

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9885289780430863
  <X> = -0.16906101504465182
  Energy = -1.1342009323348912
  measure Z: {'0': 19885.289780430863, '1': 114.71021956913746})
  measure X: {'0': 8309.389849553481, '1': 11690.610150446517})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_3/0.6

   ==> (oq_map.json) Exact results for r = 0.6 <== 
evals = [-1.13136338  0.84960445]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.131363376499586
e_analytic - evals[0] = -0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/0.65
c_z = -0.893017040
c_x = 0.171773983
c_0 = -0.234423207

  t_A = -0.190031414
    <Z>_A = cos(t_A) = 0.981998302
    <X>_A = sin(t_A) = -0.188889744

   ==> Run 3-point Fourier quadrature <==
  t = -0.190031, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.190031, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = 0.857166, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = 0.857166, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -1.237229, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.237229, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 2.220446049250313e-16, b = -0.893017040471162, c = 0.17177398346406272

  t_opt = -0.190031414
    <Z>_opt = cos(t_opt) = 0.981998302
    <X>_opt = sin(t_opt) = -0.188889744
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -0.190031, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.190031, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = 0.8900999999999999
  <X> = -0.17910000000000004
  Energy = -1.0600623953395911

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.98317583438041
  <X> = -0.1849019499569925
  Energy = -1.1441773255533407
  measure Z: {'0': 19831.7583438041, '1': 168.24165619590028})
  measure X: {'0': 8150.980500430076, '1': 11849.019499569926})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_3/0.65

   ==> (oq_map.json) Exact results for r = 0.65 <== 
evals = [-1.14381077  0.67496435]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.1438107681038217
e_analytic - evals[0] = -0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/0.7
c_z = -0.818749229
c_x = 0.171060688
c_0 = -0.313783336

  t_A = -0.205966480
    <Z>_A = cos(t_A) = 0.978863784
    <X>_A = sin(t_A) = -0.204513307

   ==> Run 3-point Fourier quadrature <==
  t = -0.205966, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.205966, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = 0.841231, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = 0.841231, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -1.253164, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.253164, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 0.0, b = -0.8187492286324076, c = 0.17106068808312364

  t_opt = -0.205966480
    <Z>_opt = cos(t_opt) = 0.978863784
    <X>_opt = sin(t_opt) = -0.204513307
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -0.205966, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.205966, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = 0.8928
  <X> = -0.1975
  Energy = -1.0785471335202406

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9861255260144592
  <X> = -0.205003550716299
  Energy = -1.1562408985048895
  measure Z: {'0': 19861.25526014459, '1': 138.7447398554081})
  measure X: {'0': 7949.96449283701, '1': 12050.03550716299})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_3/0.7

   ==> (oq_map.json) Exact results for r = 0.7 <== 
evals = [-1.15021149  0.52264482]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.1502114912511527
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/0.75
c_z = -0.751762455
c_x = 0.170457573
c_0 = -0.381398162

  t_A = -0.222973719
    <Z>_A = cos(t_A) = 0.975244182
    <X>_A = sin(t_A) = -0.221130698

   ==> Run 3-point Fourier quadrature <==
  t = -0.222974, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.222974, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = 0.824224, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = 0.824224, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -1.270171, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.270171, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 1.1102230246251565e-16, b = -0.751762454562315, c = 0.17045757337561965

  t_opt = -0.222973719
    <Z>_opt = cos(t_opt) = 0.975244182
    <X>_opt = sin(t_opt) = -0.221130698
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -0.222974, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.222974, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = 0.8856999999999999
  <X> = -0.20720000000000005
  Energy = -1.082552977101158

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9783689303231309
  <X> = -0.2156005900145086
  Energy = -1.1536499438113357
  measure Z: {'0': 19783.68930323131, '1': 216.31069676869205})
  measure X: {'0': 7843.994099854913, '1': 12156.005900145085})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_3/0.75

   ==> (oq_map.json) Exact results for r = 0.75 <== 
evals = [-1.15224352  0.3894472 ]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.1522435240824251
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/0.8
c_z = -0.691218028
c_x = 0.169960572
c_0 = -0.439308382

  t_A = -0.241102571
    <Z>_A = cos(t_A) = 0.971075301
    <X>_A = sin(t_A) = -0.238773451

   ==> Run 3-point Fourier quadrature <==
  t = -0.241103, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.241103, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = 0.806095, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = 0.806095, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -1.288300, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.288300, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = -1.1102230246251565e-16, b = -0.6912180276548991, c = 0.1699605719790959

  t_opt = -0.241102571
    <Z>_opt = cos(t_opt) = 0.971075301
    <X>_opt = sin(t_opt) = -0.238773451
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -0.241103, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.241103, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = 0.8828
  <X> = -0.22900000000000004
  Energy = -1.0884366278348048

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9752007728283156
  <X> = -0.2394166165343164
  Energy = -1.1540761218872406
  measure Z: {'0': 19752.007728283155, '1': 247.9922717168437})
  measure X: {'0': 7605.833834656837, '1': 12394.166165343164})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_3/0.8

   ==> (oq_map.json) Exact results for r = 0.8 <== 
evals = [-1.15111521  0.27249844]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.1511152082081149
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/0.85
c_z = -0.636488864
c_x = 0.169579229
c_0 = -0.489018448

  t_A = -0.260380693
    <Z>_A = cos(t_A) = 0.966292039
    <X>_A = sin(t_A) = -0.257448431

   ==> Run 3-point Fourier quadrature <==
  t = -0.260381, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.260381, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = 0.786817, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = 0.786817, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -1.307578, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.307578, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 0.0, b = -0.636488864240029, c = 0.16957922946515439

  t_opt = -0.260380693
    <Z>_opt = cos(t_opt) = 0.966292039
    <X>_opt = sin(t_opt) = -0.257448431
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -0.260381, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.260381, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = 0.8734999999999999
  <X> = -0.2542
  Energy = -1.0880985111093855

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9650406489406543
  <X> = -0.26694711714050423
  Energy = -1.1485247610880065
  measure Z: {'0': 19650.40648940654, '1': 349.59351059345863})
  measure X: {'0': 7330.528828594957, '1': 12669.471171405043})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_3/0.85

   ==> (oq_map.json) Exact results for r = 0.85 <== 
evals = [-1.14771048  0.16967358]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.147710477292962
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/1.15
c_z = -0.399295092
c_x = 0.169766330
c_0 = -0.672952709

  t_A = -0.402010464
    <Z>_A = cos(t_A) = 0.920276221
    <X>_A = sin(t_A) = -0.391269314

   ==> Run 3-point Fourier quadrature <==
  t = -0.402010, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.402010, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = 0.645187, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = 0.645187, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -1.449208, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.449208, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 5.551115123125783e-17, b = -0.3992950916910412, c = 0.16976633007745254

  t_opt = -0.402010464
    <Z>_opt = cos(t_opt) = 0.920276221
    <X>_opt = sin(t_opt) = -0.391269314
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -0.402010, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.402010, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = 0.8298000000000001
  <X> = -0.36600000000000005
  Energy = -1.0664222529709004

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9172993933007565
  <X> = -0.3890861419142506
  Energy = -1.105279580830266
  measure Z: {'0': 19172.99393300756, '1': 827.0060669924368})
  measure X: {'0': 6109.138580857494, '1': 13890.861419142506})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_3/1.15

   ==> (oq_map.json) Exact results for r = 1.15 <== 
evals = [-1.10683884 -0.23906658]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.1068388428457654
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/1.2
c_z = -0.371037374
c_x = 0.170213481
c_0 = -0.690922272

  t_A = -0.430106748
    <Z>_A = cos(t_A) = 0.908921244
    <X>_A = sin(t_A) = -0.416967830

   ==> Run 3-point Fourier quadrature <==
  t = -0.430107, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.430107, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = 0.617091, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = 0.617091, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -1.477304, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.477304, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 0.0, b = -0.3710373736142774, c = 0.17021348058116215

  t_opt = -0.430106748
    <Z>_opt = cos(t_opt) = 0.908921244
    <X>_opt = sin(t_opt) = -0.416967830
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -0.430107, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.430107, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = 0.8234999999999999
  <X> = -0.3796
  Energy = -1.061084586353947

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9104167291833127
  <X> = -0.40394384747436324
  Energy = -1.0974775922826152
  measure Z: {'0': 19104.167291833128, '1': 895.8327081668713})
  measure X: {'0': 5960.561525256367, '1': 14039.438474743632})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_3/1.2

   ==> (oq_map.json) Exact results for r = 1.2 <== 
evals = [-1.09913957 -0.28270497]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.099139568978659
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/1.3
c_z = -0.321395392
c_x = 0.171457744
c_0 = -0.719962104

  t_A = -0.490070852
    <Z>_A = cos(t_A) = 0.882299511
    <X>_A = sin(t_A) = -0.470688402

   ==> Run 3-point Fourier quadrature <==
  t = -0.490071, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.490071, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = 0.557127, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = 0.557127, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -1.537268, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.537268, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 0.0, b = -0.3213953919185242, c = 0.17145774377906556

  t_opt = -0.490070852
    <Z>_opt = cos(t_opt) = 0.882299511
    <X>_opt = sin(t_opt) = -0.470688402
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -0.490071, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.490071, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = 0.806
  <X> = -0.43429999999999996
  Energy = -1.0534708875273244

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.8912984104155899
  <X> = -0.4637024085403132
  Energy = -1.0859266742028626
  measure Z: {'0': 18912.984104155898, '1': 1087.0158958441007})
  measure X: {'0': 5362.975914596869, '1': 14637.024085403133})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_3/1.3

   ==> (oq_map.json) Exact results for r = 1.3 <== 
evals = [-1.08423227 -0.35569193]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.0842322722775133
e_analytic - evals[0] = -0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/1.45
c_z = -0.260906520
c_x = 0.174167246
c_0 = -0.750292491

  t_A = -0.588611503
    <Z>_A = cos(t_A) = 0.831712383
    <X>_A = sin(t_A) = -0.555206729

   ==> Run 3-point Fourier quadrature <==
  t = -0.588612, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.588612, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = 0.458586, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = 0.458586, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -1.635809, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.635809, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 5.551115123125783e-17, b = -0.26090651987640007, c = 0.17416724617012774

  t_opt = -0.588611503
    <Z>_opt = cos(t_opt) = 0.831712383
    <X>_opt = sin(t_opt) = -0.555206729
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -0.588612, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.588612, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = 0.7471000000000001
  <X> = -0.5270999999999999
  Energy = -1.037019307073903

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.826951439401872
  <X> = -0.5650843950051307
  Energy = -1.0644687057108486
  measure Z: {'0': 18269.51439401872, '1': 1730.4856059812798})
  measure X: {'0': 4349.156049948692, '1': 15650.843950051307})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_3/1.45

   ==> (oq_map.json) Exact results for r = 1.45 <== 
evals = [-1.0639905  -0.43659448]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.0639905010555568
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/1.6
c_z = -0.213224929
c_x = 0.177807023
c_0 = -0.769382665

  t_A = -0.695069165
    <Z>_A = cos(t_A) = 0.768009407
    <X>_A = sin(t_A) = -0.640438561

   ==> Run 3-point Fourier quadrature <==
  t = -0.695069, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.695069, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = 0.352128, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = 0.352128, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -1.742267, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.742267, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = -2.7755575615628914e-17, b = -0.21322492879091284, c = 0.17780702316230246

  t_opt = -0.695069165
    <Z>_opt = cos(t_opt) = 0.768009407
    <X>_opt = sin(t_opt) = -0.640438561
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -0.695069, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.695069, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = 0.6951
  <X> = -0.5940000000000001
  Energy = -1.0232126849673837

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.7701425681258287
  <X> = -0.6381711914336865
  Energy = -1.0470675792706565
  measure Z: {'0': 17701.425681258286, '1': 2298.5743187417124})
  measure X: {'0': 3618.2880856631355, '1': 16381.711914336865})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_3/1.6

   ==> (oq_map.json) Exact results for r = 1.6 <== 
evals = [-1.04701589 -0.49174944]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.0470158904222164
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/1.9
c_z = -0.144203901
c_x = 0.187268886
c_0 = -0.786868492

  t_A = -0.914594616
    <Z>_A = cos(t_A) = 0.610111817
    <X>_A = sin(t_A) = -0.792315323

   ==> Run 3-point Fourier quadrature <==
  t = -0.914595, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.914595, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = 0.132603, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = 0.132603, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -1.961792, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.961792, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = -2.7755575615628914e-17, b = -0.1442039010759991, c = 0.18726888604283615

  t_opt = -0.914594616
    <Z>_opt = cos(t_opt) = 0.610111817
    <X>_opt = sin(t_opt) = -0.792315323
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -0.914595, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.914595, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = 0.5477000000000001
  <X> = -0.7311000000000001
  Energy = -1.0027612509154091

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.6091112689215273
  <X> = -0.7879499654481865
  Energy = -1.0222632251649761
  measure Z: {'0': 16091.112689215272, '1': 3908.8873107847267})
  measure X: {'0': 2120.5003455181345, '1': 17879.499654481864})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_3/1.9

   ==> (oq_map.json) Exact results for r = 1.9 <== 
evals = [-1.023225   -0.55051198]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.0232250037111297
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/2.5
c_z = -0.066271102
c_x = 0.209148615
c_0 = -0.784992480

  t_A = -1.263943124
    <Z>_A = cos(t_A) = 0.302060331
    <X>_A = sin(t_A) = -0.953288811

   ==> Run 3-point Fourier quadrature <==
  t = -1.263943, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.263943, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -0.216746, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.216746, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -2.311141, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -2.311141, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 6.938893903907228e-18, b = -0.06627110183578011, c = 0.2091486150522356

  t_opt = -1.263943124
    <Z>_opt = cos(t_opt) = 0.302060331
    <X>_opt = sin(t_opt) = -0.953288811
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -1.263943, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.263943, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = 0.2716
  <X> = -0.8758999999999999
  Energy = -0.9861849836164013

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.30747801398227953
  <X> = -0.9461408600836738
  Energy = -1.0032534377412647
  measure Z: {'0': 13074.780139822793, '1': 6925.219860177204})
  measure X: {'0': 538.5913991632635, '1': 19461.408600836734})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_3/2.5

   ==> (oq_map.json) Exact results for r = 2.5 <== 
evals = [-1.00438939 -0.56559557]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.0043893858738882
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/2.95
c_z = -0.036185839
c_x = 0.223454420
c_0 = -0.774745750

  t_A = -1.410251678
    <Z>_A = cos(t_A) = 0.159855875
    <X>_A = sin(t_A) = -0.987140364

   ==> Run 3-point Fourier quadrature <==
  t = -1.410252, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.410252, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -0.363054, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.363054, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -2.457449, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -2.457449, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = -8.673617379884035e-18, b = -0.036185838522596964, c = 0.22345441969595456

  t_opt = -1.410251678
    <Z>_opt = cos(t_opt) = 0.159855875
    <X>_opt = sin(t_opt) = -0.987140364
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -1.410252, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.410252, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = 0.1356
  <X> = -0.9060999999999999
  Energy = -0.982124599867688

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.15890096685107313
  <X> = -0.9791336844469327
  Energy = -0.9992874644679282
  measure Z: {'0': 11589.009668510731, '1': 8410.990331489267})
  measure X: {'0': 208.663155530672, '1': 19791.33684446933})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_3/2.95

   ==> (oq_map.json) Exact results for r = 2.95 <== 
evals = [-1.00111115 -0.54838035]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.0011111466652745
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/6.0
c_z = -0.000371898
c_x = 0.268404889
c_0 = -0.731584011

  t_A = -1.569410743
    <Z>_A = cos(t_A) = 0.001385583
    <X>_A = sin(t_A) = -0.999999040

   ==> Run 3-point Fourier quadrature <==
  t = -1.569411, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.569411, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -0.522213, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.522213, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -2.616608, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -2.616608, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = -3.1495649594230277e-17, b = -0.0003718976809355899, c = 0.268404889371658

  t_opt = -1.569410743
    <Z>_opt = cos(t_opt) = 0.001385583
    <X>_opt = sin(t_opt) = -0.999999040
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -1.569411, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.569411, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = -0.015500000000000014
  <X> = -0.9231
  Energy = -0.9793427997850704

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = -0.00617250232108324
  <X> = -0.9977057955871809
  Energy = -0.999370828970888
  measure Z: {'0': 9938.274976789167, '1': 10061.725023210833})
  measure X: {'0': 22.942044128191135, '1': 19977.05795587181})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_3/6.0

   ==> (oq_map.json) Exact results for r = 6.0 <== 
evals = [-0.99998916 -0.46317886]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -0.9999891578395312
e_analytic - evals[0] = 0.000000000000


Set-4

   ==> Run Calibration circuits <== 
n_shots       =      20000
Backend       =      qasm_simulator
Noise model   =      ibmq_armonk
NoiseModel:
  Basis gates: ['id', 'rz', 'sx', 'x']
  Instructions with noise: ['measure', 'sx', 'id', 'x']
  Qubits with noise: [0]
  Specific qubit errors: [('id', (0,)), ('sx', (0,)), ('x', (0,)), ('measure', (0,))]
Calibration matrix =
[[0.95275 0.03855]
 [0.04725 0.96145]]

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/0.6
c_z = -0.975331596
c_x = 0.172588132
c_0 = -0.140879461

  t_A = -0.175140281
    <Z>_A = cos(t_A) = 0.984702105
    <X>_A = sin(t_A) = -0.174246274

   ==> Run 3-point Fourier quadrature <==
  t = -0.175140, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.175140, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = 0.872057, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = 0.872057, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -1.222338, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.222338, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 1.1102230246251565e-16, b = -0.9753315962732314, c = 0.17258813211389312

  t_opt = -0.175140281
    <Z>_opt = cos(t_opt) = 0.984702105
    <X>_opt = sin(t_opt) = -0.174246274
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -0.175140, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.175140, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = 0.8914
  <X> = -0.15219999999999995
  Energy = -1.0365579600436394

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9845766806182812
  <X> = -0.15696784103970085
  Energy = -1.1282589934657667
  measure Z: {'0': 19845.76680618281, '1': 154.23319381718798})
  measure X: {'0': 8430.321589602992, '1': 11569.67841039701})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_4/0.6

   ==> (oq_map.json) Exact results for r = 0.6 <== 
evals = [-1.13136338  0.84960445]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.131363376499586
e_analytic - evals[0] = -0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/0.65
c_z = -0.893017040
c_x = 0.171773983
c_0 = -0.234423207

  t_A = -0.190031414
    <Z>_A = cos(t_A) = 0.981998302
    <X>_A = sin(t_A) = -0.188889744

   ==> Run 3-point Fourier quadrature <==
  t = -0.190031, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.190031, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = 0.857166, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = 0.857166, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -1.237229, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.237229, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 2.220446049250313e-16, b = -0.893017040471162, c = 0.17177398346406272

  t_opt = -0.190031414
    <Z>_opt = cos(t_opt) = 0.981998302
    <X>_opt = sin(t_opt) = -0.188889744
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -0.190031, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.190031, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = 0.8848
  <X> = -0.18979999999999997
  Energy = -1.0571673866481595

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9773572523567109
  <X> = -0.1980966966590756
  Energy = -1.1412477468566145
  measure Z: {'0': 19773.57252356711, '1': 226.42747643289167})
  measure X: {'0': 8019.033033409243, '1': 11980.966966590755})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_4/0.65

   ==> (oq_map.json) Exact results for r = 0.65 <== 
evals = [-1.14381077  0.67496435]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.1438107681038217
e_analytic - evals[0] = -0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/0.7
c_z = -0.818749229
c_x = 0.171060688
c_0 = -0.313783336

  t_A = -0.205966480
    <Z>_A = cos(t_A) = 0.978863784
    <X>_A = sin(t_A) = -0.204513307

   ==> Run 3-point Fourier quadrature <==
  t = -0.205966, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.205966, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = 0.841231, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = 0.841231, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -1.253164, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.253164, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 0.0, b = -0.8187492286324076, c = 0.1710606880831236

  t_opt = -0.205966480
    <Z>_opt = cos(t_opt) = 0.978863784
    <X>_opt = sin(t_opt) = -0.204513307
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -0.205966, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.205966, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = 0.8842000000000001
  <X> = -0.19340000000000002
  Energy = -1.070804541332861

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9767009442756165
  <X> = -0.20203456574064743
  Energy = -1.1480166528631854
  measure Z: {'0': 19767.009442756163, '1': 232.9905572438352})
  measure X: {'0': 7979.654342593525, '1': 12020.345657406473})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_4/0.7

   ==> (oq_map.json) Exact results for r = 0.7 <== 
evals = [-1.15021149  0.52264482]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.1502114912511527
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/0.75
c_z = -0.751762455
c_x = 0.170457573
c_0 = -0.381398162

  t_A = -0.222973719
    <Z>_A = cos(t_A) = 0.975244182
    <X>_A = sin(t_A) = -0.221130698

   ==> Run 3-point Fourier quadrature <==
  t = -0.222974, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.222974, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = 0.824224, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = 0.824224, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -1.270171, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.270171, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = -1.1102230246251565e-16, b = -0.7517624545623148, c = 0.17045757337561962

  t_opt = -0.222973719
    <Z>_opt = cos(t_opt) = 0.975244182
    <X>_opt = sin(t_opt) = -0.221130698
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -0.222974, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.222974, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = 0.8838999999999999
  <X> = -0.2123
  Energy = -1.0820691383071614

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9763727898517824
  <X> = -0.22270837898327916
  Energy = -1.1533608968106264
  measure Z: {'0': 19763.727898517824, '1': 236.27210148217517})
  measure X: {'0': 7772.916210167208, '1': 12227.08378983279})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_4/0.75

   ==> (oq_map.json) Exact results for r = 0.75 <== 
evals = [-1.15224352  0.3894472 ]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.1522435240824251
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/0.8
c_z = -0.691218028
c_x = 0.169960572
c_0 = -0.439308382

  t_A = -0.241102571
    <Z>_A = cos(t_A) = 0.971075301
    <X>_A = sin(t_A) = -0.238773451

   ==> Run 3-point Fourier quadrature <==
  t = -0.241103, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.241103, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = 0.806095, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = 0.806095, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -1.288300, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.288300, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 0.0, b = -0.6912180276548994, c = 0.16996057197909598

  t_opt = -0.241102571
    <Z>_opt = cos(t_opt) = 0.971075301
    <X>_opt = sin(t_opt) = -0.238773451
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -0.241103, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.241103, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = 0.8808
  <X> = -0.2224
  Energy = -1.085932452004433

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9729818118441591
  <X> = -0.23375628964142242
  Energy = -1.151580303656024
  measure Z: {'0': 19729.81811844159, '1': 270.1818815584083})
  measure X: {'0': 7662.437103585776, '1': 12337.562896414225})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_4/0.8

   ==> (oq_map.json) Exact results for r = 0.8 <== 
evals = [-1.15111521  0.27249844]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.1511152082081149
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/0.85
c_z = -0.636488864
c_x = 0.169579229
c_0 = -0.489018448

  t_A = -0.260380693
    <Z>_A = cos(t_A) = 0.966292039
    <X>_A = sin(t_A) = -0.257448431

   ==> Run 3-point Fourier quadrature <==
  t = -0.260381, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.260381, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = 0.786817, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = 0.786817, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -1.307578, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.307578, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = -1.1102230246251565e-16, b = -0.6364888642400289, c = 0.16957922946515439

  t_opt = -0.260380693
    <Z>_opt = cos(t_opt) = 0.966292039
    <X>_opt = sin(t_opt) = -0.257448431
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -0.260381, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.260381, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = 0.8756999999999999
  <X> = -0.24059999999999998
  Energy = -1.0871925090899874

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9674031941951686
  <X> = -0.2536644058130987
  Energy = -1.1477760228816585
  measure Z: {'0': 19674.031941951685, '1': 325.9680580483154})
  measure X: {'0': 7463.355941869014, '1': 12536.644058130987})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_4/0.85

   ==> (oq_map.json) Exact results for r = 0.85 <== 
evals = [-1.14771048  0.16967358]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.147710477292962
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/1.15
c_z = -0.399295092
c_x = 0.169766330
c_0 = -0.672952709

  t_A = -0.402010464
    <Z>_A = cos(t_A) = 0.920276221
    <X>_A = sin(t_A) = -0.391269314

   ==> Run 3-point Fourier quadrature <==
  t = -0.402010, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.402010, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = 0.645187, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = 0.645187, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -1.449208, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.449208, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 0.0, b = -0.39929509169104116, c = 0.16976633007745248

  t_opt = -0.402010464
    <Z>_opt = cos(t_opt) = 0.920276221
    <X>_opt = sin(t_opt) = -0.391269314
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -0.402010, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.402010, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = 0.837
  <X> = -0.3635
  Energy = -1.0688727618058822

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9250711001092237
  <X> = -0.38809888427230554
  Energy = -1.1082151821062347
  measure Z: {'0': 19250.711001092237, '1': 749.2889989077622})
  measure X: {'0': 6119.011157276946, '1': 13880.988842723056})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_4/1.15

   ==> (oq_map.json) Exact results for r = 1.15 <== 
evals = [-1.10683884 -0.23906658]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.1068388428457654
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/1.2
c_z = -0.371037374
c_x = 0.170213481
c_0 = -0.690922272

  t_A = -0.430106748
    <Z>_A = cos(t_A) = 0.908921244
    <X>_A = sin(t_A) = -0.416967830

   ==> Run 3-point Fourier quadrature <==
  t = -0.430107, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.430107, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = 0.617091, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = 0.617091, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -1.477304, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.477304, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 5.551115123125783e-17, b = -0.37103737361427747, c = 0.17021348058116215

  t_opt = -0.430106748
    <Z>_opt = cos(t_opt) = 0.908921244
    <X>_opt = sin(t_opt) = -0.416967830
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -0.430107, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.430107, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = 0.8247
  <X> = -0.39189999999999997
  Energy = -1.0636234570134326

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9116167148817061
  <X> = -0.4191642984448962
  Energy = -1.1005135577602312
  measure Z: {'0': 19116.16714881706, '1': 883.8328511829374})
  measure X: {'0': 5808.357015551038, '1': 14191.642984448961})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_4/1.2

   ==> (oq_map.json) Exact results for r = 1.2 <== 
evals = [-1.09913957 -0.28270497]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.099139568978659
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/1.3
c_z = -0.321395392
c_x = 0.171457744
c_0 = -0.719962104

  t_A = -0.490070852
    <Z>_A = cos(t_A) = 0.882299511
    <X>_A = sin(t_A) = -0.470688402

   ==> Run 3-point Fourier quadrature <==
  t = -0.490071, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.490071, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = 0.557127, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = 0.557127, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -1.537268, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.537268, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 0.0, b = -0.32139539191852423, c = 0.17145774377906556

  t_opt = -0.490070852
    <Z>_opt = cos(t_opt) = 0.882299511
    <X>_opt = sin(t_opt) = -0.470688402
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -0.490071, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.490071, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = 0.7979
  <X> = -0.43670000000000003
  Energy = -1.0512790834378543

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.8823014658067975
  <X> = -0.4681688909197655
  Energy = -1.0838009106556603
  measure Z: {'0': 18823.014658067976, '1': 1176.9853419320257})
  measure X: {'0': 5318.311090802345, '1': 14681.688909197654})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_4/1.3

   ==> (oq_map.json) Exact results for r = 1.3 <== 
evals = [-1.08423227 -0.35569193]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.0842322722775133
e_analytic - evals[0] = -0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/1.45
c_z = -0.260906520
c_x = 0.174167246
c_0 = -0.750292491

  t_A = -0.588611503
    <Z>_A = cos(t_A) = 0.831712383
    <X>_A = sin(t_A) = -0.555206729

   ==> Run 3-point Fourier quadrature <==
  t = -0.588612, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.588612, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = 0.458586, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = 0.458586, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -1.635809, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.635809, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 2.7755575615628914e-17, b = -0.26090651987640007, c = 0.17416724617012774

  t_opt = -0.588611503
    <Z>_opt = cos(t_opt) = 0.831712383
    <X>_opt = sin(t_opt) = -0.555206729
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -0.588612, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.588612, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = 0.7456
  <X> = -0.5248999999999999
  Energy = -1.036244779352514

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.8250929783310927
  <X> = -0.5646466855296204
  Energy = -1.0639075864465737
  measure Z: {'0': 18250.929783310927, '1': 1749.0702166890728})
  measure X: {'0': 4353.533144703796, '1': 15646.466855296203})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_4/1.45

   ==> (oq_map.json) Exact results for r = 1.45 <== 
evals = [-1.0639905  -0.43659448]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.0639905010555568
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/1.6
c_z = -0.213224929
c_x = 0.177807023
c_0 = -0.769382665

  t_A = -0.695069165
    <Z>_A = cos(t_A) = 0.768009407
    <X>_A = sin(t_A) = -0.640438561

   ==> Run 3-point Fourier quadrature <==
  t = -0.695069, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.695069, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = 0.352128, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = 0.352128, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -1.742267, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.742267, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 2.7755575615628914e-17, b = -0.2132249287909129, c = 0.17780702316230246

  t_opt = -0.695069165
    <Z>_opt = cos(t_opt) = 0.768009407
    <X>_opt = sin(t_opt) = -0.640438561
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -0.695069, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.695069, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = 0.6891
  <X> = -0.5926
  Energy = -1.021684405562211

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.7632903080414628
  <X> = -0.6387005046211416
  Energy = -1.0457006222042928
  measure Z: {'0': 17632.903080414628, '1': 2367.0969195853727})
  measure X: {'0': 3612.9949537885836, '1': 16387.00504621142})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_4/1.6

   ==> (oq_map.json) Exact results for r = 1.6 <== 
evals = [-1.04701589 -0.49174944]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.0470158904222164
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/1.9
c_z = -0.144203901
c_x = 0.187268886
c_0 = -0.786868492

  t_A = -0.914594616
    <Z>_A = cos(t_A) = 0.610111817
    <X>_A = sin(t_A) = -0.792315323

   ==> Run 3-point Fourier quadrature <==
  t = -0.914595, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.914595, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = 0.132603, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = 0.132603, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -1.961792, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.961792, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = -5.551115123125783e-17, b = -0.1442039010759991, c = 0.18726888604283615

  t_opt = -0.914594616
    <Z>_opt = cos(t_opt) = 0.610111817
    <X>_opt = sin(t_opt) = -0.792315323
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -0.914595, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.914595, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = 0.5541
  <X> = -0.7318
  Energy = -1.0038152441025254

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.6156202150426444
  <X> = -0.7909647779356127
  Energy = -1.0237664211636832
  measure Z: {'0': 16156.202150426445, '1': 3843.7978495735556})
  measure X: {'0': 2090.3522206438734, '1': 17909.647779356124})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_4/1.9

   ==> (oq_map.json) Exact results for r = 1.9 <== 
evals = [-1.023225   -0.55051198]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.0232250037111297
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/2.5
c_z = -0.066271102
c_x = 0.209148615
c_0 = -0.784992480

  t_A = -1.263943124
    <Z>_A = cos(t_A) = 0.302060331
    <X>_A = sin(t_A) = -0.953288811

   ==> Run 3-point Fourier quadrature <==
  t = -1.263943, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.263943, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -0.216746, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.216746, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -2.311141, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -2.311141, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 1.734723475976807e-17, b = -0.06627110183578011, c = 0.20914861505223561

  t_opt = -1.263943124
    <Z>_opt = cos(t_opt) = 0.302060331
    <X>_opt = sin(t_opt) = -0.953288811
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -1.263943, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.263943, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = 0.27249999999999996
  <X> = -0.8802000000000001
  Energy = -0.9871439666527781

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.3075913366854909
  <X> = -0.9532924961724123
  Energy = -1.0047567025449868
  measure Z: {'0': 13075.91336685491, '1': 6924.086633145092})
  measure X: {'0': 467.07503827587533, '1': 19532.924961724126})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_4/2.5

   ==> (oq_map.json) Exact results for r = 2.5 <== 
evals = [-1.00438939 -0.56559557]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.0043893858738882
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/2.95
c_z = -0.036185839
c_x = 0.223454420
c_0 = -0.774745750

  t_A = -1.410251678
    <Z>_A = cos(t_A) = 0.159855875
    <X>_A = sin(t_A) = -0.987140364

   ==> Run 3-point Fourier quadrature <==
  t = -1.410252, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.410252, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -0.363054, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.363054, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -2.457449, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -2.457449, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 6.938893903907228e-18, b = -0.03618583852259694, c = 0.22345441969595456

  t_opt = -1.410251678
    <Z>_opt = cos(t_opt) = 0.159855875
    <X>_opt = sin(t_opt) = -0.987140364
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -1.410252, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.410252, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = 0.1391
  <X> = -0.9103000000000001
  Energy = -0.9831897588652402

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.16167140677120473
  <X> = -0.986217459249812
  Energy = -1.0009706159473488
  measure Z: {'0': 11616.714067712048, '1': 8383.285932287954})
  measure X: {'0': 137.82540750188147, '1': 19862.17459249812})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_4/2.95

   ==> (oq_map.json) Exact results for r = 2.95 <== 
evals = [-1.00111115 -0.54838035]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.0011111466652745
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/6.0
c_z = -0.000371898
c_x = 0.268404889
c_0 = -0.731584011

  t_A = -1.569410743
    <Z>_A = cos(t_A) = 0.001385583
    <X>_A = sin(t_A) = -0.999999040

   ==> Run 3-point Fourier quadrature <==
  t = -1.569411, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.569411, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -0.522213, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.522213, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -2.616608, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -2.616608, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 2.6284279386248194e-17, b = -0.0003718976809356193, c = 0.2684048893716581

  t_opt = -1.569410743
    <Z>_opt = cos(t_opt) = 0.001385583
    <X>_opt = sin(t_opt) = -0.999999040
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -1.569411, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.569411, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = -0.010899999999999965
  <X> = -0.9276
  Energy = -0.9805523325165751

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = -0.0024064769729381097
  <X> = -1.0
  Energy = -0.9999880052286
  measure Z: {'0': 9975.93523027062, '1': 10024.06476972938})
  measure X: {'1': 20000.0, '0': 0})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_4/6.0

   ==> (oq_map.json) Exact results for r = 6.0 <== 
evals = [-0.99998916 -0.46317886]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -0.9999891578395312
e_analytic - evals[0] = 0.000000000000


Set-5

   ==> Run Calibration circuits <== 
n_shots       =      20000
Backend       =      qasm_simulator
Noise model   =      ibmq_armonk
NoiseModel:
  Basis gates: ['id', 'rz', 'sx', 'x']
  Instructions with noise: ['measure', 'sx', 'id', 'x']
  Qubits with noise: [0]
  Specific qubit errors: [('id', (0,)), ('sx', (0,)), ('x', (0,)), ('measure', (0,))]
Calibration matrix =
[[0.95725 0.03925]
 [0.04275 0.96075]]

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/0.6
c_z = -0.975331596
c_x = 0.172588132
c_0 = -0.140879461

  t_A = -0.175140281
    <Z>_A = cos(t_A) = 0.984702105
    <X>_A = sin(t_A) = -0.174246274

   ==> Run 3-point Fourier quadrature <==
  t = -0.175140, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.175140, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = 0.872057, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = 0.872057, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -1.222338, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.222338, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 2.220446049250313e-16, b = -0.9753315962732315, c = 0.17258813211389318

  t_opt = -0.175140281
    <Z>_opt = cos(t_opt) = 0.984702105
    <X>_opt = sin(t_opt) = -0.174246274
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -0.175140, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.175140, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = 0.8902000000000001
  <X> = -0.17460000000000003
  Energy = -1.0392535362874629

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9735294319838729
  <X> = -0.1863834422437411
  Energy = -1.1225610464875544
  measure Z: {'0': 19735.29431983873, '1': 264.70568016126924})
  measure X: {'0': 8136.1655775625895, '1': 11863.83442243741})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_5/0.6

   ==> (oq_map.json) Exact results for r = 0.6 <== 
evals = [-1.13136338  0.84960445]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.131363376499586
e_analytic - evals[0] = -0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/0.65
c_z = -0.893017040
c_x = 0.171773983
c_0 = -0.234423207

  t_A = -0.190031414
    <Z>_A = cos(t_A) = 0.981998302
    <X>_A = sin(t_A) = -0.188889744

   ==> Run 3-point Fourier quadrature <==
  t = -0.190031, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.190031, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = 0.857166, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = 0.857166, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -1.237229, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.237229, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = -1.1102230246251565e-16, b = -0.8930170404711617, c = 0.17177398346406264

  t_opt = -0.190031414
    <Z>_opt = cos(t_opt) = 0.981998302
    <X>_opt = sin(t_opt) = -0.188889744
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -0.190031, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.190031, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = 0.8934
  <X> = -0.18260000000000004
  Energy = -1.0636105605152704

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9770152804776229
  <X> = -0.1950980395952751
  Energy = -1.1404272688723351
  measure Z: {'0': 19770.15280477623, '1': 229.84719522377105})
  measure X: {'0': 8049.019604047249, '1': 11950.98039595275})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_5/0.65

   ==> (oq_map.json) Exact results for r = 0.65 <== 
evals = [-1.14381077  0.67496435]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.1438107681038217
e_analytic - evals[0] = -0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/0.7
c_z = -0.818749229
c_x = 0.171060688
c_0 = -0.313783336

  t_A = -0.205966480
    <Z>_A = cos(t_A) = 0.978863784
    <X>_A = sin(t_A) = -0.204513307

   ==> Run 3-point Fourier quadrature <==
  t = -0.205966, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.205966, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = 0.841231, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = 0.841231, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -1.253164, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.253164, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = -1.1102230246251565e-16, b = -0.8187492286324075, c = 0.17106068808312364

  t_opt = -0.205966480
    <Z>_opt = cos(t_opt) = 0.978863784
    <X>_opt = sin(t_opt) = -0.204513307
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -0.205966, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.205966, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = 0.8867
  <X> = -0.20530000000000004
  Energy = -1.0748870365926313

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9697168146733699
  <X> = -0.21982570878700836
  Energy = -1.145341767309973
  measure Z: {'0': 19697.1681467337, '1': 302.83185326629933})
  measure X: {'0': 7801.7429121299165, '1': 12198.257087870084})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_5/0.7

   ==> (oq_map.json) Exact results for r = 0.7 <== 
evals = [-1.15021149  0.52264482]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.1502114912511527
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/0.75
c_z = -0.751762455
c_x = 0.170457573
c_0 = -0.381398162

  t_A = -0.222973719
    <Z>_A = cos(t_A) = 0.975244182
    <X>_A = sin(t_A) = -0.221130698

   ==> Run 3-point Fourier quadrature <==
  t = -0.222974, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.222974, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = 0.824224, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = 0.824224, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -1.270171, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.270171, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 1.1102230246251565e-16, b = -0.7517624545623149, c = 0.17045757337561962

  t_opt = -0.222973719
    <Z>_opt = cos(t_opt) = 0.975244182
    <X>_opt = sin(t_opt) = -0.221130698
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -0.222974, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.222974, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = 0.8847
  <X> = -0.21100000000000002
  Energy = -1.0824489534254231

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9675381263769022
  <X> = -0.22603485934718115
  Energy = -1.1472863522822307
  measure Z: {'0': 19675.38126376902, '1': 324.61873623097887})
  measure X: {'0': 7739.65140652819, '1': 12260.348593471812})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_5/0.75

   ==> (oq_map.json) Exact results for r = 0.75 <== 
evals = [-1.15224352  0.3894472 ]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.1522435240824251
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/0.8
c_z = -0.691218028
c_x = 0.169960572
c_0 = -0.439308382

  t_A = -0.241102571
    <Z>_A = cos(t_A) = 0.971075301
    <X>_A = sin(t_A) = -0.238773451

   ==> Run 3-point Fourier quadrature <==
  t = -0.241103, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.241103, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = 0.806095, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = 0.806095, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -1.288300, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.288300, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 0.0, b = -0.6912180276548994, c = 0.16996057197909595

  t_opt = -0.241102571
    <Z>_opt = cos(t_opt) = 0.971075301
    <X>_opt = sin(t_opt) = -0.238773451
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -0.241103, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.241103, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = 0.8773
  <X> = -0.2272
  Energy = -1.0843289996531404

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9594771241830357
  <X> = -0.24368191821400137
  Energy = -1.1439325855962543
  measure Z: {'0': 19594.771241830356, '1': 405.2287581696422})
  measure X: {'0': 7563.180817859986, '1': 12436.819182140014})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_5/0.8

   ==> (oq_map.json) Exact results for r = 0.8 <== 
evals = [-1.15111521  0.27249844]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.1511152082081149
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/0.85
c_z = -0.636488864
c_x = 0.169579229
c_0 = -0.489018448

  t_A = -0.260380693
    <Z>_A = cos(t_A) = 0.966292039
    <X>_A = sin(t_A) = -0.257448431

   ==> Run 3-point Fourier quadrature <==
  t = -0.260381, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.260381, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = 0.786817, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = 0.786817, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -1.307578, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.307578, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 1.1102230246251565e-16, b = -0.6364888642400293, c = 0.16957922946515444

  t_opt = -0.260380693
    <Z>_opt = cos(t_opt) = 0.966292039
    <X>_opt = sin(t_opt) = -0.257448431
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -0.260381, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.260381, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = 0.8814
  <X> = -0.23829999999999996
  Energy = -1.0904304633883857

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9639433551194281
  <X> = -0.2557734206609612
  Energy = -1.1459315189507182
  measure Z: {'0': 19639.43355119428, '1': 360.5664488057196})
  measure X: {'0': 7442.265793390388, '1': 12557.734206609612})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_5/0.85

   ==> (oq_map.json) Exact results for r = 0.85 <== 
evals = [-1.14771048  0.16967358]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.147710477292962
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/1.15
c_z = -0.399295092
c_x = 0.169766330
c_0 = -0.672952709

  t_A = -0.402010464
    <Z>_A = cos(t_A) = 0.920276221
    <X>_A = sin(t_A) = -0.391269314

   ==> Run 3-point Fourier quadrature <==
  t = -0.402010, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.402010, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = 0.645187, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = 0.645187, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -1.449208, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.449208, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 1.1102230246251565e-16, b = -0.3992950916910412, c = 0.16976633007745257

  t_opt = -0.402010464
    <Z>_opt = cos(t_opt) = 0.920276221
    <X>_opt = sin(t_opt) = -0.391269314
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -0.402010, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.402010, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = 0.8351999999999999
  <X> = -0.36460000000000004
  Energy = -1.0683407736039234

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9136165577354265
  <X> = -0.39335511942531537
  Energy = -1.104533771310761
  measure Z: {'0': 19136.165577354266, '1': 863.8344226457358})
  measure X: {'0': 6066.448805746846, '1': 13933.551194253154})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_5/1.15

   ==> (oq_map.json) Exact results for r = 1.15 <== 
evals = [-1.10683884 -0.23906658]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.1068388428457654
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/1.2
c_z = -0.371037374
c_x = 0.170213481
c_0 = -0.690922272

  t_A = -0.430106748
    <Z>_A = cos(t_A) = 0.908921244
    <X>_A = sin(t_A) = -0.416967830

   ==> Run 3-point Fourier quadrature <==
  t = -0.430107, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.430107, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = 0.617091, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = 0.617091, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -1.477304, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.477304, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 0.0, b = -0.37103737361427735, c = 0.17021348058116215

  t_opt = -0.430106748
    <Z>_opt = cos(t_opt) = 0.908921244
    <X>_opt = sin(t_opt) = -0.416967830
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -0.430107, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.430107, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = 0.8219000000000001
  <X> = -0.3897
  Energy = -1.062210082710034

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.8991285403697171
  <X> = -0.42069716934680074
  Energy = -1.0961408935795607
  measure Z: {'0': 18991.28540369717, '1': 1008.7145963028286})
  measure X: {'0': 5793.028306531993, '1': 14206.971693468007})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_5/1.2

   ==> (oq_map.json) Exact results for r = 1.2 <== 
evals = [-1.09913957 -0.28270497]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.099139568978659
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/1.3
c_z = -0.321395392
c_x = 0.171457744
c_0 = -0.719962104

  t_A = -0.490070852
    <Z>_A = cos(t_A) = 0.882299511
    <X>_A = sin(t_A) = -0.470688402

   ==> Run 3-point Fourier quadrature <==
  t = -0.490071, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.490071, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = 0.557127, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = 0.557127, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -1.537268, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.537268, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = -5.551115123125783e-17, b = -0.3213953919185241, c = 0.17145774377906553

  t_opt = -0.490070852
    <Z>_opt = cos(t_opt) = 0.882299511
    <X>_opt = sin(t_opt) = -0.470688402
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -0.490071, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.490071, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = 0.7944
  <X> = -0.4336
  Energy = -1.0496226805604243

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.86917210202298
  <X> = -0.4685185183824642
  Energy = -1.0796411399726369
  measure Z: {'0': 18691.721020229805, '1': 1308.2789797701982})
  measure X: {'0': 5314.814816175358, '1': 14685.185183824642})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_5/1.3

   ==> (oq_map.json) Exact results for r = 1.3 <== 
evals = [-1.08423227 -0.35569193]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.0842322722775133
e_analytic - evals[0] = -0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/1.45
c_z = -0.260906520
c_x = 0.174167246
c_0 = -0.750292491

  t_A = -0.588611503
    <Z>_A = cos(t_A) = 0.831712383
    <X>_A = sin(t_A) = -0.555206729

   ==> Run 3-point Fourier quadrature <==
  t = -0.588612, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.588612, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = 0.458586, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = 0.458586, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -1.635809, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.635809, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 2.7755575615628914e-17, b = -0.26090651987640007, c = 0.17416724617012774

  t_opt = -0.588611503
    <Z>_opt = cos(t_opt) = 0.831712383
    <X>_opt = sin(t_opt) = -0.555206729
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -0.588612, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.588612, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = 0.7524
  <X> = -0.5179
  Energy = -1.0367997729644827

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.8234204793027028
  <X> = -0.5603485842478223
  Energy = -1.0627226320815688
  measure Z: {'0': 18234.204793027027, '1': 1765.7952069729738})
  measure X: {'0': 4396.514157521778, '1': 15603.485842478223})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_5/1.45

   ==> (oq_map.json) Exact results for r = 1.45 <== 
evals = [-1.0639905  -0.43659448]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.0639905010555568
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/1.6
c_z = -0.213224929
c_x = 0.177807023
c_0 = -0.769382665

  t_A = -0.695069165
    <Z>_A = cos(t_A) = 0.768009407
    <X>_A = sin(t_A) = -0.640438561

   ==> Run 3-point Fourier quadrature <==
  t = -0.695069, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.695069, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = 0.352128, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = 0.352128, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -1.742267, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.742267, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = -2.7755575615628914e-17, b = -0.21322492879091287, c = 0.17780702316230246

  t_opt = -0.695069165
    <Z>_opt = cos(t_opt) = 0.768009407
    <X>_opt = sin(t_opt) = -0.640438561
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -0.695069, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.695069, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = 0.6987000000000001
  <X> = -0.5942000000000001
  Energy = -1.0240158561156634

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.7649237480030389
  <X> = -0.643464052393716
  Energy = -1.046895904572917
  measure Z: {'0': 17649.23748003039, '1': 2350.7625199696113})
  measure X: {'0': 3565.3594760628416, '1': 16434.64052393716})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_5/1.6

   ==> (oq_map.json) Exact results for r = 1.6 <== 
evals = [-1.04701589 -0.49174944]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.0470158904222164
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/1.9
c_z = -0.144203901
c_x = 0.187268886
c_0 = -0.786868492

  t_A = -0.914594616
    <Z>_A = cos(t_A) = 0.610111817
    <X>_A = sin(t_A) = -0.792315323

   ==> Run 3-point Fourier quadrature <==
  t = -0.914595, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.914595, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = 0.132603, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = 0.132603, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -1.961792, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.961792, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = -1.3877787807814457e-17, b = -0.1442039010759991, c = 0.18726888604283617

  t_opt = -0.914594616
    <Z>_opt = cos(t_opt) = 0.610111817
    <X>_opt = sin(t_opt) = -0.792315323
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -0.914595, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.914595, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = 0.5553999999999999
  <X> = -0.7317
  Energy = -1.00398398228532

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.6088235293353083
  <X> = -0.7932461873774019
  Energy = -1.0232135495750692
  measure Z: {'0': 16088.235293353082, '1': 3911.764706646917})
  measure X: {'0': 2067.5381262259807, '1': 17932.46187377402})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_5/1.9

   ==> (oq_map.json) Exact results for r = 1.9 <== 
evals = [-1.023225   -0.55051198]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.0232250037111297
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/2.5
c_z = -0.066271102
c_x = 0.209148615
c_0 = -0.784992480

  t_A = -1.263943124
    <Z>_A = cos(t_A) = 0.302060331
    <X>_A = sin(t_A) = -0.953288811

   ==> Run 3-point Fourier quadrature <==
  t = -1.263943, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.263943, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -0.216746, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.216746, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -2.311141, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -2.311141, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 5.551115123125783e-17, b = -0.06627110183578011, c = 0.20914861505223564

  t_opt = -1.263943124
    <Z>_opt = cos(t_opt) = 0.302060331
    <X>_opt = sin(t_opt) = -0.953288811
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -1.263943, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.263943, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = 0.26509999999999995
  <X> = -0.8839999999999999
  Energy = -0.9874483252363919

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.2925925928411032
  <X> = -0.9591503267988691
  Energy = -1.0049878764270006
  measure Z: {'0': 12925.925928411032, '1': 7074.07407158897})
  measure X: {'0': 408.4967320113108, '1': 19591.50326798869})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_5/2.5

   ==> (oq_map.json) Exact results for r = 2.5 <== 
evals = [-1.00438939 -0.56559557]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.0043893858738882
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/2.95
c_z = -0.036185839
c_x = 0.223454420
c_0 = -0.774745750

  t_A = -1.410251678
    <Z>_A = cos(t_A) = 0.159855875
    <X>_A = sin(t_A) = -0.987140364

   ==> Run 3-point Fourier quadrature <==
  t = -1.410252, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.410252, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -0.363054, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.363054, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -2.457449, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -2.457449, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = -8.673617379884035e-18, b = -0.03618583852259694, c = 0.22345441969595456

  t_opt = -1.410251678
    <Z>_opt = cos(t_opt) = 0.159855875
    <X>_opt = sin(t_opt) = -0.987140364
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -1.410252, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.410252, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = 0.13290000000000002
  <X> = -0.9124000000000001
  Energy = -0.9834346609477616

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.1485838784173284
  <X> = -0.9900871460136861
  Energy = -1.0013617313699021
  measure Z: {'0': 11485.838784173284, '1': 8514.161215826716})
  measure X: {'0': 99.12853986313809, '1': 19900.871460136863})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_5/2.95

   ==> (oq_map.json) Exact results for r = 2.95 <== 
evals = [-1.00111115 -0.54838035]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.0011111466652745
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/6.0
c_z = -0.000371898
c_x = 0.268404889
c_0 = -0.731584011

  t_A = -1.569410743
    <Z>_A = cos(t_A) = 0.001385583
    <X>_A = sin(t_A) = -0.999999040

   ==> Run 3-point Fourier quadrature <==
  t = -1.569411, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.569411, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -0.522213, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.522213, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -2.616608, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -2.616608, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 1.2907935083208283e-17, b = -0.00037189768093559474, c = 0.2684048893716581

  t_opt = -1.569410743
    <Z>_opt = cos(t_opt) = 0.001385583
    <X>_opt = sin(t_opt) = -0.999999040
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -1.569411, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.569411, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = -0.02130000000000004
  <X> = -0.9267000000000001
  Energy = -0.9803069003802589

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = -0.019389978213320835
  <X> = -1.0
  Energy = -0.9999816891038744
  measure Z: {'0': 9806.100217866791, '1': 10193.899782133209})
  measure X: {'1': 20000.0, '0': 0})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_5/6.0

   ==> (oq_map.json) Exact results for r = 6.0 <== 
evals = [-0.99998916 -0.46317886]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -0.9999891578395312
e_analytic - evals[0] = 0.000000000000


Set-6

   ==> Run Calibration circuits <== 
n_shots       =      20000
Backend       =      qasm_simulator
Noise model   =      ibmq_armonk
NoiseModel:
  Basis gates: ['id', 'rz', 'sx', 'x']
  Instructions with noise: ['measure', 'sx', 'id', 'x']
  Qubits with noise: [0]
  Specific qubit errors: [('id', (0,)), ('sx', (0,)), ('x', (0,)), ('measure', (0,))]
Calibration matrix =
[[0.9554 0.0389]
 [0.0446 0.9611]]

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/0.6
c_z = -0.975331596
c_x = 0.172588132
c_0 = -0.140879461

  t_A = -0.175140281
    <Z>_A = cos(t_A) = 0.984702105
    <X>_A = sin(t_A) = -0.174246274

   ==> Run 3-point Fourier quadrature <==
  t = -0.175140, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.175140, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = 0.872057, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = 0.872057, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -1.222338, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.222338, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 0.0, b = -0.9753315962732313, c = 0.17258813211389315

  t_opt = -0.175140281
    <Z>_opt = cos(t_opt) = 0.984702105
    <X>_opt = sin(t_opt) = -0.174246274
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -0.175140, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.175140, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = 0.8896
  <X> = -0.1652
  Energy = -1.0370460088878282

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9768684982763044
  <X> = -0.17403164259340476
  Energy = -1.1236859693147172
  measure Z: {'0': 19768.68498276304, '1': 231.31501723695825})
  measure X: {'0': 8259.683574065952, '1': 11740.316425934048})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_6/0.6

   ==> (oq_map.json) Exact results for r = 0.6 <== 
evals = [-1.13136338  0.84960445]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.131363376499586
e_analytic - evals[0] = -0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/0.65
c_z = -0.893017040
c_x = 0.171773983
c_0 = -0.234423207

  t_A = -0.190031414
    <Z>_A = cos(t_A) = 0.981998302
    <X>_A = sin(t_A) = -0.188889744

   ==> Run 3-point Fourier quadrature <==
  t = -0.190031, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.190031, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = 0.857166, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = 0.857166, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -1.237229, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.237229, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 1.1102230246251565e-16, b = -0.8930170404711619, c = 0.17177398346406272

  t_opt = -0.190031414
    <Z>_opt = cos(t_opt) = 0.981998302
    <X>_opt = sin(t_opt) = -0.188889744
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -0.190031, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.190031, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = 0.8919999999999999
  <X> = -0.17809999999999998
  Energy = -1.0615873537330223

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9794871795692957
  <X> = -0.1881069285337748
  Energy = -1.1414338258876506
  measure Z: {'0': 19794.871795692958, '1': 205.12820430704443})
  measure X: {'0': 8118.930714662251, '1': 11881.069285337748})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_6/0.65

   ==> (oq_map.json) Exact results for r = 0.65 <== 
evals = [-1.14381077  0.67496435]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.1438107681038217
e_analytic - evals[0] = -0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/0.7
c_z = -0.818749229
c_x = 0.171060688
c_0 = -0.313783336

  t_A = -0.205966480
    <Z>_A = cos(t_A) = 0.978863784
    <X>_A = sin(t_A) = -0.204513307

   ==> Run 3-point Fourier quadrature <==
  t = -0.205966, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.205966, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = 0.841231, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = 0.841231, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -1.253164, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.253164, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = -1.1102230246251565e-16, b = -0.8187492286324075, c = 0.17106068808312355

  t_opt = -0.205966480
    <Z>_opt = cos(t_opt) = 0.978863784
    <X>_opt = sin(t_opt) = -0.204513307
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -0.205966, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.205966, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = 0.8848
  <X> = -0.20029999999999998
  Energy = -1.0724761096178141

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9716312357713832
  <X> = -0.21232951477768663
  Energy = -1.14562689400201
  measure Z: {'0': 19716.312357713832, '1': 283.6876422861676})
  measure X: {'0': 7876.7048522231335, '1': 12123.295147776866})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_6/0.7

   ==> (oq_map.json) Exact results for r = 0.7 <== 
evals = [-1.15021149  0.52264482]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.1502114912511527
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/0.75
c_z = -0.751762455
c_x = 0.170457573
c_0 = -0.381398162

  t_A = -0.222973719
    <Z>_A = cos(t_A) = 0.975244182
    <X>_A = sin(t_A) = -0.221130698

   ==> Run 3-point Fourier quadrature <==
  t = -0.222974, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.222974, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = 0.824224, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = 0.824224, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -1.270171, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.270171, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 0.0, b = -0.7517624545623149, c = 0.17045757337561956

  t_opt = -0.222973719
    <Z>_opt = cos(t_opt) = 0.975244182
    <X>_opt = sin(t_opt) = -0.221130698
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -0.222974, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.222974, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = 0.8892
  <X> = -0.21249999999999997
  Energy = -1.0860875708310171

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9764320755118261
  <X> = -0.22564102564547017
  Energy = -1.1539053573775462
  measure Z: {'0': 19764.320755118257, '1': 235.67924488174054})
  measure X: {'0': 7743.5897435453, '1': 12256.410256454703})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_6/0.75

   ==> (oq_map.json) Exact results for r = 0.75 <== 
evals = [-1.15224352  0.3894472 ]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.1522435240824251
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/0.8
c_z = -0.691218028
c_x = 0.169960572
c_0 = -0.439308382

  t_A = -0.241102571
    <Z>_A = cos(t_A) = 0.971075301
    <X>_A = sin(t_A) = -0.238773451

   ==> Run 3-point Fourier quadrature <==
  t = -0.241103, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.241103, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = 0.806095, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = 0.806095, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -1.288300, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.288300, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 0.0, b = -0.6912180276548994, c = 0.16996057197909595

  t_opt = -0.241102571
    <Z>_opt = cos(t_opt) = 0.971075301
    <X>_opt = sin(t_opt) = -0.238773451
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -0.241103, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.241103, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = 0.8794
  <X> = -0.23770000000000002
  Energy = -1.0875651435169962

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9657392253228261
  <X> = -0.2531369342003619
  Energy = -1.149868042720189
  measure Z: {'0': 19657.39225322826, '1': 342.6077467717402})
  measure X: {'0': 7468.63065799638, '1': 12531.369342003618})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_6/0.8

   ==> (oq_map.json) Exact results for r = 0.8 <== 
evals = [-1.15111521  0.27249844]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.1511152082081149
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/0.85
c_z = -0.636488864
c_x = 0.169579229
c_0 = -0.489018448

  t_A = -0.260380693
    <Z>_A = cos(t_A) = 0.966292039
    <X>_A = sin(t_A) = -0.257448431

   ==> Run 3-point Fourier quadrature <==
  t = -0.260381, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.260381, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = 0.786817, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = 0.786817, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -1.307578, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.307578, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = -1.1102230246251565e-16, b = -0.6364888642400289, c = 0.16957922946515436

  t_opt = -0.260380693
    <Z>_opt = cos(t_opt) = 0.966292039
    <X>_opt = sin(t_opt) = -0.257448431
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -0.260381, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.260381, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = 0.8777999999999999
  <X> = -0.24289999999999995
  Energy = -1.0889191679326613

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9639934535087641
  <X> = -0.25881069285370006
  Energy = -1.1464784642957675
  measure Z: {'0': 19639.934535087643, '1': 360.0654649123586})
  measure X: {'0': 7411.8930714630005, '1': 12588.106928537001})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_6/0.85

   ==> (oq_map.json) Exact results for r = 0.85 <== 
evals = [-1.14771048  0.16967358]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.147710477292962
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/1.15
c_z = -0.399295092
c_x = 0.169766330
c_0 = -0.672952709

  t_A = -0.402010464
    <Z>_A = cos(t_A) = 0.920276221
    <X>_A = sin(t_A) = -0.391269314

   ==> Run 3-point Fourier quadrature <==
  t = -0.402010, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.402010, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = 0.645187, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = 0.645187, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -1.449208, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.449208, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = -5.551115123125783e-17, b = -0.3992950916910411, c = 0.16976633007745248

  t_opt = -0.402010464
    <Z>_opt = cos(t_opt) = 0.920276221
    <X>_opt = sin(t_opt) = -0.391269314
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -0.402010, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.402010, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = 0.8315999999999999
  <X> = -0.3567
  Energy = -1.065562157266224

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9135842880557216
  <X> = -0.38297872350985823
  Energy = -1.1027593235320468
  measure Z: {'0': 19135.84288055721, '1': 864.1571194427862})
  measure X: {'0': 6170.212764901416, '1': 13829.787235098582})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_6/1.15

   ==> (oq_map.json) Exact results for r = 1.15 <== 
evals = [-1.10683884 -0.23906658]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.1068388428457654
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/1.2
c_z = -0.371037374
c_x = 0.170213481
c_0 = -0.690922272

  t_A = -0.430106748
    <Z>_A = cos(t_A) = 0.908921244
    <X>_A = sin(t_A) = -0.416967830

   ==> Run 3-point Fourier quadrature <==
  t = -0.430107, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.430107, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = 0.617091, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = 0.617091, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -1.477304, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.477304, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 1.6653345369377348e-16, b = -0.3710373736142776, c = 0.17021348058116217

  t_opt = -0.430106748
    <Z>_opt = cos(t_opt) = 0.908921244
    <X>_opt = sin(t_opt) = -0.416967830
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -0.430107, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.430107, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = 0.8245
  <X> = -0.381
  Energy = -1.061693922600375

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9058374254019524
  <X> = -0.40949263502503647
  Energy = -1.0967229778766028
  measure Z: {'0': 19058.374254019527, '1': 941.6257459804748})
  measure X: {'0': 5905.073649749635, '1': 14094.926350250365})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_6/1.2

   ==> (oq_map.json) Exact results for r = 1.2 <== 
evals = [-1.09913957 -0.28270497]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.099139568978659
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/1.3
c_z = -0.321395392
c_x = 0.171457744
c_0 = -0.719962104

  t_A = -0.490070852
    <Z>_A = cos(t_A) = 0.882299511
    <X>_A = sin(t_A) = -0.470688402

   ==> Run 3-point Fourier quadrature <==
  t = -0.490071, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.490071, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = 0.557127, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = 0.557127, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -1.537268, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.537268, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 0.0, b = -0.3213953919185242, c = 0.17145774377906559

  t_opt = -0.490070852
    <Z>_opt = cos(t_opt) = 0.882299511
    <X>_opt = sin(t_opt) = -0.470688402
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -0.490071, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.490071, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = 0.7918000000000001
  <X> = -0.43470000000000003
  Energy = -1.048975656059593

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.8701582106169939
  <X> = -0.4680851064496359
  Energy = -1.0798837588985546
  measure Z: {'0': 18701.58210616994, '1': 1298.4178938300618})
  measure X: {'0': 5319.14893550364, '1': 14680.851064496359})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_6/1.3

   ==> (oq_map.json) Exact results for r = 1.3 <== 
evals = [-1.08423227 -0.35569193]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.0842322722775133
e_analytic - evals[0] = -0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/1.45
c_z = -0.260906520
c_x = 0.174167246
c_0 = -0.750292491

  t_A = -0.588611503
    <Z>_A = cos(t_A) = 0.831712383
    <X>_A = sin(t_A) = -0.555206729

   ==> Run 3-point Fourier quadrature <==
  t = -0.588612, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.588612, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = 0.458586, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = 0.458586, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -1.635809, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.635809, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 2.7755575615628914e-17, b = -0.26090651987640007, c = 0.17416724617012772

  t_opt = -0.588611503
    <Z>_opt = cos(t_opt) = 0.831712383
    <X>_opt = sin(t_opt) = -0.555206729
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -0.588612, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.588612, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = 0.7479
  <X> = -0.5161
  Energy = -1.0353121925819326

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.8222585955528064
  <X> = -0.5569012546764853
  Energy = -1.0618190771378018
  measure Z: {'0': 18222.585955528066, '1': 1777.4140444719337})
  measure X: {'0': 4430.987453235146, '1': 15569.012546764854})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_6/1.45

   ==> (oq_map.json) Exact results for r = 1.45 <== 
evals = [-1.0639905  -0.43659448]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.0639905010555568
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/1.6
c_z = -0.213224929
c_x = 0.177807023
c_0 = -0.769382665

  t_A = -0.695069165
    <Z>_A = cos(t_A) = 0.768009407
    <X>_A = sin(t_A) = -0.640438561

   ==> Run 3-point Fourier quadrature <==
  t = -0.695069, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.695069, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = 0.352128, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = 0.352128, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -1.742267, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.742267, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = -2.7755575615628914e-17, b = -0.21322492879091282, c = 0.17780702316230243

  t_opt = -0.695069165
    <Z>_opt = cos(t_opt) = 0.768009407
    <X>_opt = sin(t_opt) = -0.640438561
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -0.695069, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.695069, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = 0.6917
  <X> = -0.5895999999999999
  Energy = -1.0217053693075804

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.7609383531111332
  <X> = -0.6370976541155249
  Energy = -1.044914128704776
  measure Z: {'0': 17609.383531111333, '1': 2390.6164688886674})
  measure X: {'0': 3629.02345884475, '1': 16370.976541155249})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_6/1.6

   ==> (oq_map.json) Exact results for r = 1.6 <== 
evals = [-1.04701589 -0.49174944]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.0470158904222164
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/1.9
c_z = -0.144203901
c_x = 0.187268886
c_0 = -0.786868492

  t_A = -0.914594616
    <Z>_A = cos(t_A) = 0.610111817
    <X>_A = sin(t_A) = -0.792315323

   ==> Run 3-point Fourier quadrature <==
  t = -0.914595, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.914595, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = 0.132603, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = 0.132603, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -1.961792, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.961792, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = -1.3877787807814457e-17, b = -0.14420390107599912, c = 0.18726888604283615

  t_opt = -0.914594616
    <Z>_opt = cos(t_opt) = 0.610111817
    <X>_opt = sin(t_opt) = -0.792315323
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -0.914595, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.914595, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = 0.5544
  <X> = -0.7371000000000001
  Energy = -1.0048510303688754

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.6111292952097958
  <X> = -0.7980360075445747
  Energy = -1.02444303429619
  measure Z: {'0': 16111.292952097958, '1': 3888.7070479020426})
  measure X: {'0': 2019.6399245542532, '1': 17980.360075445747})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_6/1.9

   ==> (oq_map.json) Exact results for r = 1.9 <== 
evals = [-1.023225   -0.55051198]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.0232250037111297
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/2.5
c_z = -0.066271102
c_x = 0.209148615
c_0 = -0.784992480

  t_A = -1.263943124
    <Z>_A = cos(t_A) = 0.302060331
    <X>_A = sin(t_A) = -0.953288811

   ==> Run 3-point Fourier quadrature <==
  t = -1.263943, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.263943, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -0.216746, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.216746, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -2.311141, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -2.311141, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 6.938893903907228e-18, b = -0.0662711018357801, c = 0.2091486150522356

  t_opt = -1.263943124
    <Z>_opt = cos(t_opt) = 0.302060331
    <X>_opt = sin(t_opt) = -0.953288811
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -1.263943, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.263943, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = 0.26920000000000005
  <X> = -0.8851
  Energy = -0.987950100230476

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.29994544456315914
  <X> = -0.9595199127121377
  Energy = -1.0055524563941594
  measure Z: {'0': 12999.45444563159, '1': 7000.545554368408})
  measure X: {'0': 404.8008728786243, '1': 19595.199127121374})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_6/2.5

   ==> (oq_map.json) Exact results for r = 2.5 <== 
evals = [-1.00438939 -0.56559557]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.0043893858738882
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/2.95
c_z = -0.036185839
c_x = 0.223454420
c_0 = -0.774745750

  t_A = -1.410251678
    <Z>_A = cos(t_A) = 0.159855875
    <X>_A = sin(t_A) = -0.987140364

   ==> Run 3-point Fourier quadrature <==
  t = -1.410252, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.410252, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -0.363054, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.363054, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -2.457449, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -2.457449, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 2.42861286636753e-17, b = -0.036185838522596964, c = 0.2234544196959546

  t_opt = -1.410251678
    <Z>_opt = cos(t_opt) = 0.159855875
    <X>_opt = sin(t_opt) = -0.987140364
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -1.410252, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.410252, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = 0.14179999999999998
  <X> = -0.9113
  Energy = -0.9835109150489472

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.16093835241943405
  <X> = -0.9881069393754125
  Energy = -1.0013663024459405
  measure Z: {'0': 11609.383524194342, '1': 8390.61647580566})
  measure X: {'0': 118.93060624587648, '1': 19881.069393754125})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_6/2.95

   ==> (oq_map.json) Exact results for r = 2.95 <== 
evals = [-1.00111115 -0.54838035]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.0011111466652745
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/6.0
c_z = -0.000371898
c_x = 0.268404889
c_0 = -0.731584011

  t_A = -1.569410743
    <Z>_A = cos(t_A) = 0.001385583
    <X>_A = sin(t_A) = -0.999999040

   ==> Run 3-point Fourier quadrature <==
  t = -1.569411, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.569411, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -0.522213, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.522213, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -2.616608, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -2.616608, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = -8.93153891232297e-17, b = -0.0003718976809356339, c = 0.26840488937165796

  t_opt = -1.569410743
    <Z>_opt = cos(t_opt) = 0.001385583
    <X>_opt = sin(t_opt) = -0.999999040
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -1.569411, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.569411, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = -0.006099999999999994
  <X> = -0.9291
  Energy = -0.9809567249595011

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = -0.00043644298972878026
  <X> = -0.9999999999999246
  Energy = -0.9999887378796495
  measure Z: {'0': 9995.635570102711, '1': 10004.364429897289})
  measure X: {'0': 7.540321660516689e-10, '1': 19999.999999999247})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_6/6.0

   ==> (oq_map.json) Exact results for r = 6.0 <== 
evals = [-0.99998916 -0.46317886]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -0.9999891578395312
e_analytic - evals[0] = 0.000000000000


Set-7

   ==> Run Calibration circuits <== 
n_shots       =      20000
Backend       =      qasm_simulator
Noise model   =      ibmq_armonk
NoiseModel:
  Basis gates: ['id', 'rz', 'sx', 'x']
  Instructions with noise: ['measure', 'sx', 'id', 'x']
  Qubits with noise: [0]
  Specific qubit errors: [('id', (0,)), ('sx', (0,)), ('x', (0,)), ('measure', (0,))]
Calibration matrix =
[[0.95605 0.036  ]
 [0.04395 0.964  ]]

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/0.6
c_z = -0.975331596
c_x = 0.172588132
c_0 = -0.140879461

  t_A = -0.175140281
    <Z>_A = cos(t_A) = 0.984702105
    <X>_A = sin(t_A) = -0.174246274

   ==> Run 3-point Fourier quadrature <==
  t = -0.175140, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.175140, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = 0.872057, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = 0.872057, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -1.222338, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.222338, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = -3.3306690738754696e-16, b = -0.975331596273231, c = 0.17258813211389307

  t_opt = -0.175140281
    <Z>_opt = cos(t_opt) = 0.984702105
    <X>_opt = sin(t_opt) = -0.174246274
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -0.175140, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.175140, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = 0.8919999999999999
  <X> = -0.16979999999999995
  Energy = -1.0401807101266078

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9781533555587629
  <X> = -0.17591435248394272
  Energy = -1.125264064602321
  measure Z: {'0': 19781.53355558763, '1': 218.46644441236873})
  measure X: {'0': 8240.856475160572, '1': 11759.143524839426})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_7/0.6

   ==> (oq_map.json) Exact results for r = 0.6 <== 
evals = [-1.13136338  0.84960445]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.131363376499586
e_analytic - evals[0] = -0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/0.65
c_z = -0.893017040
c_x = 0.171773983
c_0 = -0.234423207

  t_A = -0.190031414
    <Z>_A = cos(t_A) = 0.981998302
    <X>_A = sin(t_A) = -0.188889744

   ==> Run 3-point Fourier quadrature <==
  t = -0.190031, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.190031, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = 0.857166, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = 0.857166, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -1.237229, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.237229, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 1.1102230246251565e-16, b = -0.8930170404711619, c = 0.17177398346406275

  t_opt = -0.190031414
    <Z>_opt = cos(t_opt) = 0.981998302
    <X>_opt = sin(t_opt) = -0.188889744
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -0.190031, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.190031, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = 0.8924000000000001
  <X> = -0.17959999999999998
  Energy = -1.062202221524407

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9785881202106351
  <X> = -0.18656598100060112
  Energy = -1.1403662558638894
  measure Z: {'0': 19785.88120210635, '1': 214.11879789365076})
  measure X: {'0': 8134.340189993988, '1': 11865.659810006011})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_7/0.65

   ==> (oq_map.json) Exact results for r = 0.65 <== 
evals = [-1.14381077  0.67496435]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.1438107681038217
e_analytic - evals[0] = -0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/0.7
c_z = -0.818749229
c_x = 0.171060688
c_0 = -0.313783336

  t_A = -0.205966480
    <Z>_A = cos(t_A) = 0.978863784
    <X>_A = sin(t_A) = -0.204513307

   ==> Run 3-point Fourier quadrature <==
  t = -0.205966, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.205966, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = 0.841231, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = 0.841231, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -1.253164, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.253164, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 0.0, b = -0.8187492286324076, c = 0.1710606880831236

  t_opt = -0.205966480
    <Z>_opt = cos(t_opt) = 0.978863784
    <X>_opt = sin(t_opt) = -0.204513307
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -0.205966, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.205966, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = 0.8863000000000001
  <X> = -0.2022
  Energy = -1.0740292487681207

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9719580435563979
  <X> = -0.21112982990376644
  Energy = -1.145689248703886
  measure Z: {'0': 19719.58043556398, '1': 280.41956443602004})
  measure X: {'0': 7888.701700962336, '1': 12111.298299037666})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_7/0.7

   ==> (oq_map.json) Exact results for r = 0.7 <== 
evals = [-1.15021149  0.52264482]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.1502114912511527
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/0.75
c_z = -0.751762455
c_x = 0.170457573
c_0 = -0.381398162

  t_A = -0.222973719
    <Z>_A = cos(t_A) = 0.975244182
    <X>_A = sin(t_A) = -0.221130698

   ==> Run 3-point Fourier quadrature <==
  t = -0.222974, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.222974, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = 0.824224, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = 0.824224, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -1.270171, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.270171, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = -1.1102230246251565e-16, b = -0.7517624545623148, c = 0.17045757337561956

  t_opt = -0.222973719
    <Z>_opt = cos(t_opt) = 0.975244182
    <X>_opt = sin(t_opt) = -0.221130698
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -0.222974, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.222974, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = 0.8855999999999999
  <X> = -0.22150000000000003
  Energy = -1.084915344154973

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.971197207253243
  <X> = -0.23210695070707477
  Energy = -1.1510721458617932
  measure Z: {'0': 19711.97207253243, '1': 288.02792746756916})
  measure X: {'0': 7678.930492929253, '1': 12321.069507070748})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_7/0.75

   ==> (oq_map.json) Exact results for r = 0.75 <== 
evals = [-1.15224352  0.3894472 ]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.1522435240824251
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/0.8
c_z = -0.691218028
c_x = 0.169960572
c_0 = -0.439308382

  t_A = -0.241102571
    <Z>_A = cos(t_A) = 0.971075301
    <X>_A = sin(t_A) = -0.238773451

   ==> Run 3-point Fourier quadrature <==
  t = -0.241103, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.241103, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = 0.806095, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = 0.806095, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -1.288300, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.288300, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 1.1102230246251565e-16, b = -0.6912180276548995, c = 0.16996057197909595

  t_opt = -0.241102571
    <Z>_opt = cos(t_opt) = 0.971075301
    <X>_opt = sin(t_opt) = -0.238773451
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -0.241103, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.241103, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = 0.8794
  <X> = -0.23869999999999997
  Energy = -1.0877351040889751

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9644585066652976
  <X> = -0.25080158691926646
  Energy = -1.1485858699360865
  measure Z: {'0': 19644.585066652977, '1': 355.41493334702227})
  measure X: {'0': 7491.984130807335, '1': 12508.015869192664})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_7/0.8

   ==> (oq_map.json) Exact results for r = 0.8 <== 
evals = [-1.15111521  0.27249844]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.1511152082081149
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/0.85
c_z = -0.636488864
c_x = 0.169579229
c_0 = -0.489018448

  t_A = -0.260380693
    <Z>_A = cos(t_A) = 0.966292039
    <X>_A = sin(t_A) = -0.257448431

   ==> Run 3-point Fourier quadrature <==
  t = -0.260381, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.260381, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = 0.786817, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = 0.786817, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -1.307578, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.307578, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = -1.1102230246251565e-16, b = -0.6364888642400289, c = 0.16957922946515439

  t_opt = -0.260380693
    <Z>_opt = cos(t_opt) = 0.966292039
    <X>_opt = sin(t_opt) = -0.257448431
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -0.260381, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.260381, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = 0.8772
  <X> = -0.24059999999999998
  Energy = -1.0881472423863476

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9620672791199524
  <X> = -0.2528666920273024
  Energy = -1.1442444966666239
  measure Z: {'0': 19620.672791199522, '1': 379.32720880047754})
  measure X: {'0': 7471.333079726976, '1': 12528.666920273025})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_7/0.85

   ==> (oq_map.json) Exact results for r = 0.85 <== 
evals = [-1.14771048  0.16967358]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.147710477292962
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/1.15
c_z = -0.399295092
c_x = 0.169766330
c_0 = -0.672952709

  t_A = -0.402010464
    <Z>_A = cos(t_A) = 0.920276221
    <X>_A = sin(t_A) = -0.391269314

   ==> Run 3-point Fourier quadrature <==
  t = -0.402010, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.402010, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = 0.645187, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = 0.645187, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -1.449208, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.449208, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = -5.551115123125783e-17, b = -0.39929509169104105, c = 0.16976633007745248

  t_opt = -0.402010464
    <Z>_opt = cos(t_opt) = 0.920276221
    <X>_opt = sin(t_opt) = -0.391269314
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -0.402010, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.402010, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = 0.8339000000000001
  <X> = -0.37020000000000003
  Energy = -1.068772381433159

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9150046193346988
  <X> = -0.39372860169785
  Energy = -1.1051514222090726
  measure Z: {'0': 19150.04619334699, '1': 849.9538066530115})
  measure X: {'0': 6062.713983021499, '1': 13937.286016978502})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_7/1.15

   ==> (oq_map.json) Exact results for r = 1.15 <== 
evals = [-1.10683884 -0.23906658]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.1068388428457654
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/1.2
c_z = -0.371037374
c_x = 0.170213481
c_0 = -0.690922272

  t_A = -0.430106748
    <Z>_A = cos(t_A) = 0.908921244
    <X>_A = sin(t_A) = -0.416967830

   ==> Run 3-point Fourier quadrature <==
  t = -0.430107, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.430107, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = 0.617091, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = 0.617091, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -1.477304, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.477304, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 5.551115123125783e-17, b = -0.37103737361427747, c = 0.1702134805811622

  t_opt = -0.430106748
    <Z>_opt = cos(t_opt) = 0.908921244
    <X>_opt = sin(t_opt) = -0.416967830
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -0.430107, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.430107, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = 0.8207
  <X> = -0.39220000000000005
  Energy = -1.0621903715631498

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9006575734090169
  <X> = -0.41764034570080044
  Energy = -1.0961879093903235
  measure Z: {'0': 19006.57573409017, '1': 993.4242659098305})
  measure X: {'0': 5823.596542991996, '1': 14176.403457008004})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_7/1.2

   ==> (oq_map.json) Exact results for r = 1.2 <== 
evals = [-1.09913957 -0.28270497]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.099139568978659
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/1.3
c_z = -0.321395392
c_x = 0.171457744
c_0 = -0.719962104

  t_A = -0.490070852
    <Z>_A = cos(t_A) = 0.882299511
    <X>_A = sin(t_A) = -0.470688402

   ==> Run 3-point Fourier quadrature <==
  t = -0.490071, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.490071, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = 0.557127, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = 0.557127, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -1.537268, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.537268, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 0.0, b = -0.3213953919185241, c = 0.1714577437790655

  t_opt = -0.490070852
    <Z>_opt = cos(t_opt) = 0.882299511
    <X>_opt = sin(t_opt) = -0.470688402
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -0.490071, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.490071, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = 0.7996000000000001
  <X> = -0.44320000000000004
  Energy = -1.0529399309386798

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.8777240373408902
  <X> = -0.4730721156487468
  Energy = -1.083170442089154
  measure Z: {'0': 18777.240373408902, '1': 1222.759626591097})
  measure X: {'0': 5269.278843512533, '1': 14730.721156487467})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_7/1.3

   ==> (oq_map.json) Exact results for r = 1.3 <== 
evals = [-1.08423227 -0.35569193]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.0842322722775133
e_analytic - evals[0] = -0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/1.45
c_z = -0.260906520
c_x = 0.174167246
c_0 = -0.750292491

  t_A = -0.588611503
    <Z>_A = cos(t_A) = 0.831712383
    <X>_A = sin(t_A) = -0.555206729

   ==> Run 3-point Fourier quadrature <==
  t = -0.588612, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.588612, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = 0.458586, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = 0.458586, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -1.635809, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.635809, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 5.551115123125783e-17, b = -0.26090651987640007, c = 0.17416724617012774

  t_opt = -0.588611503
    <Z>_opt = cos(t_opt) = 0.831712383
    <X>_opt = sin(t_opt) = -0.555206729
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -0.588612, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.588612, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = 0.7509999999999999
  <X> = -0.5121
  Energy = -1.035424333808869

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.8249008207463453
  <X> = -0.547959350621068
  Energy = -1.060951064112928
  measure Z: {'0': 18249.008207463452, '1': 1750.9917925365467})
  measure X: {'0': 4520.406493789319, '1': 15479.59350621068})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_7/1.45

   ==> (oq_map.json) Exact results for r = 1.45 <== 
evals = [-1.0639905  -0.43659448]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.0639905010555568
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/1.6
c_z = -0.213224929
c_x = 0.177807023
c_0 = -0.769382665

  t_A = -0.695069165
    <Z>_A = cos(t_A) = 0.768009407
    <X>_A = sin(t_A) = -0.640438561

   ==> Run 3-point Fourier quadrature <==
  t = -0.695069, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.695069, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = 0.352128, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = 0.352128, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -1.742267, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.742267, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 5.551115123125783e-17, b = -0.21322492879091293, c = 0.1778070231623025

  t_opt = -0.695069165
    <Z>_opt = cos(t_opt) = 0.768009407
    <X>_opt = sin(t_opt) = -0.640438561
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -0.695069, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.695069, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = 0.6928000000000001
  <X> = -0.5904
  Energy = -1.0220821623477803

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.7616433887048417
  <X> = -0.6330634205981209
  Energy = -1.0443471448165684
  measure Z: {'0': 17616.433887048417, '1': 2383.566112951582})
  measure X: {'0': 3669.365794018791, '1': 16330.634205981209})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_7/1.6

   ==> (oq_map.json) Exact results for r = 1.6 <== 
evals = [-1.04701589 -0.49174944]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.0470158904222164
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/1.9
c_z = -0.144203901
c_x = 0.187268886
c_0 = -0.786868492

  t_A = -0.914594616
    <Z>_A = cos(t_A) = 0.610111817
    <X>_A = sin(t_A) = -0.792315323

   ==> Run 3-point Fourier quadrature <==
  t = -0.914595, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.914595, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = 0.132603, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = 0.132603, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -1.961792, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.961792, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = -1.3877787807814457e-17, b = -0.1442039010759991, c = 0.18726888604283617

  t_opt = -0.914594616
    <Z>_opt = cos(t_opt) = 0.610111817
    <X>_opt = sin(t_opt) = -0.792315323
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -0.914595, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.914595, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = 0.5387
  <X> = -0.7266999999999999
  Energy = -1.0006394327071366

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.5941524920499769
  <X> = -0.781207542882943
  Energy = -1.01884346522175
  measure Z: {'0': 15941.524920499769, '1': 4058.4750795002315})
  measure X: {'0': 2187.92457117057, '1': 17812.07542882943})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_7/1.9

   ==> (oq_map.json) Exact results for r = 1.9 <== 
evals = [-1.023225   -0.55051198]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.0232250037111297
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/2.5
c_z = -0.066271102
c_x = 0.209148615
c_0 = -0.784992480

  t_A = -1.263943124
    <Z>_A = cos(t_A) = 0.302060331
    <X>_A = sin(t_A) = -0.953288811

   ==> Run 3-point Fourier quadrature <==
  t = -1.263943, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.263943, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -0.216746, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.216746, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -2.311141, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -2.311141, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 2.0816681711721685e-17, b = -0.06627110183578011, c = 0.20914861505223564

  t_opt = -1.263943124
    <Z>_opt = cos(t_opt) = 0.302060331
    <X>_opt = sin(t_opt) = -0.953288811
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -1.263943, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.263943, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = 0.264
  <X> = -0.8823000000000001
  Energy = -0.9870198743787837

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.29558176186138657
  <X> = -0.9503287962077592
  Energy = -1.0033409610457766
  measure Z: {'0': 12955.817618613868, '1': 7044.182381386135})
  measure X: {'0': 496.71203792240635, '1': 19503.287962077593})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_7/2.5

   ==> (oq_map.json) Exact results for r = 2.5 <== 
evals = [-1.00438939 -0.56559557]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.0043893858738882
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/2.95
c_z = -0.036185839
c_x = 0.223454420
c_0 = -0.774745750

  t_A = -1.410251678
    <Z>_A = cos(t_A) = 0.159855875
    <X>_A = sin(t_A) = -0.987140364

   ==> Run 3-point Fourier quadrature <==
  t = -1.410252, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.410252, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -0.363054, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.363054, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -2.457449, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -2.457449, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = -1.9081958235744878e-17, b = -0.03618583852259692, c = 0.22345441969595453

  t_opt = -1.410251678
    <Z>_opt = cos(t_opt) = 0.159855875
    <X>_opt = sin(t_opt) = -0.987140364
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -1.410252, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.410252, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = 0.1351
  <X> = -0.9131
  Energy = -0.9836706878862984

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.15548068040834895
  <X> = -0.9838052280502438
  Energy = -1.000207575599973
  measure Z: {'0': 11554.80680408349, '1': 8445.19319591651})
  measure X: {'0': 161.9477194975632, '1': 19838.052280502437})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_7/2.95

   ==> (oq_map.json) Exact results for r = 2.95 <== 
evals = [-1.00111115 -0.54838035]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.0011111466652745
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/6.0
c_z = -0.000371898
c_x = 0.268404889
c_0 = -0.731584011

  t_A = -1.569410743
    <Z>_A = cos(t_A) = 0.001385583
    <X>_A = sin(t_A) = -0.999999040

   ==> Run 3-point Fourier quadrature <==
  t = -1.569411, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.569411, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -0.522213, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.522213, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -2.616608, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -2.616608, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = -1.554114875798509e-17, b = -0.00037189768093557414, c = 0.2684048893716581

  t_opt = -1.569410743
    <Z>_opt = cos(t_opt) = 0.001385583
    <X>_opt = sin(t_opt) = -0.999999040
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -1.569411, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.569411, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = 9.999999999998899e-05
  <X> = -0.9213
  Energy = -0.978865472588024

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.008749524482392579
  <X> = -0.9927177871049427
  Energy = -0.9980375725731909
  measure Z: {'0': 10087.495244823926, '1': 9912.504755176074})
  measure X: {'0': 72.8221289505746, '1': 19927.177871049425})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_7/6.0

   ==> (oq_map.json) Exact results for r = 6.0 <== 
evals = [-0.99998916 -0.46317886]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -0.9999891578395312
e_analytic - evals[0] = 0.000000000000


Set-8

   ==> Run Calibration circuits <== 
n_shots       =      20000
Backend       =      qasm_simulator
Noise model   =      ibmq_armonk
NoiseModel:
  Basis gates: ['id', 'rz', 'sx', 'x']
  Instructions with noise: ['measure', 'sx', 'id', 'x']
  Qubits with noise: [0]
  Specific qubit errors: [('id', (0,)), ('sx', (0,)), ('x', (0,)), ('measure', (0,))]
Calibration matrix =
[[0.95405 0.03725]
 [0.04595 0.96275]]

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/0.6
c_z = -0.975331596
c_x = 0.172588132
c_0 = -0.140879461

  t_A = -0.175140281
    <Z>_A = cos(t_A) = 0.984702105
    <X>_A = sin(t_A) = -0.174246274

   ==> Run 3-point Fourier quadrature <==
  t = -0.175140, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.175140, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = 0.872057, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = 0.872057, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -1.222338, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.222338, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 1.1102230246251565e-16, b = -0.9753315962732314, c = 0.1725881321138932

  t_opt = -0.175140281
    <Z>_opt = cos(t_opt) = 0.984702105
    <X>_opt = sin(t_opt) = -0.174246274
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -0.175140, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.175140, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = 0.8966000000000001
  <X> = -0.17510000000000003
  Energy = -1.0455819525696686

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9874563701046905
  <X> = -0.18150087260914288
  Energy = -1.1353017557029785
  measure Z: {'0': 19874.563701046904, '1': 125.43629895309496})
  measure X: {'0': 8184.991273908572, '1': 11815.00872609143})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_8/0.6

   ==> (oq_map.json) Exact results for r = 0.6 <== 
evals = [-1.13136338  0.84960445]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.131363376499586
e_analytic - evals[0] = -0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/0.65
c_z = -0.893017040
c_x = 0.171773983
c_0 = -0.234423207

  t_A = -0.190031414
    <Z>_A = cos(t_A) = 0.981998302
    <X>_A = sin(t_A) = -0.188889744

   ==> Run 3-point Fourier quadrature <==
  t = -0.190031, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.190031, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = 0.857166, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = 0.857166, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -1.237229, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.237229, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 1.1102230246251565e-16, b = -0.8930170404711619, c = 0.1717739834640628

  t_opt = -0.190031414
    <Z>_opt = cos(t_opt) = 0.981998302
    <X>_opt = sin(t_opt) = -0.188889744
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -0.190031, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.190031, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = 0.8904000000000001
  <X> = -0.1834
  Energy = -1.061068928580628

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9806937172775556
  <X> = -0.1905541018972839
  Energy = -1.142931645337975
  measure Z: {'0': 19806.937172775557, '1': 193.06282722444402})
  measure X: {'0': 8094.45898102716, '1': 11905.541018972839})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_8/0.65

   ==> (oq_map.json) Exact results for r = 0.65 <== 
evals = [-1.14381077  0.67496435]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.1438107681038217
e_analytic - evals[0] = -0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/0.7
c_z = -0.818749229
c_x = 0.171060688
c_0 = -0.313783336

  t_A = -0.205966480
    <Z>_A = cos(t_A) = 0.978863784
    <X>_A = sin(t_A) = -0.204513307

   ==> Run 3-point Fourier quadrature <==
  t = -0.205966, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.205966, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = 0.841231, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = 0.841231, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -1.253164, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.253164, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 1.1102230246251565e-16, b = -0.8187492286324077, c = 0.17106068808312364

  t_opt = -0.205966480
    <Z>_opt = cos(t_opt) = 0.978863784
    <X>_opt = sin(t_opt) = -0.204513307
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -0.205966, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.205966, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = 0.8863000000000001
  <X> = -0.20029999999999998
  Energy = -1.0737042334607627

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9762216121433994
  <X> = -0.20898778450244115
  Energy = -1.1488136224354588
  measure Z: {'0': 19762.216121433994, '1': 237.78387856600492})
  measure X: {'0': 7910.122154975589, '1': 12089.877845024412})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_8/0.7

   ==> (oq_map.json) Exact results for r = 0.7 <== 
evals = [-1.15021149  0.52264482]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.1502114912511527
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/0.75
c_z = -0.751762455
c_x = 0.170457573
c_0 = -0.381398162

  t_A = -0.222973719
    <Z>_A = cos(t_A) = 0.975244182
    <X>_A = sin(t_A) = -0.221130698

   ==> Run 3-point Fourier quadrature <==
  t = -0.222974, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.222974, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = 0.824224, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = 0.824224, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -1.270171, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.270171, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 0.0, b = -0.7517624545623149, c = 0.1704575733756196

  t_opt = -0.222973719
    <Z>_opt = cos(t_opt) = 0.975244182
    <X>_opt = sin(t_opt) = -0.221130698
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -0.222974, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.222974, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = 0.8839999999999999
  <X> = -0.21070000000000005
  Energy = -1.0818715824352167

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9737129146043959
  <X> = -0.22033158854211327
  Energy = -1.1509561605347978
  measure Z: {'0': 19737.12914604396, '1': 262.87085395603935})
  measure X: {'0': 7796.684114578868, '1': 12203.315885421132})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_8/0.75

   ==> (oq_map.json) Exact results for r = 0.75 <== 
evals = [-1.15224352  0.3894472 ]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.1522435240824251
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/0.8
c_z = -0.691218028
c_x = 0.169960572
c_0 = -0.439308382

  t_A = -0.241102571
    <Z>_A = cos(t_A) = 0.971075301
    <X>_A = sin(t_A) = -0.238773451

   ==> Run 3-point Fourier quadrature <==
  t = -0.241103, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.241103, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = 0.806095, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = 0.806095, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -1.288300, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.288300, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 0.0, b = -0.6912180276548994, c = 0.16996057197909595

  t_opt = -0.241102571
    <Z>_opt = cos(t_opt) = 0.971075301
    <X>_opt = sin(t_opt) = -0.238773451
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -0.241103, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.241103, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = 0.8757999999999999
  <X> = -0.23290000000000005
  Energy = -1.0842609478719387

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9647688024877025
  <X> = -0.2445462484372276
  Energy = -1.1477371910961087
  measure Z: {'0': 19647.688024877025, '1': 352.31197512297376})
  measure X: {'0': 7554.537515627722, '1': 12445.462484372276})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_8/0.8

   ==> (oq_map.json) Exact results for r = 0.8 <== 
evals = [-1.15111521  0.27249844]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.1511152082081149
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/0.85
c_z = -0.636488864
c_x = 0.169579229
c_0 = -0.489018448

  t_A = -0.260380693
    <Z>_A = cos(t_A) = 0.966292039
    <X>_A = sin(t_A) = -0.257448431

   ==> Run 3-point Fourier quadrature <==
  t = -0.260381, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.260381, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = 0.786817, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = 0.786817, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -1.307578, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.307578, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 0.0, b = -0.636488864240029, c = 0.1695792294651544

  t_opt = -0.260380693
    <Z>_opt = cos(t_opt) = 0.966292039
    <X>_opt = sin(t_opt) = -0.257448431
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -0.260381, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.260381, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = 0.8700000000000001
  <X> = -0.2378
  Energy = -1.083089700721317

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9584424593482257
  <X> = -0.24989092592764117
  Energy = -1.1414327111247937
  measure Z: {'0': 19584.424593482257, '1': 415.5754065177425})
  measure X: {'0': 7501.090740723587, '1': 12498.909259276412})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_8/0.85

   ==> (oq_map.json) Exact results for r = 0.85 <== 
evals = [-1.14771048  0.16967358]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.147710477292962
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/1.15
c_z = -0.399295092
c_x = 0.169766330
c_0 = -0.672952709

  t_A = -0.402010464
    <Z>_A = cos(t_A) = 0.920276221
    <X>_A = sin(t_A) = -0.391269314

   ==> Run 3-point Fourier quadrature <==
  t = -0.402010, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.402010, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = 0.645187, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = 0.645187, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -1.449208, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.449208, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 1.1102230246251565e-16, b = -0.39929509169104127, c = 0.16976633007745257

  t_opt = -0.402010464
    <Z>_opt = cos(t_opt) = 0.920276221
    <X>_opt = sin(t_opt) = -0.391269314
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -0.402010, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.402010, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = 0.8354999999999999
  <X> = -0.36569999999999997
  Energy = -1.068647305094516

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9208115191313552
  <X> = -0.38939790641292454
  Energy = -1.1067348825506136
  measure Z: {'0': 19208.11519131355, '1': 791.8848086864501})
  measure X: {'0': 6106.020935870754, '1': 13893.979064129246})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_8/1.15

   ==> (oq_map.json) Exact results for r = 1.15 <== 
evals = [-1.10683884 -0.23906658]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.1068388428457654
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/1.2
c_z = -0.371037374
c_x = 0.170213481
c_0 = -0.690922272

  t_A = -0.430106748
    <Z>_A = cos(t_A) = 0.908921244
    <X>_A = sin(t_A) = -0.416967830

   ==> Run 3-point Fourier quadrature <==
  t = -0.430107, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.430107, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = 0.617091, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = 0.617091, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -1.477304, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.477304, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 0.0, b = -0.3710373736142774, c = 0.17021348058116215

  t_opt = -0.430106748
    <Z>_opt = cos(t_opt) = 0.908921244
    <X>_opt = sin(t_opt) = -0.416967830
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -0.430107, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.430107, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = 0.8242
  <X> = -0.38589999999999997
  Energy = -1.0624166574431384

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9084860384412492
  <X> = -0.4114310654931564
  Energy = -1.0980356592992673
  measure Z: {'0': 19084.860384412495, '1': 915.1396155875075})
  measure X: {'0': 5885.689345068436, '1': 14114.310654931563})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_8/1.2

   ==> (oq_map.json) Exact results for r = 1.2 <== 
evals = [-1.09913957 -0.28270497]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.099139568978659
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/1.3
c_z = -0.321395392
c_x = 0.171457744
c_0 = -0.719962104

  t_A = -0.490070852
    <Z>_A = cos(t_A) = 0.882299511
    <X>_A = sin(t_A) = -0.470688402

   ==> Run 3-point Fourier quadrature <==
  t = -0.490071, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.490071, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = 0.557127, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = 0.557127, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -1.537268, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.537268, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = -5.551115123125783e-17, b = -0.3213953919185241, c = 0.1714577437790655

  t_opt = -0.490070852
    <Z>_opt = cos(t_opt) = 0.882299511
    <X>_opt = sin(t_opt) = -0.470688402
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -0.490071, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.490071, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = 0.7967
  <X> = -0.43999999999999995
  Energy = -1.0514592195220227

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.8784904024514381
  <X> = -0.47044066319406647
  Energy = -1.0829655654034698
  measure Z: {'0': 18784.90402451438, '1': 1215.0959754856187})
  measure X: {'0': 5295.593368059334, '1': 14704.406631940665})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_8/1.3

   ==> (oq_map.json) Exact results for r = 1.3 <== 
evals = [-1.08423227 -0.35569193]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.0842322722775133
e_analytic - evals[0] = -0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/1.45
c_z = -0.260906520
c_x = 0.174167246
c_0 = -0.750292491

  t_A = -0.588611503
    <Z>_A = cos(t_A) = 0.831712383
    <X>_A = sin(t_A) = -0.555206729

   ==> Run 3-point Fourier quadrature <==
  t = -0.588612, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.588612, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = 0.458586, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = 0.458586, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -1.635809, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.635809, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = -5.551115123125783e-17, b = -0.26090651987639996, c = 0.17416724617012772

  t_opt = -0.588611503
    <Z>_opt = cos(t_opt) = 0.831712383
    <X>_opt = sin(t_opt) = -0.555206729
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -0.588612, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.588612, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = 0.7502
  <X> = -0.522
  Energy = -1.0369398643300523

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.8277705052895423
  <X> = -0.5598821988073113
  Energy = -1.0637763531553392
  measure Z: {'0': 18277.705052895424, '1': 1722.2949471045765})
  measure X: {'0': 4401.178011926889, '1': 15598.821988073112})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_8/1.45

   ==> (oq_map.json) Exact results for r = 1.45 <== 
evals = [-1.0639905  -0.43659448]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.0639905010555568
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/1.6
c_z = -0.213224929
c_x = 0.177807023
c_0 = -0.769382665

  t_A = -0.695069165
    <Z>_A = cos(t_A) = 0.768009407
    <X>_A = sin(t_A) = -0.640438561

   ==> Run 3-point Fourier quadrature <==
  t = -0.695069, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.695069, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = 0.352128, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = 0.352128, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -1.742267, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.742267, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = -2.7755575615628914e-17, b = -0.21322492879091284, c = 0.17780702316230243

  t_opt = -0.695069165
    <Z>_opt = cos(t_opt) = 0.768009407
    <X>_opt = sin(t_opt) = -0.640438561
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -0.695069, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.695069, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = 0.6959
  <X> = -0.5873999999999999
  Energy = -1.022209738557545

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.7685427574153021
  <X> = -0.6312173058290815
  Energy = -1.0454900100470597
  measure Z: {'0': 17685.427574153022, '1': 2314.5724258469777})
  measure X: {'0': 3687.8269417091833, '1': 16312.173058290815})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_8/1.6

   ==> (oq_map.json) Exact results for r = 1.6 <== 
evals = [-1.04701589 -0.49174944]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.0470158904222164
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/1.9
c_z = -0.144203901
c_x = 0.187268886
c_0 = -0.786868492

  t_A = -0.914594616
    <Z>_A = cos(t_A) = 0.610111817
    <X>_A = sin(t_A) = -0.792315323

   ==> Run 3-point Fourier quadrature <==
  t = -0.914595, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.914595, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = 0.132603, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = 0.132603, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -1.961792, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.961792, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = -2.7755575615628914e-17, b = -0.1442039010759991, c = 0.18726888604283612

  t_opt = -0.914594616
    <Z>_opt = cos(t_opt) = 0.610111817
    <X>_opt = sin(t_opt) = -0.792315323
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -0.914595, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.914595, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = 0.5531999999999999
  <X> = -0.7309000000000001
  Energy = -1.0035169185941184

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.6128926701207017
  <X> = -0.7877399649642005
  Energy = -1.0227691914127262
  measure Z: {'0': 16128.926701207016, '1': 3871.0732987929823})
  measure X: {'0': 2122.6003503579955, '1': 17877.399649642008})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_8/1.9

   ==> (oq_map.json) Exact results for r = 1.9 <== 
evals = [-1.023225   -0.55051198]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.0232250037111297
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/2.5
c_z = -0.066271102
c_x = 0.209148615
c_0 = -0.784992480

  t_A = -1.263943124
    <Z>_A = cos(t_A) = 0.302060331
    <X>_A = sin(t_A) = -0.953288811

   ==> Run 3-point Fourier quadrature <==
  t = -1.263943, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.263943, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -0.216746, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.216746, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -2.311141, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -2.311141, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = -1.734723475976807e-17, b = -0.06627110183578012, c = 0.20914861505223556

  t_opt = -1.263943124
    <Z>_opt = cos(t_opt) = 0.302060331
    <X>_opt = sin(t_opt) = -0.953288811
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -1.263943, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.263943, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = 0.26570000000000005
  <X> = -0.8807
  Energy = -0.986797897467821

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.29930191962566277
  <X> = -0.9511343996499753
  Energy = -1.003755990844039
  measure Z: {'0': 12993.019196256628, '1': 7006.980803743371})
  measure X: {'0': 488.6560035002489, '1': 19511.34399649975})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_8/2.5

   ==> (oq_map.json) Exact results for r = 2.5 <== 
evals = [-1.00438939 -0.56559557]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.0043893858738882
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/2.95
c_z = -0.036185839
c_x = 0.223454420
c_0 = -0.774745750

  t_A = -1.410251678
    <Z>_A = cos(t_A) = 0.159855875
    <X>_A = sin(t_A) = -0.987140364

   ==> Run 3-point Fourier quadrature <==
  t = -1.410252, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.410252, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -0.363054, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.363054, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -2.457449, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -2.457449, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 1.3010426069826053e-17, b = -0.036185838522596936, c = 0.22345441969595456

  t_opt = -1.410251678
    <Z>_opt = cos(t_opt) = 0.159855875
    <X>_opt = sin(t_opt) = -0.987140364
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -1.410252, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.410252, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = 0.1371
  <X> = -0.9108
  Energy = -0.983229114398043

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.1590314136894248
  <X> = -0.9839659686590785
  Energy = -1.0003719800605875
  measure Z: {'0': 11590.314136894249, '1': 8409.685863105753})
  measure X: {'0': 160.34031340921607, '1': 19839.65968659078})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_8/2.95

   ==> (oq_map.json) Exact results for r = 2.95 <== 
evals = [-1.00111115 -0.54838035]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.0011111466652745
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/6.0
c_z = -0.000371898
c_x = 0.268404889
c_0 = -0.731584011

  t_A = -1.569410743
    <Z>_A = cos(t_A) = 0.001385583
    <X>_A = sin(t_A) = -0.999999040

   ==> Run 3-point Fourier quadrature <==
  t = -1.569411, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.569411, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -0.522213, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.522213, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -2.616608, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -2.616608, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = -6.465571892981525e-17, b = -0.00037189768093560157, c = 0.268404889371658

  t_opt = -1.569410743
    <Z>_opt = cos(t_opt) = 0.001385583
    <X>_opt = sin(t_opt) = -0.999999040
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -1.569411, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.569411, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = -0.005300000000000027
  <X> = -0.9232
  Energy = -0.9793734336303531

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.003708551483484035
  <X> = -0.9974912740065649
  Energy = -0.9993169250707701
  measure Z: {'0': 10037.08551483484, '1': 9962.91448516516})
  measure X: {'0': 25.087259934352776, '1': 19974.91274006565})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_8/6.0

   ==> (oq_map.json) Exact results for r = 6.0 <== 
evals = [-0.99998916 -0.46317886]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -0.9999891578395312
e_analytic - evals[0] = 0.000000000000


Set-9

   ==> Run Calibration circuits <== 
n_shots       =      20000
Backend       =      qasm_simulator
Noise model   =      ibmq_armonk
NoiseModel:
  Basis gates: ['id', 'rz', 'sx', 'x']
  Instructions with noise: ['measure', 'sx', 'id', 'x']
  Qubits with noise: [0]
  Specific qubit errors: [('id', (0,)), ('sx', (0,)), ('x', (0,)), ('measure', (0,))]
Calibration matrix =
[[0.95575 0.03765]
 [0.04425 0.96235]]

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/0.6
c_z = -0.975331596
c_x = 0.172588132
c_0 = -0.140879461

  t_A = -0.175140281
    <Z>_A = cos(t_A) = 0.984702105
    <X>_A = sin(t_A) = -0.174246274

   ==> Run 3-point Fourier quadrature <==
  t = -0.175140, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.175140, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = 0.872057, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = 0.872057, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -1.222338, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.222338, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 0.0, b = -0.9753315962732314, c = 0.17258813211389304

  t_opt = -0.175140281
    <Z>_opt = cos(t_opt) = 0.984702105
    <X>_opt = sin(t_opt) = -0.174246274
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -0.175140, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.175140, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = 0.895
  <X> = -0.17040000000000005
  Energy = -1.043210257794696

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9820281226047106
  <X> = -0.17841193793442822
  Energy = -1.1294743009381263
  measure Z: {'0': 19820.281226047104, '1': 179.71877395289408})
  measure X: {'0': 8215.880620655718, '1': 11784.119379344282})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_9/0.6

   ==> (oq_map.json) Exact results for r = 0.6 <== 
evals = [-1.13136338  0.84960445]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.131363376499586
e_analytic - evals[0] = -0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/0.65
c_z = -0.893017040
c_x = 0.171773983
c_0 = -0.234423207

  t_A = -0.190031414
    <Z>_A = cos(t_A) = 0.981998302
    <X>_A = sin(t_A) = -0.188889744

   ==> Run 3-point Fourier quadrature <==
  t = -0.190031, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.190031, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = 0.857166, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = 0.857166, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -1.237229, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.237229, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 1.1102230246251565e-16, b = -0.8930170404711619, c = 0.1717739834640627

  t_opt = -0.190031414
    <Z>_opt = cos(t_opt) = 0.981998302
    <X>_opt = sin(t_opt) = -0.188889744
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -0.190031, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.190031, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = 0.8887
  <X> = -0.19140000000000001
  Energy = -1.0609249914795398

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9751660745852165
  <X> = -0.20128526412790343
  Energy = -1.1398387007036328
  measure Z: {'0': 19751.66074585217, '1': 248.33925414783388})
  measure X: {'0': 7987.147358720967, '1': 12012.852641279034})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_9/0.65

   ==> (oq_map.json) Exact results for r = 0.65 <== 
evals = [-1.14381077  0.67496435]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.1438107681038217
e_analytic - evals[0] = -0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/0.7
c_z = -0.818749229
c_x = 0.171060688
c_0 = -0.313783336

  t_A = -0.205966480
    <Z>_A = cos(t_A) = 0.978863784
    <X>_A = sin(t_A) = -0.204513307

   ==> Run 3-point Fourier quadrature <==
  t = -0.205966, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.205966, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = 0.841231, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = 0.841231, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -1.253164, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.253164, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 0.0, b = -0.8187492286324076, c = 0.17106068808312364

  t_opt = -0.205966480
    <Z>_opt = cos(t_opt) = 0.978863784
    <X>_opt = sin(t_opt) = -0.204513307
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -0.205966, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.205966, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = 0.8856999999999999
  <X> = -0.2017
  Energy = -1.0734524688868996

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9718985083506868
  <X> = -0.2125040849759982
  Energy = -1.1458755853183913
  measure Z: {'0': 19718.98508350687, '1': 281.01491649313107})
  measure X: {'0': 7874.959150240017, '1': 12125.04084975998})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_9/0.7

   ==> (oq_map.json) Exact results for r = 0.7 <== 
evals = [-1.15021149  0.52264482]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.1502114912511527
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/0.75
c_z = -0.751762455
c_x = 0.170457573
c_0 = -0.381398162

  t_A = -0.222973719
    <Z>_A = cos(t_A) = 0.975244182
    <X>_A = sin(t_A) = -0.221130698

   ==> Run 3-point Fourier quadrature <==
  t = -0.222974, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.222974, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = 0.824224, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = 0.824224, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -1.270171, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.270171, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 0.0, b = -0.7517624545623149, c = 0.17045757337561965

  t_opt = -0.222973719
    <Z>_opt = cos(t_opt) = 0.975244182
    <X>_opt = sin(t_opt) = -0.221130698
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -0.222974, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.222974, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = 0.881
  <X> = -0.20320000000000005
  Energy = -1.0783378632712126

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9667792181015441
  <X> = -0.21413789375878944
  Energy = -1.1446879056496293
  measure Z: {'0': 19667.79218101544, '1': 332.20781898455857})
  measure X: {'0': 7858.621062412106, '1': 12141.378937587895})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_9/0.75

   ==> (oq_map.json) Exact results for r = 0.75 <== 
evals = [-1.15224352  0.3894472 ]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.1522435240824251
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/0.8
c_z = -0.691218028
c_x = 0.169960572
c_0 = -0.439308382

  t_A = -0.241102571
    <Z>_A = cos(t_A) = 0.971075301
    <X>_A = sin(t_A) = -0.238773451

   ==> Run 3-point Fourier quadrature <==
  t = -0.241103, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.241103, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = 0.806095, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = 0.806095, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -1.288300, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.288300, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 1.1102230246251565e-16, b = -0.6912180276548994, c = 0.169960571979096

  t_opt = -0.241102571
    <Z>_opt = cos(t_opt) = 0.971075301
    <X>_opt = sin(t_opt) = -0.238773451
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -0.241103, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.241103, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = 0.8796999999999999
  <X> = -0.22090000000000004
  Energy = -1.0849171713160437

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9653632501903215
  <X> = -0.23341683944641684
  Energy = -1.1462565233467896
  measure Z: {'0': 19653.632501903216, '1': 346.36749809678423})
  measure X: {'0': 7665.831605535831, '1': 12334.16839446417})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_9/0.8

   ==> (oq_map.json) Exact results for r = 0.8 <== 
evals = [-1.15111521  0.27249844]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.1511152082081149
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/0.85
c_z = -0.636488864
c_x = 0.169579229
c_0 = -0.489018448

  t_A = -0.260380693
    <Z>_A = cos(t_A) = 0.966292039
    <X>_A = sin(t_A) = -0.257448431

   ==> Run 3-point Fourier quadrature <==
  t = -0.260381, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.260381, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = 0.786817, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = 0.786817, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -1.307578, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.307578, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 1.1102230246251565e-16, b = -0.6364888642400292, c = 0.16957922946515444

  t_opt = -0.260380693
    <Z>_opt = cos(t_opt) = 0.966292039
    <X>_opt = sin(t_opt) = -0.257448431
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -0.260381, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.260381, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = 0.8688
  <X> = -0.23399999999999999
  Energy = -1.0816815130122612

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9534909051294216
  <X> = -0.24768543706384694
  Energy = -1.1379070969017278
  measure Z: {'0': 19534.909051294217, '1': 465.0909487057843})
  measure X: {'0': 7523.145629361532, '1': 12476.85437063847})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_9/0.85

   ==> (oq_map.json) Exact results for r = 0.85 <== 
evals = [-1.14771048  0.16967358]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.147710477292962
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/1.15
c_z = -0.399295092
c_x = 0.169766330
c_0 = -0.672952709

  t_A = -0.402010464
    <Z>_A = cos(t_A) = 0.920276221
    <X>_A = sin(t_A) = -0.391269314

   ==> Run 3-point Fourier quadrature <==
  t = -0.402010, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.402010, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = 0.645187, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = 0.645187, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -1.449208, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.449208, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = -5.551115123125783e-17, b = -0.3992950916910411, c = 0.1697663300774525

  t_opt = -0.402010464
    <Z>_opt = cos(t_opt) = 0.920276221
    <X>_opt = sin(t_opt) = -0.391269314
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -0.402010, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.402010, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = 0.8333999999999999
  <X> = -0.3743
  Energy = -1.069268775840631

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.9149330138371797
  <X> = -0.4005010349984925
  Energy = -1.1062725616325195
  measure Z: {'0': 19149.3301383718, '1': 850.669861628203})
  measure X: {'0': 5994.989650015076, '1': 14005.010349984925})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_9/1.15

   ==> (oq_map.json) Exact results for r = 1.15 <== 
evals = [-1.10683884 -0.23906658]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.1068388428457654
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/1.2
c_z = -0.371037374
c_x = 0.170213481
c_0 = -0.690922272

  t_A = -0.430106748
    <Z>_A = cos(t_A) = 0.908921244
    <X>_A = sin(t_A) = -0.416967830

   ==> Run 3-point Fourier quadrature <==
  t = -0.430107, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.430107, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = 0.617091, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = 0.617091, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -1.477304, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.477304, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 5.551115123125783e-17, b = -0.37103737361427747, c = 0.17021348058116215

  t_opt = -0.430106748
    <Z>_opt = cos(t_opt) = 0.908921244
    <X>_opt = sin(t_opt) = -0.416967830
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -0.430107, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.430107, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = 0.8186
  <X> = -0.4052
  Energy = -1.0636239683261148

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.8988127660533763
  <X> = -0.4341574996216013
  Energy = -1.0983148591724166
  measure Z: {'0': 18988.127660533763, '1': 1011.8723394662377})
  measure X: {'0': 5658.425003783986, '1': 14341.574996216012})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_9/1.2

   ==> (oq_map.json) Exact results for r = 1.2 <== 
evals = [-1.09913957 -0.28270497]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.099139568978659
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/1.3
c_z = -0.321395392
c_x = 0.171457744
c_0 = -0.719962104

  t_A = -0.490070852
    <Z>_A = cos(t_A) = 0.882299511
    <X>_A = sin(t_A) = -0.470688402

   ==> Run 3-point Fourier quadrature <==
  t = -0.490071, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.490071, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = 0.557127, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = 0.557127, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -1.537268, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.537268, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 5.551115123125783e-17, b = -0.32139539191852423, c = 0.17145774377906556

  t_opt = -0.490070852
    <Z>_opt = cos(t_opt) = 0.882299511
    <X>_opt = sin(t_opt) = -0.470688402
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -0.490071, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.490071, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = 0.7954000000000001
  <X> = -0.42629999999999996
  Energy = -1.0486924344227555

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.8735431870414362
  <X> = -0.45713974514204453
  Energy = -1.0790950077684769
  measure Z: {'0': 18735.43187041436, '1': 1264.568129585639})
  measure X: {'0': 5428.602548579554, '1': 14571.397451420444})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_9/1.3

   ==> (oq_map.json) Exact results for r = 1.3 <== 
evals = [-1.08423227 -0.35569193]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.0842322722775133
e_analytic - evals[0] = -0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/1.45
c_z = -0.260906520
c_x = 0.174167246
c_0 = -0.750292491

  t_A = -0.588611503
    <Z>_A = cos(t_A) = 0.831712383
    <X>_A = sin(t_A) = -0.555206729

   ==> Run 3-point Fourier quadrature <==
  t = -0.588612, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.588612, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = 0.458586, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = 0.458586, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -1.635809, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.635809, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 2.7755575615628914e-17, b = -0.2609065198764, c = 0.17416724617012774

  t_opt = -0.588611503
    <Z>_opt = cos(t_opt) = 0.831712383
    <X>_opt = sin(t_opt) = -0.555206729
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -0.588612, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.588612, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = 0.7464
  <X> = -0.5123
  Energy = -1.0342589972666716

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.8201720946137152
  <X> = -0.5508114583777337
  Energy = -1.060214052387974
  measure Z: {'0': 18201.720946137153, '1': 1798.2790538628485})
  measure X: {'0': 4491.885416222664, '1': 15508.114583777337})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_9/1.45

   ==> (oq_map.json) Exact results for r = 1.45 <== 
evals = [-1.0639905  -0.43659448]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.0639905010555568
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/1.6
c_z = -0.213224929
c_x = 0.177807023
c_0 = -0.769382665

  t_A = -0.695069165
    <Z>_A = cos(t_A) = 0.768009407
    <X>_A = sin(t_A) = -0.640438561

   ==> Run 3-point Fourier quadrature <==
  t = -0.695069, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.695069, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = 0.352128, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = 0.352128, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -1.742267, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.742267, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = -5.551115123125783e-17, b = -0.21322492879091282, c = 0.17780702316230237

  t_opt = -0.695069165
    <Z>_opt = cos(t_opt) = 0.768009407
    <X>_opt = sin(t_opt) = -0.640438561
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -0.695069, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.695069, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = 0.6975
  <X> = -0.6028
  Energy = -1.0252891266003101

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.7669099224764134
  <X> = -0.6493845985953419
  Energy = -1.0483721211791746
  measure Z: {'0': 17669.099224764133, '1': 2330.9007752358652})
  measure X: {'0': 3506.1540140465804, '1': 16493.84598595342})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_9/1.6

   ==> (oq_map.json) Exact results for r = 1.6 <== 
evals = [-1.04701589 -0.49174944]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.0470158904222164
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/1.9
c_z = -0.144203901
c_x = 0.187268886
c_0 = -0.786868492

  t_A = -0.914594616
    <Z>_A = cos(t_A) = 0.610111817
    <X>_A = sin(t_A) = -0.792315323

   ==> Run 3-point Fourier quadrature <==
  t = -0.914595, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.914595, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = 0.132603, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = 0.132603, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -1.961792, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.961792, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 2.7755575615628914e-17, b = -0.14420390107599915, c = 0.18726888604283623

  t_opt = -0.914594616
    <Z>_opt = cos(t_opt) = 0.610111817
    <X>_opt = sin(t_opt) = -0.792315323
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -0.914595, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.914595, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = 0.5481
  <X> = -0.7357
  Energy = -1.0036803693516365

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.6041825501578986
  <X> = -0.7941400730105785
  Energy = -1.022711699239649
  measure Z: {'0': 16041.825501578985, '1': 3958.1744984210136})
  measure X: {'0': 2058.599269894214, '1': 17941.400730105783})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_9/1.9

   ==> (oq_map.json) Exact results for r = 1.9 <== 
evals = [-1.023225   -0.55051198]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.0232250037111297
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/2.5
c_z = -0.066271102
c_x = 0.209148615
c_0 = -0.784992480

  t_A = -1.263943124
    <Z>_A = cos(t_A) = 0.302060331
    <X>_A = sin(t_A) = -0.953288811

   ==> Run 3-point Fourier quadrature <==
  t = -1.263943, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.263943, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -0.216746, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.216746, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -2.311141, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -2.311141, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = 6.938893903907228e-18, b = -0.0662711018357801, c = 0.2091486150522356

  t_opt = -1.263943124
    <Z>_opt = cos(t_opt) = 0.302060331
    <X>_opt = sin(t_opt) = -0.953288811
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -1.263943, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.263943, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = 0.2627
  <X> = -0.8777999999999999
  Energy = -0.9859925531786621

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.29332316774986283
  <X> = -0.9489162175735325
  Energy = -1.0028958426604053
  measure Z: {'0': 12933.231677498628, '1': 7066.768322501372})
  measure X: {'0': 510.83782426467496, '1': 19489.162175735324})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_9/2.5

   ==> (oq_map.json) Exact results for r = 2.5 <== 
evals = [-1.00438939 -0.56559557]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.0043893858738882
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/2.95
c_z = -0.036185839
c_x = 0.223454420
c_0 = -0.774745750

  t_A = -1.410251678
    <Z>_A = cos(t_A) = 0.159855875
    <X>_A = sin(t_A) = -0.987140364

   ==> Run 3-point Fourier quadrature <==
  t = -1.410252, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.410252, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -0.363054, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.363054, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -2.457449, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -2.457449, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = -9.540979117872439e-18, b = -0.03618583852259694, c = 0.22345441969595456

  t_opt = -1.410251678
    <Z>_opt = cos(t_opt) = 0.159855875
    <X>_opt = sin(t_opt) = -0.987140364
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -1.410252, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.410252, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = 0.14749999999999996
  <X> = -0.9077999999999999
  Energy = -0.98293508385959

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = 0.16784664058321686
  <X> = -0.9815924380310571
  Energy = -1.0001605905283912
  measure Z: {'0': 11678.466405832169, '1': 8321.533594167831})
  measure X: {'0': 184.07561968943048, '1': 19815.92438031057})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_9/2.95

   ==> (oq_map.json) Exact results for r = 2.95 <== 
evals = [-1.00111115 -0.54838035]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -1.0011111466652745
e_analytic - evals[0] = 0.000000000000

---------------------------------------------------------------
Find oq_map.json in /home/renke/computations/H2/cas/cc-pV5Z/6.0
c_z = -0.000371898
c_x = 0.268404889
c_0 = -0.731584011

  t_A = -1.569410743
    <Z>_A = cos(t_A) = 0.001385583
    <X>_A = sin(t_A) = -0.999999040

   ==> Run 3-point Fourier quadrature <==
  t = -1.569411, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.569411, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -0.522213, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -0.522213, run on qasm_simulator ibmq_armonk, measure X 20000 shots.
  t = -2.616608, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -2.616608, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Calibrate 6 raw counts for 3-point quadrature...

Solve linear equation E(t) = a + b*cos(t) + c*sin(t):
  a = -4.5080999277005186e-17, b = -0.00037189768093561507, c = 0.268404889371658

  t_opt = -1.569410743
    <Z>_opt = cos(t_opt) = 0.001385583
    <X>_opt = sin(t_opt) = -0.999999040
   === End 3-point Fourier quadrature ===

Measure Z, X on circuit parametrized by t_opt:
  t = -1.569411, run on qasm_simulator ibmq_armonk, measure Z 20000 shots.
  t = -1.569411, run on qasm_simulator ibmq_armonk, measure X 20000 shots.

Estimate expectations from counts:
  <Z> = -0.010399999999999965
  <X> = -0.9267000000000001
  Energy = -0.9803109540649811

Calibrate 2 raw counts for final energy...

Estimate expectations from counts:
  <Z> = -0.004138982843788663
  <X> = -0.9999999999999997
  Energy = -0.9999873609136842
  measure Z: {'0': 9958.610171562112, '1': 10041.389828437887})
  measure X: {'0': 2.451835501120214e-12, '1': 19999.999999999996})
Save rdms.json to /home/renke/computations/H2/cas/cc-pV5Z/qasm_armonk_9/6.0

   ==> (oq_map.json) Exact results for r = 6.0 <== 
evals = [-0.99998916 -0.46317886]
e_analytic = -np.sqrt(c_z**2 + c_x**2) + c_0 = -0.9999891578395312
e_analytic - evals[0] = 0.000000000000

